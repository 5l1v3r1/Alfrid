{"version":3,"sources":["node_modules/browser-pack/_prelude.js","node_modules/gl-matrix/src/gl-matrix.js","alfrid.min.js","node_modules/gl-matrix/src/gl-matrix/common.js","node_modules/gl-matrix/src/gl-matrix/mat2.js","node_modules/gl-matrix/src/gl-matrix/mat2d.js","node_modules/gl-matrix/src/gl-matrix/mat3.js","node_modules/gl-matrix/src/gl-matrix/mat4.js","node_modules/gl-matrix/src/gl-matrix/quat.js","node_modules/gl-matrix/src/gl-matrix/vec2.js","node_modules/gl-matrix/src/gl-matrix/vec3.js","node_modules/gl-matrix/src/gl-matrix/vec4.js","node_modules/scheduling/build/scheduler.js","src/alfrid.js","src/alfrid/Batch.js","src/alfrid/CubeFrameBuffer.js","src/alfrid/FrameBuffer.js","src/alfrid/GLCubeTexture.js","src/alfrid/GLShader.js","src/alfrid/GLTexture.js","src/alfrid/GLTool.js","src/alfrid/Geom.js","src/alfrid/Mesh.js","src/alfrid/cameras/Camera.js","src/alfrid/cameras/CameraCube.js","src/alfrid/cameras/CameraOrtho.js","src/alfrid/cameras/CameraPerspective.js","src/alfrid/helpers/BatchAxis.js","src/alfrid/helpers/BatchBall.js","src/alfrid/helpers/BatchCopy.js","src/alfrid/helpers/BatchDotsPlane.js","src/alfrid/helpers/BatchSkybox.js","src/alfrid/helpers/Scene.js","src/alfrid/helpers/View.js","src/alfrid/loaders/BinaryLoader.js","src/alfrid/loaders/HDRLoader.js","src/alfrid/loaders/ObjLoader.js","src/alfrid/post/EffectComposer.js","src/alfrid/tools/EaseNumber.js","src/alfrid/tools/EventDispatcher.js","src/alfrid/tools/HDRParser.js","src/alfrid/tools/OrbitalControl.js","src/alfrid/tools/QuatRotation.js","src/alfrid/tools/ShaderLibs.js"],"names":["f","exports","module","define","amd","g","window","global","self","this","alfrid","e","t","n","r","s","o","u","a","require","i","Error","code","l","call","length",1,"_dereq_","glMatrix","mat2","mat2d","mat3","mat4","quat","vec2","vec3","vec4","./gl-matrix/common.js","./gl-matrix/mat2.js","./gl-matrix/mat2d.js","./gl-matrix/mat3.js","./gl-matrix/mat4.js","./gl-matrix/quat.js","./gl-matrix/vec2.js","./gl-matrix/vec3.js","./gl-matrix/vec4.js",2,"EPSILON","ARRAY_TYPE","Float32Array","Array","RANDOM","Math","random","ENABLE_SIMD","SIMD_AVAILABLE","USE_SIMD","setMatrixArrayType","type","degree","PI","toRadian","equals","b","abs","max",3,"create","out","clone","copy","identity","fromValues","m00","m01","m10","m11","set","transpose","a1","invert","a0","a2","a3","det","adjoint","determinant","multiply","b0","b1","b2","b3","mul","rotate","rad","sin","c","cos","scale","v","v0","v1","fromRotation","fromScaling","str","frob","sqrt","pow","LDU","L","D","U","add","subtract","sub","exactEquals","multiplyScalar","multiplyScalarAndAdd","./common.js",4,"d","tx","ty","aa","ab","ac","ad","atx","aty","a4","a5","b4","b5","translate","fromTranslation",5,"fromMat4","m02","m12","m20","m21","m22","a01","a02","a12","a00","a10","a11","a20","a21","a22","b01","b11","b21","b00","b02","b10","b12","b20","b22","x","y","fromMat2d","fromQuat","q","z","w","x2","y2","z2","xx","yx","yy","zx","zy","zz","wx","wy","wz","normalFromMat4","a03","a13","a23","a30","a31","a32","a33","b03","b04","b05","b06","b07","b08","b09","a6","a7","a8","b6","b7","b8",6,"scalar","SIMD","m03","m13","m23","m30","m31","m32","m33","tmp01","tmp23","out0","out1","out2","out3","Float32x4","load","shuffle","store","row0","row1","row2","row3","tmp1","minor0","minor1","minor2","minor3","swizzle","reciprocalApproximation","vec","t0","axis","len","rotateX","splat","a_1","a_2","rotateY","a_0","rotateZ","fromXRotation","fromYRotation","fromZRotation","fromRotationTranslation","xy","xz","yz","getTranslation","mat","getRotation","trace","S","fromRotationTranslationScale","sx","sy","sz","fromRotationTranslationScaleOrigin","ox","oy","oz","frustum","left","right","bottom","top","near","far","rl","tb","nf","perspective","fovy","aspect","tan","perspectiveFromFieldOfView","fov","upTan","upDegrees","downTan","downDegrees","leftTan","leftDegrees","rightTan","rightDegrees","xScale","yScale","ortho","lr","bt","lookAt","eye","center","up","x0","x1","y0","y1","z0","z1","eyex","eyey","eyez","upx","upy","upz","centerx","centery","centerz","a9","a14","a15","b9","b13","b14","b15",7,"rotationTo","tmpvec3","xUnitVec3","yUnitVec3","dot","cross","normalize","setAxisAngle","setAxes","matr","view","fromMat3","getAxisAngle","out_axis","acos","ax","ay","az","aw","bx","by","bz","bw","calculateW","lerp","slerp","omega","cosom","sinom","scale0","scale1","sqlerp","temp1","temp2","invDot","conjugate","squaredLength","sqrLen","m","fRoot","fTrace","j","k","./mat3.js","./vec3.js","./vec4.js",8,"divide","div","ceil","floor","min","round","scaleAndAdd","distance","dist","squaredDistance","sqrDist","negate","inverse","transformMat2","transformMat2d","transformMat3","transformMat4","forEach","stride","offset","count","fn","arg",9,"hermite","factorTimes2","factor1","factor2","factor3","factor4","bezier","inverseFactor","inverseFactorTimesTwo","zScale","transformQuat","qx","qy","qz","qw","ix","iy","iz","iw","p","angle","tempA","tempB","cosine",10,11,"_classCallCheck","instance","Constructor","TypeError","Object","defineProperty","value","_createClass","defineProperties","target","props","descriptor","enumerable","configurable","writable","key","protoProps","staticProps","prototype","FRAMERATE","Scheduler","_delayTasks","_nextTasks","_deferTasks","_highTasks","_usurpTask","_enterframeTasks","_idTable","_loop","func","params","id","undefined","_delay","time","Date","getTime","delay","push","task","interval","current","pop","startTime","splice","shift","unshift","concat","_this","_process","requestAnimationFrame","scheduler",12,"_interopRequireDefault","obj","__esModule","default","_glMatrix","_glMatrix2","_GLTool","_GLTool2","_GLShader","_GLShader2","_GLTexture","_GLTexture2","_GLCubeTexture","_GLCubeTexture2","_Mesh","_Mesh2","_Geom","_Geom2","_Batch","_Batch2","_FrameBuffer","_FrameBuffer2","_CubeFrameBuffer","_CubeFrameBuffer2","_scheduling","_scheduling2","_EventDispatcher","_EventDispatcher2","_EaseNumber","_EaseNumber2","_OrbitalControl","_OrbitalControl2","_QuatRotation","_QuatRotation2","_Camera","_Camera2","_CameraOrtho","_CameraOrtho2","_CameraPerspective","_CameraPerspective2","_CameraCube","_CameraCube2","_BinaryLoader","_BinaryLoader2","_ObjLoader","_ObjLoader2","_HDRLoader","_HDRLoader2","_BatchCopy","_BatchCopy2","_BatchAxis","_BatchAxis2","_BatchBall","_BatchBall2","_BatchDotsPlane","_BatchDotsPlane2","_BatchSkybox","_BatchSkybox2","_Scene","_Scene2","_View","_View2","_ShaderLibs","_ShaderLibs2","_EffectComposer","_EffectComposer2","VERSION","glm","GL","GLTool","GLShader","GLTexture","GLCubeTexture","Mesh","Geom","Batch","FrameBuffer","CubeFrameBuffer","EventDispatcher","EaseNumber","Camera","CameraOrtho","CameraPerspective","CameraCube","OrbitalControl","QuatRotation","BinaryLoader","ObjLoader","HDRLoader","BatchCopy","BatchAxis","BatchBall","BatchSkybox","BatchDotsPlane","Scene","View","EffectComposer","ShaderLibs","navigator","userAgent","indexOf","console","log","./alfrid/Batch","./alfrid/CubeFrameBuffer","./alfrid/FrameBuffer","./alfrid/GLCubeTexture","./alfrid/GLShader","./alfrid/GLTexture","./alfrid/GLTool","./alfrid/Geom","./alfrid/Mesh","./alfrid/cameras/Camera","./alfrid/cameras/CameraCube","./alfrid/cameras/CameraOrtho","./alfrid/cameras/CameraPerspective","./alfrid/helpers/BatchAxis","./alfrid/helpers/BatchBall","./alfrid/helpers/BatchCopy","./alfrid/helpers/BatchDotsPlane","./alfrid/helpers/BatchSkybox","./alfrid/helpers/Scene","./alfrid/helpers/View","./alfrid/loaders/BinaryLoader","./alfrid/loaders/HDRLoader","./alfrid/loaders/ObjLoader","./alfrid/post/EffectComposer","./alfrid/tools/EaseNumber","./alfrid/tools/EventDispatcher","./alfrid/tools/OrbitalControl","./alfrid/tools/QuatRotation","./alfrid/tools/ShaderLibs","gl-matrix","scheduling",13,"mMesh","mShader","_mesh","_shader","bind","draw","mesh","get","./GLTool",14,"gl","size","mParameters","arguments","_size","magFilter","LINEAR","minFilter","wrapS","CLAMP_TO_EDGE","wrapT","_init","texture","createTexture","glTexture","bindTexture","TEXTURE_CUBE_MAP","texParameteri","TEXTURE_MAG_FILTER","TEXTURE_MIN_FILTER","TEXTURE_WRAP_S","TEXTURE_WRAP_T","targets","TEXTURE_CUBE_MAP_POSITIVE_X","TEXTURE_CUBE_MAP_NEGATIVE_X","TEXTURE_CUBE_MAP_POSITIVE_Y","TEXTURE_CUBE_MAP_NEGATIVE_Y","TEXTURE_CUBE_MAP_POSITIVE_Z","TEXTURE_CUBE_MAP_NEGATIVE_Z","pixelStorei","UNPACK_FLIP_Y_WEBGL","texImage2D","RGBA","width","height","FLOAT","_frameBuffers","_i","frameBuffer","createFramebuffer","bindFramebuffer","FRAMEBUFFER","framebufferTexture2D","COLOR_ATTACHMENT0","status","checkFramebufferStatus","FRAMEBUFFER_COMPLETE","bindRenderbuffer","RENDERBUFFER","mTargetIndex","viewport","./GLCubeTexture",15,"isPowerOfTwo","WEBGL_depth_texture","mWidth","mHeight","checkExtension","useDepth","useStencil","LINEAR_MIPMAP_NEAREST","depthTexture","glDepthTexture","TEXTURE_2D","isMobile","UNSIGNED_BYTE","DEPTH_COMPONENT","UNSIGNED_SHORT","DEPTH_ATTACHMENT","generateMipmap","clear","unbind","mValue","NEAREST","REPEAT","MIRRORED_REPEAT","./GLTexture",16,"mSource","isCubeTexture","exposure","shape","data","index","shader","activeTexture","TEXTURE0","uniform1i","uniformTextures","_bindIndex",17,"addLineNumbers","string","lines","split","join","defaultVertexShader","defaultFragmentShader","uniform_mapping","float","int","strVertexShader","strFragmentShader","parameters","uniformValues","vsShader","_createShaderProgram","fsShader","_attachShaderProgram","useProgram","shaderProgram","useShader","mName","mType","uniformType","hasUniform","oUniform","name","uniformLoc","getUniformLocation","mShaderStr","isVertexShader","shaderType","VERTEX_SHADER","FRAGMENT_SHADER","createShader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","warn","getShaderInfoLog","mVertexShader","mFragmentShader","createProgram","attachShader","linkProgram",18,"isSourcePowerOfTwo","videoWidth","h","videoHeight","isTexture","_mSource","_isVideo","tagName","ext","getExtension","getParameter","MAX_TEXTURE_MAX_ANISOTROPY_EXT","texParameterf","TEXTURE_MAX_ANISOTROPY_EXT",19,"canvas","_viewport","_enabledVertexAttribute","identityMatrix","_normalMatrix","_inverseModelViewMatrix","_modelMatrix","_matrix","test","mCanvas","error","destroy","setSize","innerWidth","innerHeight","getContext","extensions","DEPTH_TEST","CULL_FACE","BLEND","POINTS","LINES","TRIANGLES","SCISSOR_TEST","enable","hasChanged","scissor","clearColor","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","mCamera","camera","mRotation","matrix","drawingType","getAttribLoc","cacheAttribLoc","getAttribLocation","attributes","attribute","bindBuffer","ARRAY_BUFFER","buffer","attrPosition","vertexAttribPointer","itemSize","enableVertexAttribArray","ELEMENT_ARRAY_BUFFER","iBuffer","uniform","projection","drawType","drawArrays","vertexSize","drawElements","numItems","_width","_height","_aspectRatio","mExtension","blendFunc","SRC_ALPHA","ONE_MINUS_SRC_ALPHA","ONE","mParameter","disable","setViewport","parentNode","removeChild",20,"plane","numSegments","withNormals","positions","coords","indices","normals","gapX","gapY","gapUV","bufferVertex","bufferTexCoords","bufferIndices","bufferNormal","sphere","isInvert","getPosition","isNormal","rx","ry","pos","precision","reverse","cube","skybox","bigTriangle","bufferData","./Mesh",21,"mDrawType","_attributes","_vertexSize","_vertices","_texCoords","_normals","_faceNormals","_tangents","_indices","_faces","mArrayVertices","isDynamic","mArrayTexCoords","mNormals","mArrayIndices","DYNAMIC_DRAW","STATIC_DRAW","createBuffer","Uint16Array","mData","mItemSize","dataArray","usingFaceNormals","_generateFaces","_computeFaceNormals","_computeVertexNormals","faceIndex","face","N","normal","sumNormal","ia","ib","ic","vba","vca","vNormal",22,"_projection","position","aEye","aCenter","aUp",23,"_possibleConstructorReturn","ReferenceError","_inherits","subClass","superClass","constructor","setPrototypeOf","__proto__","_CameraPerspective3","CAMERA_SETTINGS","getPrototypeOf","setPerspective","mIndex","./CameraPerspective",24,"_Camera3","./Camera",25,"mFov","mAspectRatio","mNear","mFar","_fov","_near","_far",26,"_Batch3","colors","../Batch","../GLShader","../GLTool","../Mesh",27,"_get","object","property","receiver","Function","desc","getOwnPropertyDescriptor","parent","getter","color","opacity","../Geom",28,29,"numDots","gap",30,31,"_initTextures","_initViews","_efIndex","addEF","addEventListener","resize","removeEF","_this2","setAspectRatio","aspectRatio","orbitalControl","radius","cameraOrtho","setMatrices","render","../cameras/CameraOrtho","../cameras/CameraPerspective","../tools/OrbitalControl",32,"mStrVertex","mStrFrag",33,"isArrayBuffer","_req","XMLHttpRequest","_onLoaded","_onProgress","responseType","url","callback","_callback","open","send","response",34,"_BinaryLoader3","_HDRParser","_HDRParser2","mArrayBuffer","parse","../tools/HDRParser","./BinaryLoader",35,"ignoreNormals","_ignoreNormals","_drawType","_parseObj","objStr","parseVertexIndex","parseInt","vertices","parseNormalIndex","parseUVIndex","uvs","addVertex","addUV","addNormal","finalNormals","addFace","ua","ub","uc","ud","na","nb","nc","nd","result","vertex_pattern","normal_pattern","uv_pattern","face_pattern1","face_pattern2","face_pattern3","face_pattern4","line","trim","charAt","exec","parseFloat","_generateMeshes","maxNumVertices","hasNormals","hasUVs","meshes","lastIndex","oCopy","sliceNum","tmpIndex",36,"_fbo","_fboTarget","_passes","pass","_swap","tmp","../FrameBuffer",37,"mEasing","easing","_value","_targetValue","_update","_checkLimit","mAdd","mMin","mMax","limit","_min","_max",38,"supportsCustomEvents","newTestCustomEvent","document","createEvent","_eventListeners","aEventType","aFunction","currentArray","currentArrayLength","removeEventListener","aEvent","eventType","currentTarget","theError","newEvent","detail","dispatcher","dispatchEvent","currentEventListeners","_copyArray","currentFunction","aDetail","initCustomEvent","dispatchCustomEvent","objectName","hasOwnProperty","aArray",39,"readPixelsRawRLE","fileOffset","scanline_width","num_scanlines","readBuf","buf","bytesRead","bufferLength","readBufOffset","readPixelsRaw","numpixels","numExpected","numRead","rgbe","scanline_buffer","ptr","ptr_end","parseHdr","readLine","NEW_LINE","String","fromCharCode","ArrayBuffer","Uint8Array","gamma","rle","match","radiancePattern","formatPattern","exposurePattern","Number","commentPattern","widthHeightPattern","floatData","floatOffset",40,"getMouse","mEvent","mTarget","touches","pageX","pageY","clientX","clientY","mListenerTarget","mRadius","_target","_listenerTarget","_mouse","_preMouse","_up","positionOffset","_rx","_ry","_preRX","_preRY","_isLockZoom","_isLockRotation","_isInvert","sensitivity","_onWheel","_onDown","_onMove","_onUp","_isMouseDown","targetValue","preventDefault","diffX","diffY","wheelDelta","_updatePosition","_updateCamera","tr","./EaseNumber",41,"_vZaxis","_zAxis","preMouse","mouse","_rotation","tempRotation","_rotateZMargin","_offset","_slerp","_isLocked","_diffX","_diffY","mQuat","speed","_updateRotation","_currDiffX","_currDiffY","_isRotateZ","_targetQuat","setTo","mTempRotation","_quat",42,"simpleColorFrag","bigTriangleVert","generalVert","generalNormalVert","copyFrag","basicVert","skyboxVert","skyboxFrag"],"mappings":"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","file":"alfrid.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","/**\n * @fileoverview gl-matrix - High performance matrix and vector operations\n * @author Brandon Jones\n * @author Colin MacKenzie IV\n * @version 2.3.2\n */\n\n/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE. */\n// END HEADER\n\nexports.glMatrix = require(\"./gl-matrix/common.js\");\nexports.mat2 = require(\"./gl-matrix/mat2.js\");\nexports.mat2d = require(\"./gl-matrix/mat2d.js\");\nexports.mat3 = require(\"./gl-matrix/mat3.js\");\nexports.mat4 = require(\"./gl-matrix/mat4.js\");\nexports.quat = require(\"./gl-matrix/quat.js\");\nexports.vec2 = require(\"./gl-matrix/vec2.js\");\nexports.vec3 = require(\"./gl-matrix/vec3.js\");\nexports.vec4 = require(\"./gl-matrix/vec4.js\");","(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.alfrid = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(_dereq_,module,exports){\n/**\n * @fileoverview gl-matrix - High performance matrix and vector operations\n * @author Brandon Jones\n * @author Colin MacKenzie IV\n * @version 2.3.2\n */\n\n/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE. */\n// END HEADER\n\nexports.glMatrix = _dereq_(\"./gl-matrix/common.js\");\nexports.mat2 = _dereq_(\"./gl-matrix/mat2.js\");\nexports.mat2d = _dereq_(\"./gl-matrix/mat2d.js\");\nexports.mat3 = _dereq_(\"./gl-matrix/mat3.js\");\nexports.mat4 = _dereq_(\"./gl-matrix/mat4.js\");\nexports.quat = _dereq_(\"./gl-matrix/quat.js\");\nexports.vec2 = _dereq_(\"./gl-matrix/vec2.js\");\nexports.vec3 = _dereq_(\"./gl-matrix/vec3.js\");\nexports.vec4 = _dereq_(\"./gl-matrix/vec4.js\");\n},{\"./gl-matrix/common.js\":2,\"./gl-matrix/mat2.js\":3,\"./gl-matrix/mat2d.js\":4,\"./gl-matrix/mat3.js\":5,\"./gl-matrix/mat4.js\":6,\"./gl-matrix/quat.js\":7,\"./gl-matrix/vec2.js\":8,\"./gl-matrix/vec3.js\":9,\"./gl-matrix/vec4.js\":10}],2:[function(_dereq_,module,exports){\n/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE. */\n\n/**\n * @class Common utilities\n * @name glMatrix\n */\nvar glMatrix = {};\n\n// Configuration Constants\nglMatrix.EPSILON = 0.000001;\nglMatrix.ARRAY_TYPE = (typeof Float32Array !== 'undefined') ? Float32Array : Array;\nglMatrix.RANDOM = Math.random;\nglMatrix.ENABLE_SIMD = false;\n\n// Capability detection\nglMatrix.SIMD_AVAILABLE = (glMatrix.ARRAY_TYPE === Float32Array) && ('SIMD' in this);\nglMatrix.USE_SIMD = glMatrix.ENABLE_SIMD && glMatrix.SIMD_AVAILABLE;\n\n/**\n * Sets the type of array used when creating new vectors and matrices\n *\n * @param {Type} type Array type, such as Float32Array or Array\n */\nglMatrix.setMatrixArrayType = function(type) {\n    glMatrix.ARRAY_TYPE = type;\n}\n\nvar degree = Math.PI / 180;\n\n/**\n* Convert Degree To Radian\n*\n* @param {Number} Angle in Degrees\n*/\nglMatrix.toRadian = function(a){\n     return a * degree;\n}\n\n/**\n * Tests whether or not the arguments have approximately the same value, within an absolute\n * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less \n * than or equal to 1.0, and a relative tolerance is used for larger values)\n * \n * @param {Number} a The first number to test.\n * @param {Number} b The second number to test.\n * @returns {Boolean} True if the numbers are approximately equal, false otherwise.\n */\nglMatrix.equals = function(a, b) {\n\treturn Math.abs(a - b) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a), Math.abs(b));\n}\n\nmodule.exports = glMatrix;\n\n},{}],3:[function(_dereq_,module,exports){\n/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE. */\n\nvar glMatrix = _dereq_(\"./common.js\");\n\n/**\n * @class 2x2 Matrix\n * @name mat2\n */\nvar mat2 = {};\n\n/**\n * Creates a new identity mat2\n *\n * @returns {mat2} a new 2x2 matrix\n */\nmat2.create = function() {\n    var out = new glMatrix.ARRAY_TYPE(4);\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 1;\n    return out;\n};\n\n/**\n * Creates a new mat2 initialized with values from an existing matrix\n *\n * @param {mat2} a matrix to clone\n * @returns {mat2} a new 2x2 matrix\n */\nmat2.clone = function(a) {\n    var out = new glMatrix.ARRAY_TYPE(4);\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    return out;\n};\n\n/**\n * Copy the values from one mat2 to another\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the source matrix\n * @returns {mat2} out\n */\nmat2.copy = function(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    return out;\n};\n\n/**\n * Set a mat2 to the identity matrix\n *\n * @param {mat2} out the receiving matrix\n * @returns {mat2} out\n */\nmat2.identity = function(out) {\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 1;\n    return out;\n};\n\n/**\n * Create a new mat2 with the given values\n *\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m10 Component in column 1, row 0 position (index 2)\n * @param {Number} m11 Component in column 1, row 1 position (index 3)\n * @returns {mat2} out A new 2x2 matrix\n */\nmat2.fromValues = function(m00, m01, m10, m11) {\n    var out = new glMatrix.ARRAY_TYPE(4);\n    out[0] = m00;\n    out[1] = m01;\n    out[2] = m10;\n    out[3] = m11;\n    return out;\n};\n\n/**\n * Set the components of a mat2 to the given values\n *\n * @param {mat2} out the receiving matrix\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m10 Component in column 1, row 0 position (index 2)\n * @param {Number} m11 Component in column 1, row 1 position (index 3)\n * @returns {mat2} out\n */\nmat2.set = function(out, m00, m01, m10, m11) {\n    out[0] = m00;\n    out[1] = m01;\n    out[2] = m10;\n    out[3] = m11;\n    return out;\n};\n\n\n/**\n * Transpose the values of a mat2\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the source matrix\n * @returns {mat2} out\n */\nmat2.transpose = function(out, a) {\n    // If we are transposing ourselves we can skip a few steps but have to cache some values\n    if (out === a) {\n        var a1 = a[1];\n        out[1] = a[2];\n        out[2] = a1;\n    } else {\n        out[0] = a[0];\n        out[1] = a[2];\n        out[2] = a[1];\n        out[3] = a[3];\n    }\n    \n    return out;\n};\n\n/**\n * Inverts a mat2\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the source matrix\n * @returns {mat2} out\n */\nmat2.invert = function(out, a) {\n    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3],\n\n        // Calculate the determinant\n        det = a0 * a3 - a2 * a1;\n\n    if (!det) {\n        return null;\n    }\n    det = 1.0 / det;\n    \n    out[0] =  a3 * det;\n    out[1] = -a1 * det;\n    out[2] = -a2 * det;\n    out[3] =  a0 * det;\n\n    return out;\n};\n\n/**\n * Calculates the adjugate of a mat2\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the source matrix\n * @returns {mat2} out\n */\nmat2.adjoint = function(out, a) {\n    // Caching this value is nessecary if out == a\n    var a0 = a[0];\n    out[0] =  a[3];\n    out[1] = -a[1];\n    out[2] = -a[2];\n    out[3] =  a0;\n\n    return out;\n};\n\n/**\n * Calculates the determinant of a mat2\n *\n * @param {mat2} a the source matrix\n * @returns {Number} determinant of a\n */\nmat2.determinant = function (a) {\n    return a[0] * a[3] - a[2] * a[1];\n};\n\n/**\n * Multiplies two mat2's\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the first operand\n * @param {mat2} b the second operand\n * @returns {mat2} out\n */\nmat2.multiply = function (out, a, b) {\n    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];\n    var b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3];\n    out[0] = a0 * b0 + a2 * b1;\n    out[1] = a1 * b0 + a3 * b1;\n    out[2] = a0 * b2 + a2 * b3;\n    out[3] = a1 * b2 + a3 * b3;\n    return out;\n};\n\n/**\n * Alias for {@link mat2.multiply}\n * @function\n */\nmat2.mul = mat2.multiply;\n\n/**\n * Rotates a mat2 by the given angle\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat2} out\n */\nmat2.rotate = function (out, a, rad) {\n    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3],\n        s = Math.sin(rad),\n        c = Math.cos(rad);\n    out[0] = a0 *  c + a2 * s;\n    out[1] = a1 *  c + a3 * s;\n    out[2] = a0 * -s + a2 * c;\n    out[3] = a1 * -s + a3 * c;\n    return out;\n};\n\n/**\n * Scales the mat2 by the dimensions in the given vec2\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the matrix to rotate\n * @param {vec2} v the vec2 to scale the matrix by\n * @returns {mat2} out\n **/\nmat2.scale = function(out, a, v) {\n    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3],\n        v0 = v[0], v1 = v[1];\n    out[0] = a0 * v0;\n    out[1] = a1 * v0;\n    out[2] = a2 * v1;\n    out[3] = a3 * v1;\n    return out;\n};\n\n/**\n * Creates a matrix from a given angle\n * This is equivalent to (but much faster than):\n *\n *     mat2.identity(dest);\n *     mat2.rotate(dest, dest, rad);\n *\n * @param {mat2} out mat2 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat2} out\n */\nmat2.fromRotation = function(out, rad) {\n    var s = Math.sin(rad),\n        c = Math.cos(rad);\n    out[0] = c;\n    out[1] = s;\n    out[2] = -s;\n    out[3] = c;\n    return out;\n}\n\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat2.identity(dest);\n *     mat2.scale(dest, dest, vec);\n *\n * @param {mat2} out mat2 receiving operation result\n * @param {vec2} v Scaling vector\n * @returns {mat2} out\n */\nmat2.fromScaling = function(out, v) {\n    out[0] = v[0];\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = v[1];\n    return out;\n}\n\n/**\n * Returns a string representation of a mat2\n *\n * @param {mat2} mat matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\nmat2.str = function (a) {\n    return 'mat2(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';\n};\n\n/**\n * Returns Frobenius norm of a mat2\n *\n * @param {mat2} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\nmat2.frob = function (a) {\n    return(Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2)))\n};\n\n/**\n * Returns L, D and U matrices (Lower triangular, Diagonal and Upper triangular) by factorizing the input matrix\n * @param {mat2} L the lower triangular matrix \n * @param {mat2} D the diagonal matrix \n * @param {mat2} U the upper triangular matrix \n * @param {mat2} a the input matrix to factorize\n */\n\nmat2.LDU = function (L, D, U, a) { \n    L[2] = a[2]/a[0]; \n    U[0] = a[0]; \n    U[1] = a[1]; \n    U[3] = a[3] - L[2] * U[1]; \n    return [L, D, U];       \n}; \n\n/**\n * Adds two mat2's\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the first operand\n * @param {mat2} b the second operand\n * @returns {mat2} out\n */\nmat2.add = function(out, a, b) {\n    out[0] = a[0] + b[0];\n    out[1] = a[1] + b[1];\n    out[2] = a[2] + b[2];\n    out[3] = a[3] + b[3];\n    return out;\n};\n\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the first operand\n * @param {mat2} b the second operand\n * @returns {mat2} out\n */\nmat2.subtract = function(out, a, b) {\n    out[0] = a[0] - b[0];\n    out[1] = a[1] - b[1];\n    out[2] = a[2] - b[2];\n    out[3] = a[3] - b[3];\n    return out;\n};\n\n/**\n * Alias for {@link mat2.subtract}\n * @function\n */\nmat2.sub = mat2.subtract;\n\n/**\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {mat2} a The first matrix.\n * @param {mat2} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nmat2.exactEquals = function (a, b) {\n    return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\n};\n\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {mat2} a The first matrix.\n * @param {mat2} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nmat2.equals = function (a, b) {\n    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];\n    var b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3];\n    return (Math.abs(a0 - b0) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n            Math.abs(a1 - b1) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\n            Math.abs(a2 - b2) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&\n            Math.abs(a3 - b3) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a3), Math.abs(b3)));\n};\n\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat2} out\n */\nmat2.multiplyScalar = function(out, a, b) {\n    out[0] = a[0] * b;\n    out[1] = a[1] * b;\n    out[2] = a[2] * b;\n    out[3] = a[3] * b;\n    return out;\n};\n\n/**\n * Adds two mat2's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat2} out the receiving vector\n * @param {mat2} a the first operand\n * @param {mat2} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat2} out\n */\nmat2.multiplyScalarAndAdd = function(out, a, b, scale) {\n    out[0] = a[0] + (b[0] * scale);\n    out[1] = a[1] + (b[1] * scale);\n    out[2] = a[2] + (b[2] * scale);\n    out[3] = a[3] + (b[3] * scale);\n    return out;\n};\n\nmodule.exports = mat2;\n\n},{\"./common.js\":2}],4:[function(_dereq_,module,exports){\n/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE. */\n\nvar glMatrix = _dereq_(\"./common.js\");\n\n/**\n * @class 2x3 Matrix\n * @name mat2d\n * \n * @description \n * A mat2d contains six elements defined as:\n * <pre>\n * [a, c, tx,\n *  b, d, ty]\n * </pre>\n * This is a short form for the 3x3 matrix:\n * <pre>\n * [a, c, tx,\n *  b, d, ty,\n *  0, 0, 1]\n * </pre>\n * The last row is ignored so the array is shorter and operations are faster.\n */\nvar mat2d = {};\n\n/**\n * Creates a new identity mat2d\n *\n * @returns {mat2d} a new 2x3 matrix\n */\nmat2d.create = function() {\n    var out = new glMatrix.ARRAY_TYPE(6);\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 1;\n    out[4] = 0;\n    out[5] = 0;\n    return out;\n};\n\n/**\n * Creates a new mat2d initialized with values from an existing matrix\n *\n * @param {mat2d} a matrix to clone\n * @returns {mat2d} a new 2x3 matrix\n */\nmat2d.clone = function(a) {\n    var out = new glMatrix.ARRAY_TYPE(6);\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[4] = a[4];\n    out[5] = a[5];\n    return out;\n};\n\n/**\n * Copy the values from one mat2d to another\n *\n * @param {mat2d} out the receiving matrix\n * @param {mat2d} a the source matrix\n * @returns {mat2d} out\n */\nmat2d.copy = function(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[4] = a[4];\n    out[5] = a[5];\n    return out;\n};\n\n/**\n * Set a mat2d to the identity matrix\n *\n * @param {mat2d} out the receiving matrix\n * @returns {mat2d} out\n */\nmat2d.identity = function(out) {\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 1;\n    out[4] = 0;\n    out[5] = 0;\n    return out;\n};\n\n/**\n * Create a new mat2d with the given values\n *\n * @param {Number} a Component A (index 0)\n * @param {Number} b Component B (index 1)\n * @param {Number} c Component C (index 2)\n * @param {Number} d Component D (index 3)\n * @param {Number} tx Component TX (index 4)\n * @param {Number} ty Component TY (index 5)\n * @returns {mat2d} A new mat2d\n */\nmat2d.fromValues = function(a, b, c, d, tx, ty) {\n    var out = new glMatrix.ARRAY_TYPE(6);\n    out[0] = a;\n    out[1] = b;\n    out[2] = c;\n    out[3] = d;\n    out[4] = tx;\n    out[5] = ty;\n    return out;\n};\n\n/**\n * Set the components of a mat2d to the given values\n *\n * @param {mat2d} out the receiving matrix\n * @param {Number} a Component A (index 0)\n * @param {Number} b Component B (index 1)\n * @param {Number} c Component C (index 2)\n * @param {Number} d Component D (index 3)\n * @param {Number} tx Component TX (index 4)\n * @param {Number} ty Component TY (index 5)\n * @returns {mat2d} out\n */\nmat2d.set = function(out, a, b, c, d, tx, ty) {\n    out[0] = a;\n    out[1] = b;\n    out[2] = c;\n    out[3] = d;\n    out[4] = tx;\n    out[5] = ty;\n    return out;\n};\n\n/**\n * Inverts a mat2d\n *\n * @param {mat2d} out the receiving matrix\n * @param {mat2d} a the source matrix\n * @returns {mat2d} out\n */\nmat2d.invert = function(out, a) {\n    var aa = a[0], ab = a[1], ac = a[2], ad = a[3],\n        atx = a[4], aty = a[5];\n\n    var det = aa * ad - ab * ac;\n    if(!det){\n        return null;\n    }\n    det = 1.0 / det;\n\n    out[0] = ad * det;\n    out[1] = -ab * det;\n    out[2] = -ac * det;\n    out[3] = aa * det;\n    out[4] = (ac * aty - ad * atx) * det;\n    out[5] = (ab * atx - aa * aty) * det;\n    return out;\n};\n\n/**\n * Calculates the determinant of a mat2d\n *\n * @param {mat2d} a the source matrix\n * @returns {Number} determinant of a\n */\nmat2d.determinant = function (a) {\n    return a[0] * a[3] - a[1] * a[2];\n};\n\n/**\n * Multiplies two mat2d's\n *\n * @param {mat2d} out the receiving matrix\n * @param {mat2d} a the first operand\n * @param {mat2d} b the second operand\n * @returns {mat2d} out\n */\nmat2d.multiply = function (out, a, b) {\n    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5],\n        b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3], b4 = b[4], b5 = b[5];\n    out[0] = a0 * b0 + a2 * b1;\n    out[1] = a1 * b0 + a3 * b1;\n    out[2] = a0 * b2 + a2 * b3;\n    out[3] = a1 * b2 + a3 * b3;\n    out[4] = a0 * b4 + a2 * b5 + a4;\n    out[5] = a1 * b4 + a3 * b5 + a5;\n    return out;\n};\n\n/**\n * Alias for {@link mat2d.multiply}\n * @function\n */\nmat2d.mul = mat2d.multiply;\n\n/**\n * Rotates a mat2d by the given angle\n *\n * @param {mat2d} out the receiving matrix\n * @param {mat2d} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat2d} out\n */\nmat2d.rotate = function (out, a, rad) {\n    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5],\n        s = Math.sin(rad),\n        c = Math.cos(rad);\n    out[0] = a0 *  c + a2 * s;\n    out[1] = a1 *  c + a3 * s;\n    out[2] = a0 * -s + a2 * c;\n    out[3] = a1 * -s + a3 * c;\n    out[4] = a4;\n    out[5] = a5;\n    return out;\n};\n\n/**\n * Scales the mat2d by the dimensions in the given vec2\n *\n * @param {mat2d} out the receiving matrix\n * @param {mat2d} a the matrix to translate\n * @param {vec2} v the vec2 to scale the matrix by\n * @returns {mat2d} out\n **/\nmat2d.scale = function(out, a, v) {\n    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5],\n        v0 = v[0], v1 = v[1];\n    out[0] = a0 * v0;\n    out[1] = a1 * v0;\n    out[2] = a2 * v1;\n    out[3] = a3 * v1;\n    out[4] = a4;\n    out[5] = a5;\n    return out;\n};\n\n/**\n * Translates the mat2d by the dimensions in the given vec2\n *\n * @param {mat2d} out the receiving matrix\n * @param {mat2d} a the matrix to translate\n * @param {vec2} v the vec2 to translate the matrix by\n * @returns {mat2d} out\n **/\nmat2d.translate = function(out, a, v) {\n    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5],\n        v0 = v[0], v1 = v[1];\n    out[0] = a0;\n    out[1] = a1;\n    out[2] = a2;\n    out[3] = a3;\n    out[4] = a0 * v0 + a2 * v1 + a4;\n    out[5] = a1 * v0 + a3 * v1 + a5;\n    return out;\n};\n\n/**\n * Creates a matrix from a given angle\n * This is equivalent to (but much faster than):\n *\n *     mat2d.identity(dest);\n *     mat2d.rotate(dest, dest, rad);\n *\n * @param {mat2d} out mat2d receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat2d} out\n */\nmat2d.fromRotation = function(out, rad) {\n    var s = Math.sin(rad), c = Math.cos(rad);\n    out[0] = c;\n    out[1] = s;\n    out[2] = -s;\n    out[3] = c;\n    out[4] = 0;\n    out[5] = 0;\n    return out;\n}\n\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat2d.identity(dest);\n *     mat2d.scale(dest, dest, vec);\n *\n * @param {mat2d} out mat2d receiving operation result\n * @param {vec2} v Scaling vector\n * @returns {mat2d} out\n */\nmat2d.fromScaling = function(out, v) {\n    out[0] = v[0];\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = v[1];\n    out[4] = 0;\n    out[5] = 0;\n    return out;\n}\n\n/**\n * Creates a matrix from a vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat2d.identity(dest);\n *     mat2d.translate(dest, dest, vec);\n *\n * @param {mat2d} out mat2d receiving operation result\n * @param {vec2} v Translation vector\n * @returns {mat2d} out\n */\nmat2d.fromTranslation = function(out, v) {\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 1;\n    out[4] = v[0];\n    out[5] = v[1];\n    return out;\n}\n\n/**\n * Returns a string representation of a mat2d\n *\n * @param {mat2d} a matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\nmat2d.str = function (a) {\n    return 'mat2d(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + \n                    a[3] + ', ' + a[4] + ', ' + a[5] + ')';\n};\n\n/**\n * Returns Frobenius norm of a mat2d\n *\n * @param {mat2d} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\nmat2d.frob = function (a) { \n    return(Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + 1))\n}; \n\n/**\n * Adds two mat2d's\n *\n * @param {mat2d} out the receiving matrix\n * @param {mat2d} a the first operand\n * @param {mat2d} b the second operand\n * @returns {mat2d} out\n */\nmat2d.add = function(out, a, b) {\n    out[0] = a[0] + b[0];\n    out[1] = a[1] + b[1];\n    out[2] = a[2] + b[2];\n    out[3] = a[3] + b[3];\n    out[4] = a[4] + b[4];\n    out[5] = a[5] + b[5];\n    return out;\n};\n\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat2d} out the receiving matrix\n * @param {mat2d} a the first operand\n * @param {mat2d} b the second operand\n * @returns {mat2d} out\n */\nmat2d.subtract = function(out, a, b) {\n    out[0] = a[0] - b[0];\n    out[1] = a[1] - b[1];\n    out[2] = a[2] - b[2];\n    out[3] = a[3] - b[3];\n    out[4] = a[4] - b[4];\n    out[5] = a[5] - b[5];\n    return out;\n};\n\n/**\n * Alias for {@link mat2d.subtract}\n * @function\n */\nmat2d.sub = mat2d.subtract;\n\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat2d} out the receiving matrix\n * @param {mat2d} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat2d} out\n */\nmat2d.multiplyScalar = function(out, a, b) {\n    out[0] = a[0] * b;\n    out[1] = a[1] * b;\n    out[2] = a[2] * b;\n    out[3] = a[3] * b;\n    out[4] = a[4] * b;\n    out[5] = a[5] * b;\n    return out;\n};\n\n/**\n * Adds two mat2d's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat2d} out the receiving vector\n * @param {mat2d} a the first operand\n * @param {mat2d} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat2d} out\n */\nmat2d.multiplyScalarAndAdd = function(out, a, b, scale) {\n    out[0] = a[0] + (b[0] * scale);\n    out[1] = a[1] + (b[1] * scale);\n    out[2] = a[2] + (b[2] * scale);\n    out[3] = a[3] + (b[3] * scale);\n    out[4] = a[4] + (b[4] * scale);\n    out[5] = a[5] + (b[5] * scale);\n    return out;\n};\n\n/**\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {mat2d} a The first matrix.\n * @param {mat2d} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nmat2d.exactEquals = function (a, b) {\n    return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5];\n};\n\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {mat2d} a The first matrix.\n * @param {mat2d} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nmat2d.equals = function (a, b) {\n    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5];\n    var b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3], b4 = b[4], b5 = b[5];\n    return (Math.abs(a0 - b0) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n            Math.abs(a1 - b1) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\n            Math.abs(a2 - b2) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&\n            Math.abs(a3 - b3) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a3), Math.abs(b3)) &&\n            Math.abs(a4 - b4) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a4), Math.abs(b4)) &&\n            Math.abs(a5 - b5) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a5), Math.abs(b5)));\n};\n\nmodule.exports = mat2d;\n\n},{\"./common.js\":2}],5:[function(_dereq_,module,exports){\n/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE. */\n\nvar glMatrix = _dereq_(\"./common.js\");\n\n/**\n * @class 3x3 Matrix\n * @name mat3\n */\nvar mat3 = {};\n\n/**\n * Creates a new identity mat3\n *\n * @returns {mat3} a new 3x3 matrix\n */\nmat3.create = function() {\n    var out = new glMatrix.ARRAY_TYPE(9);\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 1;\n    out[5] = 0;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 1;\n    return out;\n};\n\n/**\n * Copies the upper-left 3x3 values into the given mat3.\n *\n * @param {mat3} out the receiving 3x3 matrix\n * @param {mat4} a   the source 4x4 matrix\n * @returns {mat3} out\n */\nmat3.fromMat4 = function(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[4];\n    out[4] = a[5];\n    out[5] = a[6];\n    out[6] = a[8];\n    out[7] = a[9];\n    out[8] = a[10];\n    return out;\n};\n\n/**\n * Creates a new mat3 initialized with values from an existing matrix\n *\n * @param {mat3} a matrix to clone\n * @returns {mat3} a new 3x3 matrix\n */\nmat3.clone = function(a) {\n    var out = new glMatrix.ARRAY_TYPE(9);\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[8] = a[8];\n    return out;\n};\n\n/**\n * Copy the values from one mat3 to another\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the source matrix\n * @returns {mat3} out\n */\nmat3.copy = function(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[8] = a[8];\n    return out;\n};\n\n/**\n * Create a new mat3 with the given values\n *\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\n * @returns {mat3} A new mat3\n */\nmat3.fromValues = function(m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n    var out = new glMatrix.ARRAY_TYPE(9);\n    out[0] = m00;\n    out[1] = m01;\n    out[2] = m02;\n    out[3] = m10;\n    out[4] = m11;\n    out[5] = m12;\n    out[6] = m20;\n    out[7] = m21;\n    out[8] = m22;\n    return out;\n};\n\n/**\n * Set the components of a mat3 to the given values\n *\n * @param {mat3} out the receiving matrix\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\n * @returns {mat3} out\n */\nmat3.set = function(out, m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n    out[0] = m00;\n    out[1] = m01;\n    out[2] = m02;\n    out[3] = m10;\n    out[4] = m11;\n    out[5] = m12;\n    out[6] = m20;\n    out[7] = m21;\n    out[8] = m22;\n    return out;\n};\n\n/**\n * Set a mat3 to the identity matrix\n *\n * @param {mat3} out the receiving matrix\n * @returns {mat3} out\n */\nmat3.identity = function(out) {\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 1;\n    out[5] = 0;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 1;\n    return out;\n};\n\n/**\n * Transpose the values of a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the source matrix\n * @returns {mat3} out\n */\nmat3.transpose = function(out, a) {\n    // If we are transposing ourselves we can skip a few steps but have to cache some values\n    if (out === a) {\n        var a01 = a[1], a02 = a[2], a12 = a[5];\n        out[1] = a[3];\n        out[2] = a[6];\n        out[3] = a01;\n        out[5] = a[7];\n        out[6] = a02;\n        out[7] = a12;\n    } else {\n        out[0] = a[0];\n        out[1] = a[3];\n        out[2] = a[6];\n        out[3] = a[1];\n        out[4] = a[4];\n        out[5] = a[7];\n        out[6] = a[2];\n        out[7] = a[5];\n        out[8] = a[8];\n    }\n    \n    return out;\n};\n\n/**\n * Inverts a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the source matrix\n * @returns {mat3} out\n */\nmat3.invert = function(out, a) {\n    var a00 = a[0], a01 = a[1], a02 = a[2],\n        a10 = a[3], a11 = a[4], a12 = a[5],\n        a20 = a[6], a21 = a[7], a22 = a[8],\n\n        b01 = a22 * a11 - a12 * a21,\n        b11 = -a22 * a10 + a12 * a20,\n        b21 = a21 * a10 - a11 * a20,\n\n        // Calculate the determinant\n        det = a00 * b01 + a01 * b11 + a02 * b21;\n\n    if (!det) { \n        return null; \n    }\n    det = 1.0 / det;\n\n    out[0] = b01 * det;\n    out[1] = (-a22 * a01 + a02 * a21) * det;\n    out[2] = (a12 * a01 - a02 * a11) * det;\n    out[3] = b11 * det;\n    out[4] = (a22 * a00 - a02 * a20) * det;\n    out[5] = (-a12 * a00 + a02 * a10) * det;\n    out[6] = b21 * det;\n    out[7] = (-a21 * a00 + a01 * a20) * det;\n    out[8] = (a11 * a00 - a01 * a10) * det;\n    return out;\n};\n\n/**\n * Calculates the adjugate of a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the source matrix\n * @returns {mat3} out\n */\nmat3.adjoint = function(out, a) {\n    var a00 = a[0], a01 = a[1], a02 = a[2],\n        a10 = a[3], a11 = a[4], a12 = a[5],\n        a20 = a[6], a21 = a[7], a22 = a[8];\n\n    out[0] = (a11 * a22 - a12 * a21);\n    out[1] = (a02 * a21 - a01 * a22);\n    out[2] = (a01 * a12 - a02 * a11);\n    out[3] = (a12 * a20 - a10 * a22);\n    out[4] = (a00 * a22 - a02 * a20);\n    out[5] = (a02 * a10 - a00 * a12);\n    out[6] = (a10 * a21 - a11 * a20);\n    out[7] = (a01 * a20 - a00 * a21);\n    out[8] = (a00 * a11 - a01 * a10);\n    return out;\n};\n\n/**\n * Calculates the determinant of a mat3\n *\n * @param {mat3} a the source matrix\n * @returns {Number} determinant of a\n */\nmat3.determinant = function (a) {\n    var a00 = a[0], a01 = a[1], a02 = a[2],\n        a10 = a[3], a11 = a[4], a12 = a[5],\n        a20 = a[6], a21 = a[7], a22 = a[8];\n\n    return a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20);\n};\n\n/**\n * Multiplies two mat3's\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the first operand\n * @param {mat3} b the second operand\n * @returns {mat3} out\n */\nmat3.multiply = function (out, a, b) {\n    var a00 = a[0], a01 = a[1], a02 = a[2],\n        a10 = a[3], a11 = a[4], a12 = a[5],\n        a20 = a[6], a21 = a[7], a22 = a[8],\n\n        b00 = b[0], b01 = b[1], b02 = b[2],\n        b10 = b[3], b11 = b[4], b12 = b[5],\n        b20 = b[6], b21 = b[7], b22 = b[8];\n\n    out[0] = b00 * a00 + b01 * a10 + b02 * a20;\n    out[1] = b00 * a01 + b01 * a11 + b02 * a21;\n    out[2] = b00 * a02 + b01 * a12 + b02 * a22;\n\n    out[3] = b10 * a00 + b11 * a10 + b12 * a20;\n    out[4] = b10 * a01 + b11 * a11 + b12 * a21;\n    out[5] = b10 * a02 + b11 * a12 + b12 * a22;\n\n    out[6] = b20 * a00 + b21 * a10 + b22 * a20;\n    out[7] = b20 * a01 + b21 * a11 + b22 * a21;\n    out[8] = b20 * a02 + b21 * a12 + b22 * a22;\n    return out;\n};\n\n/**\n * Alias for {@link mat3.multiply}\n * @function\n */\nmat3.mul = mat3.multiply;\n\n/**\n * Translate a mat3 by the given vector\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the matrix to translate\n * @param {vec2} v vector to translate by\n * @returns {mat3} out\n */\nmat3.translate = function(out, a, v) {\n    var a00 = a[0], a01 = a[1], a02 = a[2],\n        a10 = a[3], a11 = a[4], a12 = a[5],\n        a20 = a[6], a21 = a[7], a22 = a[8],\n        x = v[0], y = v[1];\n\n    out[0] = a00;\n    out[1] = a01;\n    out[2] = a02;\n\n    out[3] = a10;\n    out[4] = a11;\n    out[5] = a12;\n\n    out[6] = x * a00 + y * a10 + a20;\n    out[7] = x * a01 + y * a11 + a21;\n    out[8] = x * a02 + y * a12 + a22;\n    return out;\n};\n\n/**\n * Rotates a mat3 by the given angle\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat3} out\n */\nmat3.rotate = function (out, a, rad) {\n    var a00 = a[0], a01 = a[1], a02 = a[2],\n        a10 = a[3], a11 = a[4], a12 = a[5],\n        a20 = a[6], a21 = a[7], a22 = a[8],\n\n        s = Math.sin(rad),\n        c = Math.cos(rad);\n\n    out[0] = c * a00 + s * a10;\n    out[1] = c * a01 + s * a11;\n    out[2] = c * a02 + s * a12;\n\n    out[3] = c * a10 - s * a00;\n    out[4] = c * a11 - s * a01;\n    out[5] = c * a12 - s * a02;\n\n    out[6] = a20;\n    out[7] = a21;\n    out[8] = a22;\n    return out;\n};\n\n/**\n * Scales the mat3 by the dimensions in the given vec2\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the matrix to rotate\n * @param {vec2} v the vec2 to scale the matrix by\n * @returns {mat3} out\n **/\nmat3.scale = function(out, a, v) {\n    var x = v[0], y = v[1];\n\n    out[0] = x * a[0];\n    out[1] = x * a[1];\n    out[2] = x * a[2];\n\n    out[3] = y * a[3];\n    out[4] = y * a[4];\n    out[5] = y * a[5];\n\n    out[6] = a[6];\n    out[7] = a[7];\n    out[8] = a[8];\n    return out;\n};\n\n/**\n * Creates a matrix from a vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat3.identity(dest);\n *     mat3.translate(dest, dest, vec);\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {vec2} v Translation vector\n * @returns {mat3} out\n */\nmat3.fromTranslation = function(out, v) {\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 1;\n    out[5] = 0;\n    out[6] = v[0];\n    out[7] = v[1];\n    out[8] = 1;\n    return out;\n}\n\n/**\n * Creates a matrix from a given angle\n * This is equivalent to (but much faster than):\n *\n *     mat3.identity(dest);\n *     mat3.rotate(dest, dest, rad);\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat3} out\n */\nmat3.fromRotation = function(out, rad) {\n    var s = Math.sin(rad), c = Math.cos(rad);\n\n    out[0] = c;\n    out[1] = s;\n    out[2] = 0;\n\n    out[3] = -s;\n    out[4] = c;\n    out[5] = 0;\n\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 1;\n    return out;\n}\n\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat3.identity(dest);\n *     mat3.scale(dest, dest, vec);\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {vec2} v Scaling vector\n * @returns {mat3} out\n */\nmat3.fromScaling = function(out, v) {\n    out[0] = v[0];\n    out[1] = 0;\n    out[2] = 0;\n\n    out[3] = 0;\n    out[4] = v[1];\n    out[5] = 0;\n\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 1;\n    return out;\n}\n\n/**\n * Copies the values from a mat2d into a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {mat2d} a the matrix to copy\n * @returns {mat3} out\n **/\nmat3.fromMat2d = function(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = 0;\n\n    out[3] = a[2];\n    out[4] = a[3];\n    out[5] = 0;\n\n    out[6] = a[4];\n    out[7] = a[5];\n    out[8] = 1;\n    return out;\n};\n\n/**\n* Calculates a 3x3 matrix from the given quaternion\n*\n* @param {mat3} out mat3 receiving operation result\n* @param {quat} q Quaternion to create matrix from\n*\n* @returns {mat3} out\n*/\nmat3.fromQuat = function (out, q) {\n    var x = q[0], y = q[1], z = q[2], w = q[3],\n        x2 = x + x,\n        y2 = y + y,\n        z2 = z + z,\n\n        xx = x * x2,\n        yx = y * x2,\n        yy = y * y2,\n        zx = z * x2,\n        zy = z * y2,\n        zz = z * z2,\n        wx = w * x2,\n        wy = w * y2,\n        wz = w * z2;\n\n    out[0] = 1 - yy - zz;\n    out[3] = yx - wz;\n    out[6] = zx + wy;\n\n    out[1] = yx + wz;\n    out[4] = 1 - xx - zz;\n    out[7] = zy - wx;\n\n    out[2] = zx - wy;\n    out[5] = zy + wx;\n    out[8] = 1 - xx - yy;\n\n    return out;\n};\n\n/**\n* Calculates a 3x3 normal matrix (transpose inverse) from the 4x4 matrix\n*\n* @param {mat3} out mat3 receiving operation result\n* @param {mat4} a Mat4 to derive the normal matrix from\n*\n* @returns {mat3} out\n*/\nmat3.normalFromMat4 = function (out, a) {\n    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3],\n        a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7],\n        a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11],\n        a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15],\n\n        b00 = a00 * a11 - a01 * a10,\n        b01 = a00 * a12 - a02 * a10,\n        b02 = a00 * a13 - a03 * a10,\n        b03 = a01 * a12 - a02 * a11,\n        b04 = a01 * a13 - a03 * a11,\n        b05 = a02 * a13 - a03 * a12,\n        b06 = a20 * a31 - a21 * a30,\n        b07 = a20 * a32 - a22 * a30,\n        b08 = a20 * a33 - a23 * a30,\n        b09 = a21 * a32 - a22 * a31,\n        b10 = a21 * a33 - a23 * a31,\n        b11 = a22 * a33 - a23 * a32,\n\n        // Calculate the determinant\n        det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n    if (!det) { \n        return null; \n    }\n    det = 1.0 / det;\n\n    out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n    out[1] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n    out[2] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n\n    out[3] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n    out[4] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n    out[5] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n\n    out[6] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n    out[7] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n    out[8] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n\n    return out;\n};\n\n/**\n * Returns a string representation of a mat3\n *\n * @param {mat3} mat matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\nmat3.str = function (a) {\n    return 'mat3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + \n                    a[3] + ', ' + a[4] + ', ' + a[5] + ', ' + \n                    a[6] + ', ' + a[7] + ', ' + a[8] + ')';\n};\n\n/**\n * Returns Frobenius norm of a mat3\n *\n * @param {mat3} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\nmat3.frob = function (a) {\n    return(Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + Math.pow(a[6], 2) + Math.pow(a[7], 2) + Math.pow(a[8], 2)))\n};\n\n/**\n * Adds two mat3's\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the first operand\n * @param {mat3} b the second operand\n * @returns {mat3} out\n */\nmat3.add = function(out, a, b) {\n    out[0] = a[0] + b[0];\n    out[1] = a[1] + b[1];\n    out[2] = a[2] + b[2];\n    out[3] = a[3] + b[3];\n    out[4] = a[4] + b[4];\n    out[5] = a[5] + b[5];\n    out[6] = a[6] + b[6];\n    out[7] = a[7] + b[7];\n    out[8] = a[8] + b[8];\n    return out;\n};\n\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the first operand\n * @param {mat3} b the second operand\n * @returns {mat3} out\n */\nmat3.subtract = function(out, a, b) {\n    out[0] = a[0] - b[0];\n    out[1] = a[1] - b[1];\n    out[2] = a[2] - b[2];\n    out[3] = a[3] - b[3];\n    out[4] = a[4] - b[4];\n    out[5] = a[5] - b[5];\n    out[6] = a[6] - b[6];\n    out[7] = a[7] - b[7];\n    out[8] = a[8] - b[8];\n    return out;\n};\n\n/**\n * Alias for {@link mat3.subtract}\n * @function\n */\nmat3.sub = mat3.subtract;\n\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat3} out\n */\nmat3.multiplyScalar = function(out, a, b) {\n    out[0] = a[0] * b;\n    out[1] = a[1] * b;\n    out[2] = a[2] * b;\n    out[3] = a[3] * b;\n    out[4] = a[4] * b;\n    out[5] = a[5] * b;\n    out[6] = a[6] * b;\n    out[7] = a[7] * b;\n    out[8] = a[8] * b;\n    return out;\n};\n\n/**\n * Adds two mat3's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat3} out the receiving vector\n * @param {mat3} a the first operand\n * @param {mat3} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat3} out\n */\nmat3.multiplyScalarAndAdd = function(out, a, b, scale) {\n    out[0] = a[0] + (b[0] * scale);\n    out[1] = a[1] + (b[1] * scale);\n    out[2] = a[2] + (b[2] * scale);\n    out[3] = a[3] + (b[3] * scale);\n    out[4] = a[4] + (b[4] * scale);\n    out[5] = a[5] + (b[5] * scale);\n    out[6] = a[6] + (b[6] * scale);\n    out[7] = a[7] + (b[7] * scale);\n    out[8] = a[8] + (b[8] * scale);\n    return out;\n};\n\n/*\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {mat3} a The first matrix.\n * @param {mat3} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nmat3.exactEquals = function (a, b) {\n    return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && \n           a[3] === b[3] && a[4] === b[4] && a[5] === b[5] &&\n           a[6] === b[6] && a[7] === b[7] && a[8] === b[8];\n};\n\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {mat3} a The first matrix.\n * @param {mat3} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nmat3.equals = function (a, b) {\n    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5], a6 = a[6], a7 = a[7], a8 = a[8];\n    var b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3], b4 = b[4], b5 = b[5], b6 = a[6], b7 = b[7], b8 = b[8];\n    return (Math.abs(a0 - b0) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n            Math.abs(a1 - b1) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\n            Math.abs(a2 - b2) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&\n            Math.abs(a3 - b3) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a3), Math.abs(b3)) &&\n            Math.abs(a4 - b4) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a4), Math.abs(b4)) &&\n            Math.abs(a5 - b5) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a5), Math.abs(b5)) &&\n            Math.abs(a6 - b6) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a6), Math.abs(b6)) &&\n            Math.abs(a7 - b7) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a7), Math.abs(b7)) &&\n            Math.abs(a8 - b8) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a8), Math.abs(b8)));\n};\n\n\nmodule.exports = mat3;\n\n},{\"./common.js\":2}],6:[function(_dereq_,module,exports){\n/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE. */\n\nvar glMatrix = _dereq_(\"./common.js\");\n\n/**\n * @class 4x4 Matrix\n * @name mat4\n */\nvar mat4 = {\n  scalar: {},\n  SIMD: {},\n};\n\n/**\n * Creates a new identity mat4\n *\n * @returns {mat4} a new 4x4 matrix\n */\nmat4.create = function() {\n    var out = new glMatrix.ARRAY_TYPE(16);\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = 1;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[10] = 1;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n    out[15] = 1;\n    return out;\n};\n\n/**\n * Creates a new mat4 initialized with values from an existing matrix\n *\n * @param {mat4} a matrix to clone\n * @returns {mat4} a new 4x4 matrix\n */\nmat4.clone = function(a) {\n    var out = new glMatrix.ARRAY_TYPE(16);\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[8] = a[8];\n    out[9] = a[9];\n    out[10] = a[10];\n    out[11] = a[11];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n    return out;\n};\n\n/**\n * Copy the values from one mat4 to another\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nmat4.copy = function(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[8] = a[8];\n    out[9] = a[9];\n    out[10] = a[10];\n    out[11] = a[11];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n    return out;\n};\n\n/**\n * Create a new mat4 with the given values\n *\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\n * @returns {mat4} A new mat4\n */\nmat4.fromValues = function(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n    var out = new glMatrix.ARRAY_TYPE(16);\n    out[0] = m00;\n    out[1] = m01;\n    out[2] = m02;\n    out[3] = m03;\n    out[4] = m10;\n    out[5] = m11;\n    out[6] = m12;\n    out[7] = m13;\n    out[8] = m20;\n    out[9] = m21;\n    out[10] = m22;\n    out[11] = m23;\n    out[12] = m30;\n    out[13] = m31;\n    out[14] = m32;\n    out[15] = m33;\n    return out;\n};\n\n/**\n * Set the components of a mat4 to the given values\n *\n * @param {mat4} out the receiving matrix\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\n * @returns {mat4} out\n */\nmat4.set = function(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n    out[0] = m00;\n    out[1] = m01;\n    out[2] = m02;\n    out[3] = m03;\n    out[4] = m10;\n    out[5] = m11;\n    out[6] = m12;\n    out[7] = m13;\n    out[8] = m20;\n    out[9] = m21;\n    out[10] = m22;\n    out[11] = m23;\n    out[12] = m30;\n    out[13] = m31;\n    out[14] = m32;\n    out[15] = m33;\n    return out;\n};\n\n\n/**\n * Set a mat4 to the identity matrix\n *\n * @param {mat4} out the receiving matrix\n * @returns {mat4} out\n */\nmat4.identity = function(out) {\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = 1;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[10] = 1;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n    out[15] = 1;\n    return out;\n};\n\n/**\n * Transpose the values of a mat4 not using SIMD\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nmat4.scalar.transpose = function(out, a) {\n    // If we are transposing ourselves we can skip a few steps but have to cache some values\n    if (out === a) {\n        var a01 = a[1], a02 = a[2], a03 = a[3],\n            a12 = a[6], a13 = a[7],\n            a23 = a[11];\n\n        out[1] = a[4];\n        out[2] = a[8];\n        out[3] = a[12];\n        out[4] = a01;\n        out[6] = a[9];\n        out[7] = a[13];\n        out[8] = a02;\n        out[9] = a12;\n        out[11] = a[14];\n        out[12] = a03;\n        out[13] = a13;\n        out[14] = a23;\n    } else {\n        out[0] = a[0];\n        out[1] = a[4];\n        out[2] = a[8];\n        out[3] = a[12];\n        out[4] = a[1];\n        out[5] = a[5];\n        out[6] = a[9];\n        out[7] = a[13];\n        out[8] = a[2];\n        out[9] = a[6];\n        out[10] = a[10];\n        out[11] = a[14];\n        out[12] = a[3];\n        out[13] = a[7];\n        out[14] = a[11];\n        out[15] = a[15];\n    }\n\n    return out;\n};\n\n/**\n * Transpose the values of a mat4 using SIMD\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nmat4.SIMD.transpose = function(out, a) {\n    var a0, a1, a2, a3,\n        tmp01, tmp23,\n        out0, out1, out2, out3;\n\n    a0 = SIMD.Float32x4.load(a, 0);\n    a1 = SIMD.Float32x4.load(a, 4);\n    a2 = SIMD.Float32x4.load(a, 8);\n    a3 = SIMD.Float32x4.load(a, 12);\n\n    tmp01 = SIMD.Float32x4.shuffle(a0, a1, 0, 1, 4, 5);\n    tmp23 = SIMD.Float32x4.shuffle(a2, a3, 0, 1, 4, 5);\n    out0  = SIMD.Float32x4.shuffle(tmp01, tmp23, 0, 2, 4, 6);\n    out1  = SIMD.Float32x4.shuffle(tmp01, tmp23, 1, 3, 5, 7);\n    SIMD.Float32x4.store(out, 0,  out0);\n    SIMD.Float32x4.store(out, 4,  out1);\n\n    tmp01 = SIMD.Float32x4.shuffle(a0, a1, 2, 3, 6, 7);\n    tmp23 = SIMD.Float32x4.shuffle(a2, a3, 2, 3, 6, 7);\n    out2  = SIMD.Float32x4.shuffle(tmp01, tmp23, 0, 2, 4, 6);\n    out3  = SIMD.Float32x4.shuffle(tmp01, tmp23, 1, 3, 5, 7);\n    SIMD.Float32x4.store(out, 8,  out2);\n    SIMD.Float32x4.store(out, 12, out3);\n\n    return out;\n};\n\n/**\n * Transpse a mat4 using SIMD if available and enabled\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nmat4.transpose = glMatrix.USE_SIMD ? mat4.SIMD.transpose : mat4.scalar.transpose;\n\n/**\n * Inverts a mat4 not using SIMD\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nmat4.scalar.invert = function(out, a) {\n    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3],\n        a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7],\n        a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11],\n        a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15],\n\n        b00 = a00 * a11 - a01 * a10,\n        b01 = a00 * a12 - a02 * a10,\n        b02 = a00 * a13 - a03 * a10,\n        b03 = a01 * a12 - a02 * a11,\n        b04 = a01 * a13 - a03 * a11,\n        b05 = a02 * a13 - a03 * a12,\n        b06 = a20 * a31 - a21 * a30,\n        b07 = a20 * a32 - a22 * a30,\n        b08 = a20 * a33 - a23 * a30,\n        b09 = a21 * a32 - a22 * a31,\n        b10 = a21 * a33 - a23 * a31,\n        b11 = a22 * a33 - a23 * a32,\n\n        // Calculate the determinant\n        det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n    if (!det) {\n        return null;\n    }\n    det = 1.0 / det;\n\n    out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n    out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n    out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n    out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\n    out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n    out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n    out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n    out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\n    out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n    out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n    out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n    out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\n    out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\n    out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\n    out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\n    out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\n\n    return out;\n};\n\n/**\n * Inverts a mat4 using SIMD\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nmat4.SIMD.invert = function(out, a) {\n  var row0, row1, row2, row3,\n      tmp1,\n      minor0, minor1, minor2, minor3,\n      det,\n      a0 = SIMD.Float32x4.load(a, 0),\n      a1 = SIMD.Float32x4.load(a, 4),\n      a2 = SIMD.Float32x4.load(a, 8),\n      a3 = SIMD.Float32x4.load(a, 12);\n\n  // Compute matrix adjugate\n  tmp1 = SIMD.Float32x4.shuffle(a0, a1, 0, 1, 4, 5);\n  row1 = SIMD.Float32x4.shuffle(a2, a3, 0, 1, 4, 5);\n  row0 = SIMD.Float32x4.shuffle(tmp1, row1, 0, 2, 4, 6);\n  row1 = SIMD.Float32x4.shuffle(row1, tmp1, 1, 3, 5, 7);\n  tmp1 = SIMD.Float32x4.shuffle(a0, a1, 2, 3, 6, 7);\n  row3 = SIMD.Float32x4.shuffle(a2, a3, 2, 3, 6, 7);\n  row2 = SIMD.Float32x4.shuffle(tmp1, row3, 0, 2, 4, 6);\n  row3 = SIMD.Float32x4.shuffle(row3, tmp1, 1, 3, 5, 7);\n\n  tmp1   = SIMD.Float32x4.mul(row2, row3);\n  tmp1   = SIMD.Float32x4.swizzle(tmp1, 1, 0, 3, 2);\n  minor0 = SIMD.Float32x4.mul(row1, tmp1);\n  minor1 = SIMD.Float32x4.mul(row0, tmp1);\n  tmp1   = SIMD.Float32x4.swizzle(tmp1, 2, 3, 0, 1);\n  minor0 = SIMD.Float32x4.sub(SIMD.Float32x4.mul(row1, tmp1), minor0);\n  minor1 = SIMD.Float32x4.sub(SIMD.Float32x4.mul(row0, tmp1), minor1);\n  minor1 = SIMD.Float32x4.swizzle(minor1, 2, 3, 0, 1);\n\n  tmp1   = SIMD.Float32x4.mul(row1, row2);\n  tmp1   = SIMD.Float32x4.swizzle(tmp1, 1, 0, 3, 2);\n  minor0 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row3, tmp1), minor0);\n  minor3 = SIMD.Float32x4.mul(row0, tmp1);\n  tmp1   = SIMD.Float32x4.swizzle(tmp1, 2, 3, 0, 1);\n  minor0 = SIMD.Float32x4.sub(minor0, SIMD.Float32x4.mul(row3, tmp1));\n  minor3 = SIMD.Float32x4.sub(SIMD.Float32x4.mul(row0, tmp1), minor3);\n  minor3 = SIMD.Float32x4.swizzle(minor3, 2, 3, 0, 1);\n\n  tmp1   = SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(row1, 2, 3, 0, 1), row3);\n  tmp1   = SIMD.Float32x4.swizzle(tmp1, 1, 0, 3, 2);\n  row2   = SIMD.Float32x4.swizzle(row2, 2, 3, 0, 1);\n  minor0 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row2, tmp1), minor0);\n  minor2 = SIMD.Float32x4.mul(row0, tmp1);\n  tmp1   = SIMD.Float32x4.swizzle(tmp1, 2, 3, 0, 1);\n  minor0 = SIMD.Float32x4.sub(minor0, SIMD.Float32x4.mul(row2, tmp1));\n  minor2 = SIMD.Float32x4.sub(SIMD.Float32x4.mul(row0, tmp1), minor2);\n  minor2 = SIMD.Float32x4.swizzle(minor2, 2, 3, 0, 1);\n\n  tmp1   = SIMD.Float32x4.mul(row0, row1);\n  tmp1   = SIMD.Float32x4.swizzle(tmp1, 1, 0, 3, 2);\n  minor2 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row3, tmp1), minor2);\n  minor3 = SIMD.Float32x4.sub(SIMD.Float32x4.mul(row2, tmp1), minor3);\n  tmp1   = SIMD.Float32x4.swizzle(tmp1, 2, 3, 0, 1);\n  minor2 = SIMD.Float32x4.sub(SIMD.Float32x4.mul(row3, tmp1), minor2);\n  minor3 = SIMD.Float32x4.sub(minor3, SIMD.Float32x4.mul(row2, tmp1));\n\n  tmp1   = SIMD.Float32x4.mul(row0, row3);\n  tmp1   = SIMD.Float32x4.swizzle(tmp1, 1, 0, 3, 2);\n  minor1 = SIMD.Float32x4.sub(minor1, SIMD.Float32x4.mul(row2, tmp1));\n  minor2 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row1, tmp1), minor2);\n  tmp1   = SIMD.Float32x4.swizzle(tmp1, 2, 3, 0, 1);\n  minor1 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row2, tmp1), minor1);\n  minor2 = SIMD.Float32x4.sub(minor2, SIMD.Float32x4.mul(row1, tmp1));\n\n  tmp1   = SIMD.Float32x4.mul(row0, row2);\n  tmp1   = SIMD.Float32x4.swizzle(tmp1, 1, 0, 3, 2);\n  minor1 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row3, tmp1), minor1);\n  minor3 = SIMD.Float32x4.sub(minor3, SIMD.Float32x4.mul(row1, tmp1));\n  tmp1   = SIMD.Float32x4.swizzle(tmp1, 2, 3, 0, 1);\n  minor1 = SIMD.Float32x4.sub(minor1, SIMD.Float32x4.mul(row3, tmp1));\n  minor3 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row1, tmp1), minor3);\n\n  // Compute matrix determinant\n  det   = SIMD.Float32x4.mul(row0, minor0);\n  det   = SIMD.Float32x4.add(SIMD.Float32x4.swizzle(det, 2, 3, 0, 1), det);\n  det   = SIMD.Float32x4.add(SIMD.Float32x4.swizzle(det, 1, 0, 3, 2), det);\n  tmp1  = SIMD.Float32x4.reciprocalApproximation(det);\n  det   = SIMD.Float32x4.sub(\n               SIMD.Float32x4.add(tmp1, tmp1),\n               SIMD.Float32x4.mul(det, SIMD.Float32x4.mul(tmp1, tmp1)));\n  det   = SIMD.Float32x4.swizzle(det, 0, 0, 0, 0);\n  if (!det) {\n      return null;\n  }\n\n  // Compute matrix inverse\n  SIMD.Float32x4.store(out, 0,  SIMD.Float32x4.mul(det, minor0));\n  SIMD.Float32x4.store(out, 4,  SIMD.Float32x4.mul(det, minor1));\n  SIMD.Float32x4.store(out, 8,  SIMD.Float32x4.mul(det, minor2));\n  SIMD.Float32x4.store(out, 12, SIMD.Float32x4.mul(det, minor3));\n  return out;\n}\n\n/**\n * Inverts a mat4 using SIMD if available and enabled\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nmat4.invert = glMatrix.USE_SIMD ? mat4.SIMD.invert : mat4.scalar.invert;\n\n/**\n * Calculates the adjugate of a mat4 not using SIMD\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nmat4.scalar.adjoint = function(out, a) {\n    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3],\n        a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7],\n        a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11],\n        a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];\n\n    out[0]  =  (a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22));\n    out[1]  = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));\n    out[2]  =  (a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12));\n    out[3]  = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));\n    out[4]  = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));\n    out[5]  =  (a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22));\n    out[6]  = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));\n    out[7]  =  (a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12));\n    out[8]  =  (a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21));\n    out[9]  = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));\n    out[10] =  (a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11));\n    out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));\n    out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));\n    out[13] =  (a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21));\n    out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));\n    out[15] =  (a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11));\n    return out;\n};\n\n/**\n * Calculates the adjugate of a mat4 using SIMD\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nmat4.SIMD.adjoint = function(out, a) {\n  var a0, a1, a2, a3;\n  var row0, row1, row2, row3;\n  var tmp1;\n  var minor0, minor1, minor2, minor3;\n\n  var a0 = SIMD.Float32x4.load(a, 0);\n  var a1 = SIMD.Float32x4.load(a, 4);\n  var a2 = SIMD.Float32x4.load(a, 8);\n  var a3 = SIMD.Float32x4.load(a, 12);\n\n  // Transpose the source matrix.  Sort of.  Not a true transpose operation\n  tmp1 = SIMD.Float32x4.shuffle(a0, a1, 0, 1, 4, 5);\n  row1 = SIMD.Float32x4.shuffle(a2, a3, 0, 1, 4, 5);\n  row0 = SIMD.Float32x4.shuffle(tmp1, row1, 0, 2, 4, 6);\n  row1 = SIMD.Float32x4.shuffle(row1, tmp1, 1, 3, 5, 7);\n\n  tmp1 = SIMD.Float32x4.shuffle(a0, a1, 2, 3, 6, 7);\n  row3 = SIMD.Float32x4.shuffle(a2, a3, 2, 3, 6, 7);\n  row2 = SIMD.Float32x4.shuffle(tmp1, row3, 0, 2, 4, 6);\n  row3 = SIMD.Float32x4.shuffle(row3, tmp1, 1, 3, 5, 7);\n\n  tmp1   = SIMD.Float32x4.mul(row2, row3);\n  tmp1   = SIMD.Float32x4.swizzle(tmp1, 1, 0, 3, 2);\n  minor0 = SIMD.Float32x4.mul(row1, tmp1);\n  minor1 = SIMD.Float32x4.mul(row0, tmp1);\n  tmp1   = SIMD.Float32x4.swizzle(tmp1, 2, 3, 0, 1);\n  minor0 = SIMD.Float32x4.sub(SIMD.Float32x4.mul(row1, tmp1), minor0);\n  minor1 = SIMD.Float32x4.sub(SIMD.Float32x4.mul(row0, tmp1), minor1);\n  minor1 = SIMD.Float32x4.swizzle(minor1, 2, 3, 0, 1);\n\n  tmp1   = SIMD.Float32x4.mul(row1, row2);\n  tmp1   = SIMD.Float32x4.swizzle(tmp1, 1, 0, 3, 2);\n  minor0 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row3, tmp1), minor0);\n  minor3 = SIMD.Float32x4.mul(row0, tmp1);\n  tmp1   = SIMD.Float32x4.swizzle(tmp1, 2, 3, 0, 1);\n  minor0 = SIMD.Float32x4.sub(minor0, SIMD.Float32x4.mul(row3, tmp1));\n  minor3 = SIMD.Float32x4.sub(SIMD.Float32x4.mul(row0, tmp1), minor3);\n  minor3 = SIMD.Float32x4.swizzle(minor3, 2, 3, 0, 1);\n\n  tmp1   = SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(row1, 2, 3, 0, 1), row3);\n  tmp1   = SIMD.Float32x4.swizzle(tmp1, 1, 0, 3, 2);\n  row2   = SIMD.Float32x4.swizzle(row2, 2, 3, 0, 1);\n  minor0 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row2, tmp1), minor0);\n  minor2 = SIMD.Float32x4.mul(row0, tmp1);\n  tmp1   = SIMD.Float32x4.swizzle(tmp1, 2, 3, 0, 1);\n  minor0 = SIMD.Float32x4.sub(minor0, SIMD.Float32x4.mul(row2, tmp1));\n  minor2 = SIMD.Float32x4.sub(SIMD.Float32x4.mul(row0, tmp1), minor2);\n  minor2 = SIMD.Float32x4.swizzle(minor2, 2, 3, 0, 1);\n\n  tmp1   = SIMD.Float32x4.mul(row0, row1);\n  tmp1   = SIMD.Float32x4.swizzle(tmp1, 1, 0, 3, 2);\n  minor2 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row3, tmp1), minor2);\n  minor3 = SIMD.Float32x4.sub(SIMD.Float32x4.mul(row2, tmp1), minor3);\n  tmp1   = SIMD.Float32x4.swizzle(tmp1, 2, 3, 0, 1);\n  minor2 = SIMD.Float32x4.sub(SIMD.Float32x4.mul(row3, tmp1), minor2);\n  minor3 = SIMD.Float32x4.sub(minor3, SIMD.Float32x4.mul(row2, tmp1));\n\n  tmp1   = SIMD.Float32x4.mul(row0, row3);\n  tmp1   = SIMD.Float32x4.swizzle(tmp1, 1, 0, 3, 2);\n  minor1 = SIMD.Float32x4.sub(minor1, SIMD.Float32x4.mul(row2, tmp1));\n  minor2 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row1, tmp1), minor2);\n  tmp1   = SIMD.Float32x4.swizzle(tmp1, 2, 3, 0, 1);\n  minor1 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row2, tmp1), minor1);\n  minor2 = SIMD.Float32x4.sub(minor2, SIMD.Float32x4.mul(row1, tmp1));\n\n  tmp1   = SIMD.Float32x4.mul(row0, row2);\n  tmp1   = SIMD.Float32x4.swizzle(tmp1, 1, 0, 3, 2);\n  minor1 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row3, tmp1), minor1);\n  minor3 = SIMD.Float32x4.sub(minor3, SIMD.Float32x4.mul(row1, tmp1));\n  tmp1   = SIMD.Float32x4.swizzle(tmp1, 2, 3, 0, 1);\n  minor1 = SIMD.Float32x4.sub(minor1, SIMD.Float32x4.mul(row3, tmp1));\n  minor3 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row1, tmp1), minor3);\n\n  SIMD.Float32x4.store(out, 0,  minor0);\n  SIMD.Float32x4.store(out, 4,  minor1);\n  SIMD.Float32x4.store(out, 8,  minor2);\n  SIMD.Float32x4.store(out, 12, minor3);\n  return out;\n};\n\n/**\n * Calculates the adjugate of a mat4 using SIMD if available and enabled\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\n mat4.adjoint = glMatrix.USE_SIMD ? mat4.SIMD.adjoint : mat4.scalar.adjoint;\n\n/**\n * Calculates the determinant of a mat4\n *\n * @param {mat4} a the source matrix\n * @returns {Number} determinant of a\n */\nmat4.determinant = function (a) {\n    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3],\n        a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7],\n        a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11],\n        a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15],\n\n        b00 = a00 * a11 - a01 * a10,\n        b01 = a00 * a12 - a02 * a10,\n        b02 = a00 * a13 - a03 * a10,\n        b03 = a01 * a12 - a02 * a11,\n        b04 = a01 * a13 - a03 * a11,\n        b05 = a02 * a13 - a03 * a12,\n        b06 = a20 * a31 - a21 * a30,\n        b07 = a20 * a32 - a22 * a30,\n        b08 = a20 * a33 - a23 * a30,\n        b09 = a21 * a32 - a22 * a31,\n        b10 = a21 * a33 - a23 * a31,\n        b11 = a22 * a33 - a23 * a32;\n\n    // Calculate the determinant\n    return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n};\n\n/**\n * Multiplies two mat4's explicitly using SIMD\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the first operand, must be a Float32Array\n * @param {mat4} b the second operand, must be a Float32Array\n * @returns {mat4} out\n */\nmat4.SIMD.multiply = function (out, a, b) {\n    var a0 = SIMD.Float32x4.load(a, 0);\n    var a1 = SIMD.Float32x4.load(a, 4);\n    var a2 = SIMD.Float32x4.load(a, 8);\n    var a3 = SIMD.Float32x4.load(a, 12);\n\n    var b0 = SIMD.Float32x4.load(b, 0);\n    var out0 = SIMD.Float32x4.add(\n                   SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b0, 0, 0, 0, 0), a0),\n                   SIMD.Float32x4.add(\n                       SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b0, 1, 1, 1, 1), a1),\n                       SIMD.Float32x4.add(\n                           SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b0, 2, 2, 2, 2), a2),\n                           SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b0, 3, 3, 3, 3), a3))));\n    SIMD.Float32x4.store(out, 0, out0);\n\n    var b1 = SIMD.Float32x4.load(b, 4);\n    var out1 = SIMD.Float32x4.add(\n                   SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b1, 0, 0, 0, 0), a0),\n                   SIMD.Float32x4.add(\n                       SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b1, 1, 1, 1, 1), a1),\n                       SIMD.Float32x4.add(\n                           SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b1, 2, 2, 2, 2), a2),\n                           SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b1, 3, 3, 3, 3), a3))));\n    SIMD.Float32x4.store(out, 4, out1);\n\n    var b2 = SIMD.Float32x4.load(b, 8);\n    var out2 = SIMD.Float32x4.add(\n                   SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b2, 0, 0, 0, 0), a0),\n                   SIMD.Float32x4.add(\n                       SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b2, 1, 1, 1, 1), a1),\n                       SIMD.Float32x4.add(\n                               SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b2, 2, 2, 2, 2), a2),\n                               SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b2, 3, 3, 3, 3), a3))));\n    SIMD.Float32x4.store(out, 8, out2);\n\n    var b3 = SIMD.Float32x4.load(b, 12);\n    var out3 = SIMD.Float32x4.add(\n                   SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b3, 0, 0, 0, 0), a0),\n                   SIMD.Float32x4.add(\n                        SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b3, 1, 1, 1, 1), a1),\n                        SIMD.Float32x4.add(\n                            SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b3, 2, 2, 2, 2), a2),\n                            SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b3, 3, 3, 3, 3), a3))));\n    SIMD.Float32x4.store(out, 12, out3);\n\n    return out;\n};\n\n/**\n * Multiplies two mat4's explicitly not using SIMD\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the first operand\n * @param {mat4} b the second operand\n * @returns {mat4} out\n */\nmat4.scalar.multiply = function (out, a, b) {\n    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3],\n        a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7],\n        a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11],\n        a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];\n\n    // Cache only the current line of the second matrix\n    var b0  = b[0], b1 = b[1], b2 = b[2], b3 = b[3];\n    out[0] = b0*a00 + b1*a10 + b2*a20 + b3*a30;\n    out[1] = b0*a01 + b1*a11 + b2*a21 + b3*a31;\n    out[2] = b0*a02 + b1*a12 + b2*a22 + b3*a32;\n    out[3] = b0*a03 + b1*a13 + b2*a23 + b3*a33;\n\n    b0 = b[4]; b1 = b[5]; b2 = b[6]; b3 = b[7];\n    out[4] = b0*a00 + b1*a10 + b2*a20 + b3*a30;\n    out[5] = b0*a01 + b1*a11 + b2*a21 + b3*a31;\n    out[6] = b0*a02 + b1*a12 + b2*a22 + b3*a32;\n    out[7] = b0*a03 + b1*a13 + b2*a23 + b3*a33;\n\n    b0 = b[8]; b1 = b[9]; b2 = b[10]; b3 = b[11];\n    out[8] = b0*a00 + b1*a10 + b2*a20 + b3*a30;\n    out[9] = b0*a01 + b1*a11 + b2*a21 + b3*a31;\n    out[10] = b0*a02 + b1*a12 + b2*a22 + b3*a32;\n    out[11] = b0*a03 + b1*a13 + b2*a23 + b3*a33;\n\n    b0 = b[12]; b1 = b[13]; b2 = b[14]; b3 = b[15];\n    out[12] = b0*a00 + b1*a10 + b2*a20 + b3*a30;\n    out[13] = b0*a01 + b1*a11 + b2*a21 + b3*a31;\n    out[14] = b0*a02 + b1*a12 + b2*a22 + b3*a32;\n    out[15] = b0*a03 + b1*a13 + b2*a23 + b3*a33;\n    return out;\n};\n\n/**\n * Multiplies two mat4's using SIMD if available and enabled\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the first operand\n * @param {mat4} b the second operand\n * @returns {mat4} out\n */\nmat4.multiply = glMatrix.USE_SIMD ? mat4.SIMD.multiply : mat4.scalar.multiply;\n\n/**\n * Alias for {@link mat4.multiply}\n * @function\n */\nmat4.mul = mat4.multiply;\n\n/**\n * Translate a mat4 by the given vector not using SIMD\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to translate\n * @param {vec3} v vector to translate by\n * @returns {mat4} out\n */\nmat4.scalar.translate = function (out, a, v) {\n    var x = v[0], y = v[1], z = v[2],\n        a00, a01, a02, a03,\n        a10, a11, a12, a13,\n        a20, a21, a22, a23;\n\n    if (a === out) {\n        out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];\n        out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];\n        out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];\n        out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];\n    } else {\n        a00 = a[0]; a01 = a[1]; a02 = a[2]; a03 = a[3];\n        a10 = a[4]; a11 = a[5]; a12 = a[6]; a13 = a[7];\n        a20 = a[8]; a21 = a[9]; a22 = a[10]; a23 = a[11];\n\n        out[0] = a00; out[1] = a01; out[2] = a02; out[3] = a03;\n        out[4] = a10; out[5] = a11; out[6] = a12; out[7] = a13;\n        out[8] = a20; out[9] = a21; out[10] = a22; out[11] = a23;\n\n        out[12] = a00 * x + a10 * y + a20 * z + a[12];\n        out[13] = a01 * x + a11 * y + a21 * z + a[13];\n        out[14] = a02 * x + a12 * y + a22 * z + a[14];\n        out[15] = a03 * x + a13 * y + a23 * z + a[15];\n    }\n\n    return out;\n};\n\n/**\n * Translates a mat4 by the given vector using SIMD\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to translate\n * @param {vec3} v vector to translate by\n * @returns {mat4} out\n */\nmat4.SIMD.translate = function (out, a, v) {\n    var a0 = SIMD.Float32x4.load(a, 0),\n        a1 = SIMD.Float32x4.load(a, 4),\n        a2 = SIMD.Float32x4.load(a, 8),\n        a3 = SIMD.Float32x4.load(a, 12),\n        vec = SIMD.Float32x4(v[0], v[1], v[2] , 0);\n\n    if (a !== out) {\n        out[0] = a[0]; out[1] = a[1]; out[2] = a[2]; out[3] = a[3];\n        out[4] = a[4]; out[5] = a[5]; out[6] = a[6]; out[7] = a[7];\n        out[8] = a[8]; out[9] = a[9]; out[10] = a[10]; out[11] = a[11];\n    }\n\n    a0 = SIMD.Float32x4.mul(a0, SIMD.Float32x4.swizzle(vec, 0, 0, 0, 0));\n    a1 = SIMD.Float32x4.mul(a1, SIMD.Float32x4.swizzle(vec, 1, 1, 1, 1));\n    a2 = SIMD.Float32x4.mul(a2, SIMD.Float32x4.swizzle(vec, 2, 2, 2, 2));\n\n    var t0 = SIMD.Float32x4.add(a0, SIMD.Float32x4.add(a1, SIMD.Float32x4.add(a2, a3)));\n    SIMD.Float32x4.store(out, 12, t0);\n\n    return out;\n};\n\n/**\n * Translates a mat4 by the given vector using SIMD if available and enabled\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to translate\n * @param {vec3} v vector to translate by\n * @returns {mat4} out\n */\nmat4.translate = glMatrix.USE_SIMD ? mat4.SIMD.translate : mat4.scalar.translate;\n\n/**\n * Scales the mat4 by the dimensions in the given vec3 not using vectorization\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to scale\n * @param {vec3} v the vec3 to scale the matrix by\n * @returns {mat4} out\n **/\nmat4.scalar.scale = function(out, a, v) {\n    var x = v[0], y = v[1], z = v[2];\n\n    out[0] = a[0] * x;\n    out[1] = a[1] * x;\n    out[2] = a[2] * x;\n    out[3] = a[3] * x;\n    out[4] = a[4] * y;\n    out[5] = a[5] * y;\n    out[6] = a[6] * y;\n    out[7] = a[7] * y;\n    out[8] = a[8] * z;\n    out[9] = a[9] * z;\n    out[10] = a[10] * z;\n    out[11] = a[11] * z;\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n    return out;\n};\n\n/**\n * Scales the mat4 by the dimensions in the given vec3 using vectorization\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to scale\n * @param {vec3} v the vec3 to scale the matrix by\n * @returns {mat4} out\n **/\nmat4.SIMD.scale = function(out, a, v) {\n    var a0, a1, a2;\n    var vec = SIMD.Float32x4(v[0], v[1], v[2], 0);\n\n    a0 = SIMD.Float32x4.load(a, 0);\n    SIMD.Float32x4.store(\n        out, 0, SIMD.Float32x4.mul(a0, SIMD.Float32x4.swizzle(vec, 0, 0, 0, 0)));\n\n    a1 = SIMD.Float32x4.load(a, 4);\n    SIMD.Float32x4.store(\n        out, 4, SIMD.Float32x4.mul(a1, SIMD.Float32x4.swizzle(vec, 1, 1, 1, 1)));\n\n    a2 = SIMD.Float32x4.load(a, 8);\n    SIMD.Float32x4.store(\n        out, 8, SIMD.Float32x4.mul(a2, SIMD.Float32x4.swizzle(vec, 2, 2, 2, 2)));\n\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n    return out;\n};\n\n/**\n * Scales the mat4 by the dimensions in the given vec3 using SIMD if available and enabled\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to scale\n * @param {vec3} v the vec3 to scale the matrix by\n * @returns {mat4} out\n */\nmat4.scale = glMatrix.USE_SIMD ? mat4.SIMD.scale : mat4.scalar.scale;\n\n/**\n * Rotates a mat4 by the given angle around the given axis\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @param {vec3} axis the axis to rotate around\n * @returns {mat4} out\n */\nmat4.rotate = function (out, a, rad, axis) {\n    var x = axis[0], y = axis[1], z = axis[2],\n        len = Math.sqrt(x * x + y * y + z * z),\n        s, c, t,\n        a00, a01, a02, a03,\n        a10, a11, a12, a13,\n        a20, a21, a22, a23,\n        b00, b01, b02,\n        b10, b11, b12,\n        b20, b21, b22;\n\n    if (Math.abs(len) < glMatrix.EPSILON) { return null; }\n\n    len = 1 / len;\n    x *= len;\n    y *= len;\n    z *= len;\n\n    s = Math.sin(rad);\n    c = Math.cos(rad);\n    t = 1 - c;\n\n    a00 = a[0]; a01 = a[1]; a02 = a[2]; a03 = a[3];\n    a10 = a[4]; a11 = a[5]; a12 = a[6]; a13 = a[7];\n    a20 = a[8]; a21 = a[9]; a22 = a[10]; a23 = a[11];\n\n    // Construct the elements of the rotation matrix\n    b00 = x * x * t + c; b01 = y * x * t + z * s; b02 = z * x * t - y * s;\n    b10 = x * y * t - z * s; b11 = y * y * t + c; b12 = z * y * t + x * s;\n    b20 = x * z * t + y * s; b21 = y * z * t - x * s; b22 = z * z * t + c;\n\n    // Perform rotation-specific matrix multiplication\n    out[0] = a00 * b00 + a10 * b01 + a20 * b02;\n    out[1] = a01 * b00 + a11 * b01 + a21 * b02;\n    out[2] = a02 * b00 + a12 * b01 + a22 * b02;\n    out[3] = a03 * b00 + a13 * b01 + a23 * b02;\n    out[4] = a00 * b10 + a10 * b11 + a20 * b12;\n    out[5] = a01 * b10 + a11 * b11 + a21 * b12;\n    out[6] = a02 * b10 + a12 * b11 + a22 * b12;\n    out[7] = a03 * b10 + a13 * b11 + a23 * b12;\n    out[8] = a00 * b20 + a10 * b21 + a20 * b22;\n    out[9] = a01 * b20 + a11 * b21 + a21 * b22;\n    out[10] = a02 * b20 + a12 * b21 + a22 * b22;\n    out[11] = a03 * b20 + a13 * b21 + a23 * b22;\n\n    if (a !== out) { // If the source and destination differ, copy the unchanged last row\n        out[12] = a[12];\n        out[13] = a[13];\n        out[14] = a[14];\n        out[15] = a[15];\n    }\n    return out;\n};\n\n/**\n * Rotates a matrix by the given angle around the X axis not using SIMD\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nmat4.scalar.rotateX = function (out, a, rad) {\n    var s = Math.sin(rad),\n        c = Math.cos(rad),\n        a10 = a[4],\n        a11 = a[5],\n        a12 = a[6],\n        a13 = a[7],\n        a20 = a[8],\n        a21 = a[9],\n        a22 = a[10],\n        a23 = a[11];\n\n    if (a !== out) { // If the source and destination differ, copy the unchanged rows\n        out[0]  = a[0];\n        out[1]  = a[1];\n        out[2]  = a[2];\n        out[3]  = a[3];\n        out[12] = a[12];\n        out[13] = a[13];\n        out[14] = a[14];\n        out[15] = a[15];\n    }\n\n    // Perform axis-specific matrix multiplication\n    out[4] = a10 * c + a20 * s;\n    out[5] = a11 * c + a21 * s;\n    out[6] = a12 * c + a22 * s;\n    out[7] = a13 * c + a23 * s;\n    out[8] = a20 * c - a10 * s;\n    out[9] = a21 * c - a11 * s;\n    out[10] = a22 * c - a12 * s;\n    out[11] = a23 * c - a13 * s;\n    return out;\n};\n\n/**\n * Rotates a matrix by the given angle around the X axis using SIMD\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nmat4.SIMD.rotateX = function (out, a, rad) {\n    var s = SIMD.Float32x4.splat(Math.sin(rad)),\n        c = SIMD.Float32x4.splat(Math.cos(rad));\n\n    if (a !== out) { // If the source and destination differ, copy the unchanged rows\n      out[0]  = a[0];\n      out[1]  = a[1];\n      out[2]  = a[2];\n      out[3]  = a[3];\n      out[12] = a[12];\n      out[13] = a[13];\n      out[14] = a[14];\n      out[15] = a[15];\n    }\n\n    // Perform axis-specific matrix multiplication\n    var a_1 = SIMD.Float32x4.load(a, 4);\n    var a_2 = SIMD.Float32x4.load(a, 8);\n    SIMD.Float32x4.store(out, 4,\n                         SIMD.Float32x4.add(SIMD.Float32x4.mul(a_1, c), SIMD.Float32x4.mul(a_2, s)));\n    SIMD.Float32x4.store(out, 8,\n                         SIMD.Float32x4.sub(SIMD.Float32x4.mul(a_2, c), SIMD.Float32x4.mul(a_1, s)));\n    return out;\n};\n\n/**\n * Rotates a matrix by the given angle around the X axis using SIMD if availabe and enabled\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nmat4.rotateX = glMatrix.USE_SIMD ? mat4.SIMD.rotateX : mat4.scalar.rotateX;\n\n/**\n * Rotates a matrix by the given angle around the Y axis not using SIMD\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nmat4.scalar.rotateY = function (out, a, rad) {\n    var s = Math.sin(rad),\n        c = Math.cos(rad),\n        a00 = a[0],\n        a01 = a[1],\n        a02 = a[2],\n        a03 = a[3],\n        a20 = a[8],\n        a21 = a[9],\n        a22 = a[10],\n        a23 = a[11];\n\n    if (a !== out) { // If the source and destination differ, copy the unchanged rows\n        out[4]  = a[4];\n        out[5]  = a[5];\n        out[6]  = a[6];\n        out[7]  = a[7];\n        out[12] = a[12];\n        out[13] = a[13];\n        out[14] = a[14];\n        out[15] = a[15];\n    }\n\n    // Perform axis-specific matrix multiplication\n    out[0] = a00 * c - a20 * s;\n    out[1] = a01 * c - a21 * s;\n    out[2] = a02 * c - a22 * s;\n    out[3] = a03 * c - a23 * s;\n    out[8] = a00 * s + a20 * c;\n    out[9] = a01 * s + a21 * c;\n    out[10] = a02 * s + a22 * c;\n    out[11] = a03 * s + a23 * c;\n    return out;\n};\n\n/**\n * Rotates a matrix by the given angle around the Y axis using SIMD\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nmat4.SIMD.rotateY = function (out, a, rad) {\n    var s = SIMD.Float32x4.splat(Math.sin(rad)),\n        c = SIMD.Float32x4.splat(Math.cos(rad));\n\n    if (a !== out) { // If the source and destination differ, copy the unchanged rows\n        out[4]  = a[4];\n        out[5]  = a[5];\n        out[6]  = a[6];\n        out[7]  = a[7];\n        out[12] = a[12];\n        out[13] = a[13];\n        out[14] = a[14];\n        out[15] = a[15];\n    }\n\n    // Perform axis-specific matrix multiplication\n    var a_0 = SIMD.Float32x4.load(a, 0);\n    var a_2 = SIMD.Float32x4.load(a, 8);\n    SIMD.Float32x4.store(out, 0,\n                         SIMD.Float32x4.sub(SIMD.Float32x4.mul(a_0, c), SIMD.Float32x4.mul(a_2, s)));\n    SIMD.Float32x4.store(out, 8,\n                         SIMD.Float32x4.add(SIMD.Float32x4.mul(a_0, s), SIMD.Float32x4.mul(a_2, c)));\n    return out;\n};\n\n/**\n * Rotates a matrix by the given angle around the Y axis if SIMD available and enabled\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n mat4.rotateY = glMatrix.USE_SIMD ? mat4.SIMD.rotateY : mat4.scalar.rotateY;\n\n/**\n * Rotates a matrix by the given angle around the Z axis not using SIMD\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nmat4.scalar.rotateZ = function (out, a, rad) {\n    var s = Math.sin(rad),\n        c = Math.cos(rad),\n        a00 = a[0],\n        a01 = a[1],\n        a02 = a[2],\n        a03 = a[3],\n        a10 = a[4],\n        a11 = a[5],\n        a12 = a[6],\n        a13 = a[7];\n\n    if (a !== out) { // If the source and destination differ, copy the unchanged last row\n        out[8]  = a[8];\n        out[9]  = a[9];\n        out[10] = a[10];\n        out[11] = a[11];\n        out[12] = a[12];\n        out[13] = a[13];\n        out[14] = a[14];\n        out[15] = a[15];\n    }\n\n    // Perform axis-specific matrix multiplication\n    out[0] = a00 * c + a10 * s;\n    out[1] = a01 * c + a11 * s;\n    out[2] = a02 * c + a12 * s;\n    out[3] = a03 * c + a13 * s;\n    out[4] = a10 * c - a00 * s;\n    out[5] = a11 * c - a01 * s;\n    out[6] = a12 * c - a02 * s;\n    out[7] = a13 * c - a03 * s;\n    return out;\n};\n\n/**\n * Rotates a matrix by the given angle around the Z axis using SIMD\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nmat4.SIMD.rotateZ = function (out, a, rad) {\n    var s = SIMD.Float32x4.splat(Math.sin(rad)),\n        c = SIMD.Float32x4.splat(Math.cos(rad));\n\n    if (a !== out) { // If the source and destination differ, copy the unchanged last row\n        out[8]  = a[8];\n        out[9]  = a[9];\n        out[10] = a[10];\n        out[11] = a[11];\n        out[12] = a[12];\n        out[13] = a[13];\n        out[14] = a[14];\n        out[15] = a[15];\n    }\n\n    // Perform axis-specific matrix multiplication\n    var a_0 = SIMD.Float32x4.load(a, 0);\n    var a_1 = SIMD.Float32x4.load(a, 4);\n    SIMD.Float32x4.store(out, 0,\n                         SIMD.Float32x4.add(SIMD.Float32x4.mul(a_0, c), SIMD.Float32x4.mul(a_1, s)));\n    SIMD.Float32x4.store(out, 4,\n                         SIMD.Float32x4.sub(SIMD.Float32x4.mul(a_1, c), SIMD.Float32x4.mul(a_0, s)));\n    return out;\n};\n\n/**\n * Rotates a matrix by the given angle around the Z axis if SIMD available and enabled\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n mat4.rotateZ = glMatrix.USE_SIMD ? mat4.SIMD.rotateZ : mat4.scalar.rotateZ;\n\n/**\n * Creates a matrix from a vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, dest, vec);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {vec3} v Translation vector\n * @returns {mat4} out\n */\nmat4.fromTranslation = function(out, v) {\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = 1;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[10] = 1;\n    out[11] = 0;\n    out[12] = v[0];\n    out[13] = v[1];\n    out[14] = v[2];\n    out[15] = 1;\n    return out;\n}\n\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.scale(dest, dest, vec);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {vec3} v Scaling vector\n * @returns {mat4} out\n */\nmat4.fromScaling = function(out, v) {\n    out[0] = v[0];\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = v[1];\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[10] = v[2];\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n    out[15] = 1;\n    return out;\n}\n\n/**\n * Creates a matrix from a given angle around a given axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotate(dest, dest, rad, axis);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @param {vec3} axis the axis to rotate around\n * @returns {mat4} out\n */\nmat4.fromRotation = function(out, rad, axis) {\n    var x = axis[0], y = axis[1], z = axis[2],\n        len = Math.sqrt(x * x + y * y + z * z),\n        s, c, t;\n\n    if (Math.abs(len) < glMatrix.EPSILON) { return null; }\n\n    len = 1 / len;\n    x *= len;\n    y *= len;\n    z *= len;\n\n    s = Math.sin(rad);\n    c = Math.cos(rad);\n    t = 1 - c;\n\n    // Perform rotation-specific matrix multiplication\n    out[0] = x * x * t + c;\n    out[1] = y * x * t + z * s;\n    out[2] = z * x * t - y * s;\n    out[3] = 0;\n    out[4] = x * y * t - z * s;\n    out[5] = y * y * t + c;\n    out[6] = z * y * t + x * s;\n    out[7] = 0;\n    out[8] = x * z * t + y * s;\n    out[9] = y * z * t - x * s;\n    out[10] = z * z * t + c;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n    out[15] = 1;\n    return out;\n}\n\n/**\n * Creates a matrix from the given angle around the X axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateX(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nmat4.fromXRotation = function(out, rad) {\n    var s = Math.sin(rad),\n        c = Math.cos(rad);\n\n    // Perform axis-specific matrix multiplication\n    out[0]  = 1;\n    out[1]  = 0;\n    out[2]  = 0;\n    out[3]  = 0;\n    out[4] = 0;\n    out[5] = c;\n    out[6] = s;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = -s;\n    out[10] = c;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n    out[15] = 1;\n    return out;\n}\n\n/**\n * Creates a matrix from the given angle around the Y axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateY(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nmat4.fromYRotation = function(out, rad) {\n    var s = Math.sin(rad),\n        c = Math.cos(rad);\n\n    // Perform axis-specific matrix multiplication\n    out[0]  = c;\n    out[1]  = 0;\n    out[2]  = -s;\n    out[3]  = 0;\n    out[4] = 0;\n    out[5] = 1;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = s;\n    out[9] = 0;\n    out[10] = c;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n    out[15] = 1;\n    return out;\n}\n\n/**\n * Creates a matrix from the given angle around the Z axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateZ(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nmat4.fromZRotation = function(out, rad) {\n    var s = Math.sin(rad),\n        c = Math.cos(rad);\n\n    // Perform axis-specific matrix multiplication\n    out[0]  = c;\n    out[1]  = s;\n    out[2]  = 0;\n    out[3]  = 0;\n    out[4] = -s;\n    out[5] = c;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[10] = 1;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n    out[15] = 1;\n    return out;\n}\n\n/**\n * Creates a matrix from a quaternion rotation and vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     var quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {vec3} v Translation vector\n * @returns {mat4} out\n */\nmat4.fromRotationTranslation = function (out, q, v) {\n    // Quaternion math\n    var x = q[0], y = q[1], z = q[2], w = q[3],\n        x2 = x + x,\n        y2 = y + y,\n        z2 = z + z,\n\n        xx = x * x2,\n        xy = x * y2,\n        xz = x * z2,\n        yy = y * y2,\n        yz = y * z2,\n        zz = z * z2,\n        wx = w * x2,\n        wy = w * y2,\n        wz = w * z2;\n\n    out[0] = 1 - (yy + zz);\n    out[1] = xy + wz;\n    out[2] = xz - wy;\n    out[3] = 0;\n    out[4] = xy - wz;\n    out[5] = 1 - (xx + zz);\n    out[6] = yz + wx;\n    out[7] = 0;\n    out[8] = xz + wy;\n    out[9] = yz - wx;\n    out[10] = 1 - (xx + yy);\n    out[11] = 0;\n    out[12] = v[0];\n    out[13] = v[1];\n    out[14] = v[2];\n    out[15] = 1;\n\n    return out;\n};\n\n/**\n * Returns the translation vector component of a transformation\n *  matrix. If a matrix is built with fromRotationTranslation,\n *  the returned vector will be the same as the translation vector\n *  originally supplied.\n * @param  {vec3} out Vector to receive translation component\n * @param  {mat4} mat Matrix to be decomposed (input)\n * @return {vec3} out\n */\nmat4.getTranslation = function (out, mat) {\n  out[0] = mat[12];\n  out[1] = mat[13];\n  out[2] = mat[14];\n\n  return out;\n};\n\n/**\n * Returns a quaternion representing the rotational component\n *  of a transformation matrix. If a matrix is built with\n *  fromRotationTranslation, the returned quaternion will be the\n *  same as the quaternion originally supplied.\n * @param {quat} out Quaternion to receive the rotation component\n * @param {mat4} mat Matrix to be decomposed (input)\n * @return {quat} out\n */\nmat4.getRotation = function (out, mat) {\n  // Algorithm taken from http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm\n  var trace = mat[0] + mat[5] + mat[10];\n  var S = 0;\n\n  if (trace > 0) { \n    S = Math.sqrt(trace + 1.0) * 2;\n    out[3] = 0.25 * S;\n    out[0] = (mat[6] - mat[9]) / S;\n    out[1] = (mat[8] - mat[2]) / S; \n    out[2] = (mat[1] - mat[4]) / S; \n  } else if ((mat[0] > mat[5])&(mat[0] > mat[10])) { \n    S = Math.sqrt(1.0 + mat[0] - mat[5] - mat[10]) * 2;\n    out[3] = (mat[6] - mat[9]) / S;\n    out[0] = 0.25 * S;\n    out[1] = (mat[1] + mat[4]) / S; \n    out[2] = (mat[8] + mat[2]) / S; \n  } else if (mat[5] > mat[10]) { \n    S = Math.sqrt(1.0 + mat[5] - mat[0] - mat[10]) * 2;\n    out[3] = (mat[8] - mat[2]) / S;\n    out[0] = (mat[1] + mat[4]) / S; \n    out[1] = 0.25 * S;\n    out[2] = (mat[6] + mat[9]) / S; \n  } else { \n    S = Math.sqrt(1.0 + mat[10] - mat[0] - mat[5]) * 2;\n    out[3] = (mat[1] - mat[4]) / S;\n    out[0] = (mat[8] + mat[2]) / S;\n    out[1] = (mat[6] + mat[9]) / S;\n    out[2] = 0.25 * S;\n  }\n\n  return out;\n};\n\n/**\n * Creates a matrix from a quaternion rotation, vector translation and vector scale\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     var quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *     mat4.scale(dest, scale)\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {vec3} v Translation vector\n * @param {vec3} s Scaling vector\n * @returns {mat4} out\n */\nmat4.fromRotationTranslationScale = function (out, q, v, s) {\n    // Quaternion math\n    var x = q[0], y = q[1], z = q[2], w = q[3],\n        x2 = x + x,\n        y2 = y + y,\n        z2 = z + z,\n\n        xx = x * x2,\n        xy = x * y2,\n        xz = x * z2,\n        yy = y * y2,\n        yz = y * z2,\n        zz = z * z2,\n        wx = w * x2,\n        wy = w * y2,\n        wz = w * z2,\n        sx = s[0],\n        sy = s[1],\n        sz = s[2];\n\n    out[0] = (1 - (yy + zz)) * sx;\n    out[1] = (xy + wz) * sx;\n    out[2] = (xz - wy) * sx;\n    out[3] = 0;\n    out[4] = (xy - wz) * sy;\n    out[5] = (1 - (xx + zz)) * sy;\n    out[6] = (yz + wx) * sy;\n    out[7] = 0;\n    out[8] = (xz + wy) * sz;\n    out[9] = (yz - wx) * sz;\n    out[10] = (1 - (xx + yy)) * sz;\n    out[11] = 0;\n    out[12] = v[0];\n    out[13] = v[1];\n    out[14] = v[2];\n    out[15] = 1;\n\n    return out;\n};\n\n/**\n * Creates a matrix from a quaternion rotation, vector translation and vector scale, rotating and scaling around the given origin\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     mat4.translate(dest, origin);\n *     var quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *     mat4.scale(dest, scale)\n *     mat4.translate(dest, negativeOrigin);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {vec3} v Translation vector\n * @param {vec3} s Scaling vector\n * @param {vec3} o The origin vector around which to scale and rotate\n * @returns {mat4} out\n */\nmat4.fromRotationTranslationScaleOrigin = function (out, q, v, s, o) {\n  // Quaternion math\n  var x = q[0], y = q[1], z = q[2], w = q[3],\n      x2 = x + x,\n      y2 = y + y,\n      z2 = z + z,\n\n      xx = x * x2,\n      xy = x * y2,\n      xz = x * z2,\n      yy = y * y2,\n      yz = y * z2,\n      zz = z * z2,\n      wx = w * x2,\n      wy = w * y2,\n      wz = w * z2,\n\n      sx = s[0],\n      sy = s[1],\n      sz = s[2],\n\n      ox = o[0],\n      oy = o[1],\n      oz = o[2];\n\n  out[0] = (1 - (yy + zz)) * sx;\n  out[1] = (xy + wz) * sx;\n  out[2] = (xz - wy) * sx;\n  out[3] = 0;\n  out[4] = (xy - wz) * sy;\n  out[5] = (1 - (xx + zz)) * sy;\n  out[6] = (yz + wx) * sy;\n  out[7] = 0;\n  out[8] = (xz + wy) * sz;\n  out[9] = (yz - wx) * sz;\n  out[10] = (1 - (xx + yy)) * sz;\n  out[11] = 0;\n  out[12] = v[0] + ox - (out[0] * ox + out[4] * oy + out[8] * oz);\n  out[13] = v[1] + oy - (out[1] * ox + out[5] * oy + out[9] * oz);\n  out[14] = v[2] + oz - (out[2] * ox + out[6] * oy + out[10] * oz);\n  out[15] = 1;\n\n  return out;\n};\n\n/**\n * Calculates a 4x4 matrix from the given quaternion\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat} q Quaternion to create matrix from\n *\n * @returns {mat4} out\n */\nmat4.fromQuat = function (out, q) {\n    var x = q[0], y = q[1], z = q[2], w = q[3],\n        x2 = x + x,\n        y2 = y + y,\n        z2 = z + z,\n\n        xx = x * x2,\n        yx = y * x2,\n        yy = y * y2,\n        zx = z * x2,\n        zy = z * y2,\n        zz = z * z2,\n        wx = w * x2,\n        wy = w * y2,\n        wz = w * z2;\n\n    out[0] = 1 - yy - zz;\n    out[1] = yx + wz;\n    out[2] = zx - wy;\n    out[3] = 0;\n\n    out[4] = yx - wz;\n    out[5] = 1 - xx - zz;\n    out[6] = zy + wx;\n    out[7] = 0;\n\n    out[8] = zx + wy;\n    out[9] = zy - wx;\n    out[10] = 1 - xx - yy;\n    out[11] = 0;\n\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n    out[15] = 1;\n\n    return out;\n};\n\n/**\n * Generates a frustum matrix with the given bounds\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {Number} left Left bound of the frustum\n * @param {Number} right Right bound of the frustum\n * @param {Number} bottom Bottom bound of the frustum\n * @param {Number} top Top bound of the frustum\n * @param {Number} near Near bound of the frustum\n * @param {Number} far Far bound of the frustum\n * @returns {mat4} out\n */\nmat4.frustum = function (out, left, right, bottom, top, near, far) {\n    var rl = 1 / (right - left),\n        tb = 1 / (top - bottom),\n        nf = 1 / (near - far);\n    out[0] = (near * 2) * rl;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = (near * 2) * tb;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = (right + left) * rl;\n    out[9] = (top + bottom) * tb;\n    out[10] = (far + near) * nf;\n    out[11] = -1;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = (far * near * 2) * nf;\n    out[15] = 0;\n    return out;\n};\n\n/**\n * Generates a perspective projection matrix with the given bounds\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} fovy Vertical field of view in radians\n * @param {number} aspect Aspect ratio. typically viewport width/height\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\nmat4.perspective = function (out, fovy, aspect, near, far) {\n    var f = 1.0 / Math.tan(fovy / 2),\n        nf = 1 / (near - far);\n    out[0] = f / aspect;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = f;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[10] = (far + near) * nf;\n    out[11] = -1;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = (2 * far * near) * nf;\n    out[15] = 0;\n    return out;\n};\n\n/**\n * Generates a perspective projection matrix with the given field of view.\n * This is primarily useful for generating projection matrices to be used\n * with the still experiemental WebVR API.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {Object} fov Object containing the following values: upDegrees, downDegrees, leftDegrees, rightDegrees\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\nmat4.perspectiveFromFieldOfView = function (out, fov, near, far) {\n    var upTan = Math.tan(fov.upDegrees * Math.PI/180.0),\n        downTan = Math.tan(fov.downDegrees * Math.PI/180.0),\n        leftTan = Math.tan(fov.leftDegrees * Math.PI/180.0),\n        rightTan = Math.tan(fov.rightDegrees * Math.PI/180.0),\n        xScale = 2.0 / (leftTan + rightTan),\n        yScale = 2.0 / (upTan + downTan);\n\n    out[0] = xScale;\n    out[1] = 0.0;\n    out[2] = 0.0;\n    out[3] = 0.0;\n    out[4] = 0.0;\n    out[5] = yScale;\n    out[6] = 0.0;\n    out[7] = 0.0;\n    out[8] = -((leftTan - rightTan) * xScale * 0.5);\n    out[9] = ((upTan - downTan) * yScale * 0.5);\n    out[10] = far / (near - far);\n    out[11] = -1.0;\n    out[12] = 0.0;\n    out[13] = 0.0;\n    out[14] = (far * near) / (near - far);\n    out[15] = 0.0;\n    return out;\n}\n\n/**\n * Generates a orthogonal projection matrix with the given bounds\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} left Left bound of the frustum\n * @param {number} right Right bound of the frustum\n * @param {number} bottom Bottom bound of the frustum\n * @param {number} top Top bound of the frustum\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\nmat4.ortho = function (out, left, right, bottom, top, near, far) {\n    var lr = 1 / (left - right),\n        bt = 1 / (bottom - top),\n        nf = 1 / (near - far);\n    out[0] = -2 * lr;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = -2 * bt;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[10] = 2 * nf;\n    out[11] = 0;\n    out[12] = (left + right) * lr;\n    out[13] = (top + bottom) * bt;\n    out[14] = (far + near) * nf;\n    out[15] = 1;\n    return out;\n};\n\n/**\n * Generates a look-at matrix with the given eye position, focal point, and up axis\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {vec3} eye Position of the viewer\n * @param {vec3} center Point the viewer is looking at\n * @param {vec3} up vec3 pointing up\n * @returns {mat4} out\n */\nmat4.lookAt = function (out, eye, center, up) {\n    var x0, x1, x2, y0, y1, y2, z0, z1, z2, len,\n        eyex = eye[0],\n        eyey = eye[1],\n        eyez = eye[2],\n        upx = up[0],\n        upy = up[1],\n        upz = up[2],\n        centerx = center[0],\n        centery = center[1],\n        centerz = center[2];\n\n    if (Math.abs(eyex - centerx) < glMatrix.EPSILON &&\n        Math.abs(eyey - centery) < glMatrix.EPSILON &&\n        Math.abs(eyez - centerz) < glMatrix.EPSILON) {\n        return mat4.identity(out);\n    }\n\n    z0 = eyex - centerx;\n    z1 = eyey - centery;\n    z2 = eyez - centerz;\n\n    len = 1 / Math.sqrt(z0 * z0 + z1 * z1 + z2 * z2);\n    z0 *= len;\n    z1 *= len;\n    z2 *= len;\n\n    x0 = upy * z2 - upz * z1;\n    x1 = upz * z0 - upx * z2;\n    x2 = upx * z1 - upy * z0;\n    len = Math.sqrt(x0 * x0 + x1 * x1 + x2 * x2);\n    if (!len) {\n        x0 = 0;\n        x1 = 0;\n        x2 = 0;\n    } else {\n        len = 1 / len;\n        x0 *= len;\n        x1 *= len;\n        x2 *= len;\n    }\n\n    y0 = z1 * x2 - z2 * x1;\n    y1 = z2 * x0 - z0 * x2;\n    y2 = z0 * x1 - z1 * x0;\n\n    len = Math.sqrt(y0 * y0 + y1 * y1 + y2 * y2);\n    if (!len) {\n        y0 = 0;\n        y1 = 0;\n        y2 = 0;\n    } else {\n        len = 1 / len;\n        y0 *= len;\n        y1 *= len;\n        y2 *= len;\n    }\n\n    out[0] = x0;\n    out[1] = y0;\n    out[2] = z0;\n    out[3] = 0;\n    out[4] = x1;\n    out[5] = y1;\n    out[6] = z1;\n    out[7] = 0;\n    out[8] = x2;\n    out[9] = y2;\n    out[10] = z2;\n    out[11] = 0;\n    out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);\n    out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);\n    out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);\n    out[15] = 1;\n\n    return out;\n};\n\n/**\n * Returns a string representation of a mat4\n *\n * @param {mat4} mat matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\nmat4.str = function (a) {\n    return 'mat4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' +\n                    a[4] + ', ' + a[5] + ', ' + a[6] + ', ' + a[7] + ', ' +\n                    a[8] + ', ' + a[9] + ', ' + a[10] + ', ' + a[11] + ', ' +\n                    a[12] + ', ' + a[13] + ', ' + a[14] + ', ' + a[15] + ')';\n};\n\n/**\n * Returns Frobenius norm of a mat4\n *\n * @param {mat4} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\nmat4.frob = function (a) {\n    return(Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + Math.pow(a[6], 2) + Math.pow(a[7], 2) + Math.pow(a[8], 2) + Math.pow(a[9], 2) + Math.pow(a[10], 2) + Math.pow(a[11], 2) + Math.pow(a[12], 2) + Math.pow(a[13], 2) + Math.pow(a[14], 2) + Math.pow(a[15], 2) ))\n};\n\n/**\n * Adds two mat4's\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the first operand\n * @param {mat4} b the second operand\n * @returns {mat4} out\n */\nmat4.add = function(out, a, b) {\n    out[0] = a[0] + b[0];\n    out[1] = a[1] + b[1];\n    out[2] = a[2] + b[2];\n    out[3] = a[3] + b[3];\n    out[4] = a[4] + b[4];\n    out[5] = a[5] + b[5];\n    out[6] = a[6] + b[6];\n    out[7] = a[7] + b[7];\n    out[8] = a[8] + b[8];\n    out[9] = a[9] + b[9];\n    out[10] = a[10] + b[10];\n    out[11] = a[11] + b[11];\n    out[12] = a[12] + b[12];\n    out[13] = a[13] + b[13];\n    out[14] = a[14] + b[14];\n    out[15] = a[15] + b[15];\n    return out;\n};\n\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the first operand\n * @param {mat4} b the second operand\n * @returns {mat4} out\n */\nmat4.subtract = function(out, a, b) {\n    out[0] = a[0] - b[0];\n    out[1] = a[1] - b[1];\n    out[2] = a[2] - b[2];\n    out[3] = a[3] - b[3];\n    out[4] = a[4] - b[4];\n    out[5] = a[5] - b[5];\n    out[6] = a[6] - b[6];\n    out[7] = a[7] - b[7];\n    out[8] = a[8] - b[8];\n    out[9] = a[9] - b[9];\n    out[10] = a[10] - b[10];\n    out[11] = a[11] - b[11];\n    out[12] = a[12] - b[12];\n    out[13] = a[13] - b[13];\n    out[14] = a[14] - b[14];\n    out[15] = a[15] - b[15];\n    return out;\n};\n\n/**\n * Alias for {@link mat4.subtract}\n * @function\n */\nmat4.sub = mat4.subtract;\n\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat4} out\n */\nmat4.multiplyScalar = function(out, a, b) {\n    out[0] = a[0] * b;\n    out[1] = a[1] * b;\n    out[2] = a[2] * b;\n    out[3] = a[3] * b;\n    out[4] = a[4] * b;\n    out[5] = a[5] * b;\n    out[6] = a[6] * b;\n    out[7] = a[7] * b;\n    out[8] = a[8] * b;\n    out[9] = a[9] * b;\n    out[10] = a[10] * b;\n    out[11] = a[11] * b;\n    out[12] = a[12] * b;\n    out[13] = a[13] * b;\n    out[14] = a[14] * b;\n    out[15] = a[15] * b;\n    return out;\n};\n\n/**\n * Adds two mat4's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat4} out the receiving vector\n * @param {mat4} a the first operand\n * @param {mat4} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat4} out\n */\nmat4.multiplyScalarAndAdd = function(out, a, b, scale) {\n    out[0] = a[0] + (b[0] * scale);\n    out[1] = a[1] + (b[1] * scale);\n    out[2] = a[2] + (b[2] * scale);\n    out[3] = a[3] + (b[3] * scale);\n    out[4] = a[4] + (b[4] * scale);\n    out[5] = a[5] + (b[5] * scale);\n    out[6] = a[6] + (b[6] * scale);\n    out[7] = a[7] + (b[7] * scale);\n    out[8] = a[8] + (b[8] * scale);\n    out[9] = a[9] + (b[9] * scale);\n    out[10] = a[10] + (b[10] * scale);\n    out[11] = a[11] + (b[11] * scale);\n    out[12] = a[12] + (b[12] * scale);\n    out[13] = a[13] + (b[13] * scale);\n    out[14] = a[14] + (b[14] * scale);\n    out[15] = a[15] + (b[15] * scale);\n    return out;\n};\n\n/**\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {mat4} a The first matrix.\n * @param {mat4} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nmat4.exactEquals = function (a, b) {\n    return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && \n           a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && \n           a[8] === b[8] && a[9] === b[9] && a[10] === b[10] && a[11] === b[11] &&\n           a[12] === b[12] && a[13] === b[13] && a[14] === b[14] && a[15] === b[15];\n};\n\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {mat4} a The first matrix.\n * @param {mat4} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nmat4.equals = function (a, b) {\n    var a0  = a[0],  a1  = a[1],  a2  = a[2],  a3  = a[3],\n        a4  = a[4],  a5  = a[5],  a6  = a[6],  a7  = a[7], \n        a8  = a[8],  a9  = a[9],  a10 = a[10], a11 = a[11], \n        a12 = a[12], a13 = a[13], a14 = a[14], a15 = a[15];\n\n    var b0  = b[0],  b1  = b[1],  b2  = b[2],  b3  = b[3],\n        b4  = b[4],  b5  = b[5],  b6  = b[6],  b7  = b[7], \n        b8  = b[8],  b9  = b[9],  b10 = b[10], b11 = b[11], \n        b12 = b[12], b13 = b[13], b14 = b[14], b15 = b[15];\n\n    return (Math.abs(a0 - b0) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n            Math.abs(a1 - b1) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\n            Math.abs(a2 - b2) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&\n            Math.abs(a3 - b3) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a3), Math.abs(b3)) &&\n            Math.abs(a4 - b4) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a4), Math.abs(b4)) &&\n            Math.abs(a5 - b5) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a5), Math.abs(b5)) &&\n            Math.abs(a6 - b6) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a6), Math.abs(b6)) &&\n            Math.abs(a7 - b7) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a7), Math.abs(b7)) &&\n            Math.abs(a8 - b8) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a8), Math.abs(b8)) &&\n            Math.abs(a9 - b9) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a9), Math.abs(b9)) &&\n            Math.abs(a10 - b10) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a10), Math.abs(b10)) &&\n            Math.abs(a11 - b11) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a11), Math.abs(b11)) &&\n            Math.abs(a12 - b12) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a12), Math.abs(b12)) &&\n            Math.abs(a13 - b13) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a13), Math.abs(b13)) &&\n            Math.abs(a14 - b14) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a14), Math.abs(b14)) &&\n            Math.abs(a15 - b15) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a15), Math.abs(b15)));\n};\n\n\n\nmodule.exports = mat4;\n\n},{\"./common.js\":2}],7:[function(_dereq_,module,exports){\n/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE. */\n\nvar glMatrix = _dereq_(\"./common.js\");\nvar mat3 = _dereq_(\"./mat3.js\");\nvar vec3 = _dereq_(\"./vec3.js\");\nvar vec4 = _dereq_(\"./vec4.js\");\n\n/**\n * @class Quaternion\n * @name quat\n */\nvar quat = {};\n\n/**\n * Creates a new identity quat\n *\n * @returns {quat} a new quaternion\n */\nquat.create = function() {\n    var out = new glMatrix.ARRAY_TYPE(4);\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 1;\n    return out;\n};\n\n/**\n * Sets a quaternion to represent the shortest rotation from one\n * vector to another.\n *\n * Both vectors are assumed to be unit length.\n *\n * @param {quat} out the receiving quaternion.\n * @param {vec3} a the initial vector\n * @param {vec3} b the destination vector\n * @returns {quat} out\n */\nquat.rotationTo = (function() {\n    var tmpvec3 = vec3.create();\n    var xUnitVec3 = vec3.fromValues(1,0,0);\n    var yUnitVec3 = vec3.fromValues(0,1,0);\n\n    return function(out, a, b) {\n        var dot = vec3.dot(a, b);\n        if (dot < -0.999999) {\n            vec3.cross(tmpvec3, xUnitVec3, a);\n            if (vec3.length(tmpvec3) < 0.000001)\n                vec3.cross(tmpvec3, yUnitVec3, a);\n            vec3.normalize(tmpvec3, tmpvec3);\n            quat.setAxisAngle(out, tmpvec3, Math.PI);\n            return out;\n        } else if (dot > 0.999999) {\n            out[0] = 0;\n            out[1] = 0;\n            out[2] = 0;\n            out[3] = 1;\n            return out;\n        } else {\n            vec3.cross(tmpvec3, a, b);\n            out[0] = tmpvec3[0];\n            out[1] = tmpvec3[1];\n            out[2] = tmpvec3[2];\n            out[3] = 1 + dot;\n            return quat.normalize(out, out);\n        }\n    };\n})();\n\n/**\n * Sets the specified quaternion with values corresponding to the given\n * axes. Each axis is a vec3 and is expected to be unit length and\n * perpendicular to all other specified axes.\n *\n * @param {vec3} view  the vector representing the viewing direction\n * @param {vec3} right the vector representing the local \"right\" direction\n * @param {vec3} up    the vector representing the local \"up\" direction\n * @returns {quat} out\n */\nquat.setAxes = (function() {\n    var matr = mat3.create();\n\n    return function(out, view, right, up) {\n        matr[0] = right[0];\n        matr[3] = right[1];\n        matr[6] = right[2];\n\n        matr[1] = up[0];\n        matr[4] = up[1];\n        matr[7] = up[2];\n\n        matr[2] = -view[0];\n        matr[5] = -view[1];\n        matr[8] = -view[2];\n\n        return quat.normalize(out, quat.fromMat3(out, matr));\n    };\n})();\n\n/**\n * Creates a new quat initialized with values from an existing quaternion\n *\n * @param {quat} a quaternion to clone\n * @returns {quat} a new quaternion\n * @function\n */\nquat.clone = vec4.clone;\n\n/**\n * Creates a new quat initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {quat} a new quaternion\n * @function\n */\nquat.fromValues = vec4.fromValues;\n\n/**\n * Copy the values from one quat to another\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the source quaternion\n * @returns {quat} out\n * @function\n */\nquat.copy = vec4.copy;\n\n/**\n * Set the components of a quat to the given values\n *\n * @param {quat} out the receiving quaternion\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {quat} out\n * @function\n */\nquat.set = vec4.set;\n\n/**\n * Set a quat to the identity quaternion\n *\n * @param {quat} out the receiving quaternion\n * @returns {quat} out\n */\nquat.identity = function(out) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 1;\n    return out;\n};\n\n/**\n * Sets a quat from the given angle and rotation axis,\n * then returns it.\n *\n * @param {quat} out the receiving quaternion\n * @param {vec3} axis the axis around which to rotate\n * @param {Number} rad the angle in radians\n * @returns {quat} out\n **/\nquat.setAxisAngle = function(out, axis, rad) {\n    rad = rad * 0.5;\n    var s = Math.sin(rad);\n    out[0] = s * axis[0];\n    out[1] = s * axis[1];\n    out[2] = s * axis[2];\n    out[3] = Math.cos(rad);\n    return out;\n};\n\n/**\n * Gets the rotation axis and angle for a given\n *  quaternion. If a quaternion is created with\n *  setAxisAngle, this method will return the same\n *  values as providied in the original parameter list\n *  OR functionally equivalent values.\n * Example: The quaternion formed by axis [0, 0, 1] and\n *  angle -90 is the same as the quaternion formed by\n *  [0, 0, 1] and 270. This method favors the latter.\n * @param  {vec3} out_axis  Vector receiving the axis of rotation\n * @param  {quat} q     Quaternion to be decomposed\n * @return {Number}     Angle, in radians, of the rotation\n */\nquat.getAxisAngle = function(out_axis, q) {\n    var rad = Math.acos(q[3]) * 2.0;\n    var s = Math.sin(rad / 2.0);\n    if (s != 0.0) {\n        out_axis[0] = q[0] / s;\n        out_axis[1] = q[1] / s;\n        out_axis[2] = q[2] / s;\n    } else {\n        // If s is zero, return any axis (no rotation - axis does not matter)\n        out_axis[0] = 1;\n        out_axis[1] = 0;\n        out_axis[2] = 0;\n    }\n    return rad;\n};\n\n/**\n * Adds two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @returns {quat} out\n * @function\n */\nquat.add = vec4.add;\n\n/**\n * Multiplies two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @returns {quat} out\n */\nquat.multiply = function(out, a, b) {\n    var ax = a[0], ay = a[1], az = a[2], aw = a[3],\n        bx = b[0], by = b[1], bz = b[2], bw = b[3];\n\n    out[0] = ax * bw + aw * bx + ay * bz - az * by;\n    out[1] = ay * bw + aw * by + az * bx - ax * bz;\n    out[2] = az * bw + aw * bz + ax * by - ay * bx;\n    out[3] = aw * bw - ax * bx - ay * by - az * bz;\n    return out;\n};\n\n/**\n * Alias for {@link quat.multiply}\n * @function\n */\nquat.mul = quat.multiply;\n\n/**\n * Scales a quat by a scalar number\n *\n * @param {quat} out the receiving vector\n * @param {quat} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {quat} out\n * @function\n */\nquat.scale = vec4.scale;\n\n/**\n * Rotates a quaternion by the given angle about the X axis\n *\n * @param {quat} out quat receiving operation result\n * @param {quat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\nquat.rotateX = function (out, a, rad) {\n    rad *= 0.5; \n\n    var ax = a[0], ay = a[1], az = a[2], aw = a[3],\n        bx = Math.sin(rad), bw = Math.cos(rad);\n\n    out[0] = ax * bw + aw * bx;\n    out[1] = ay * bw + az * bx;\n    out[2] = az * bw - ay * bx;\n    out[3] = aw * bw - ax * bx;\n    return out;\n};\n\n/**\n * Rotates a quaternion by the given angle about the Y axis\n *\n * @param {quat} out quat receiving operation result\n * @param {quat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\nquat.rotateY = function (out, a, rad) {\n    rad *= 0.5; \n\n    var ax = a[0], ay = a[1], az = a[2], aw = a[3],\n        by = Math.sin(rad), bw = Math.cos(rad);\n\n    out[0] = ax * bw - az * by;\n    out[1] = ay * bw + aw * by;\n    out[2] = az * bw + ax * by;\n    out[3] = aw * bw - ay * by;\n    return out;\n};\n\n/**\n * Rotates a quaternion by the given angle about the Z axis\n *\n * @param {quat} out quat receiving operation result\n * @param {quat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\nquat.rotateZ = function (out, a, rad) {\n    rad *= 0.5; \n\n    var ax = a[0], ay = a[1], az = a[2], aw = a[3],\n        bz = Math.sin(rad), bw = Math.cos(rad);\n\n    out[0] = ax * bw + ay * bz;\n    out[1] = ay * bw - ax * bz;\n    out[2] = az * bw + aw * bz;\n    out[3] = aw * bw - az * bz;\n    return out;\n};\n\n/**\n * Calculates the W component of a quat from the X, Y, and Z components.\n * Assumes that quaternion is 1 unit in length.\n * Any existing W component will be ignored.\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a quat to calculate W component of\n * @returns {quat} out\n */\nquat.calculateW = function (out, a) {\n    var x = a[0], y = a[1], z = a[2];\n\n    out[0] = x;\n    out[1] = y;\n    out[2] = z;\n    out[3] = Math.sqrt(Math.abs(1.0 - x * x - y * y - z * z));\n    return out;\n};\n\n/**\n * Calculates the dot product of two quat's\n *\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @returns {Number} dot product of a and b\n * @function\n */\nquat.dot = vec4.dot;\n\n/**\n * Performs a linear interpolation between two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @param {Number} t interpolation amount between the two inputs\n * @returns {quat} out\n * @function\n */\nquat.lerp = vec4.lerp;\n\n/**\n * Performs a spherical linear interpolation between two quat\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @param {Number} t interpolation amount between the two inputs\n * @returns {quat} out\n */\nquat.slerp = function (out, a, b, t) {\n    // benchmarks:\n    //    http://jsperf.com/quaternion-slerp-implementations\n\n    var ax = a[0], ay = a[1], az = a[2], aw = a[3],\n        bx = b[0], by = b[1], bz = b[2], bw = b[3];\n\n    var        omega, cosom, sinom, scale0, scale1;\n\n    // calc cosine\n    cosom = ax * bx + ay * by + az * bz + aw * bw;\n    // adjust signs (if necessary)\n    if ( cosom < 0.0 ) {\n        cosom = -cosom;\n        bx = - bx;\n        by = - by;\n        bz = - bz;\n        bw = - bw;\n    }\n    // calculate coefficients\n    if ( (1.0 - cosom) > 0.000001 ) {\n        // standard case (slerp)\n        omega  = Math.acos(cosom);\n        sinom  = Math.sin(omega);\n        scale0 = Math.sin((1.0 - t) * omega) / sinom;\n        scale1 = Math.sin(t * omega) / sinom;\n    } else {        \n        // \"from\" and \"to\" quaternions are very close \n        //  ... so we can do a linear interpolation\n        scale0 = 1.0 - t;\n        scale1 = t;\n    }\n    // calculate final values\n    out[0] = scale0 * ax + scale1 * bx;\n    out[1] = scale0 * ay + scale1 * by;\n    out[2] = scale0 * az + scale1 * bz;\n    out[3] = scale0 * aw + scale1 * bw;\n    \n    return out;\n};\n\n/**\n * Performs a spherical linear interpolation with two control points\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @param {quat} c the third operand\n * @param {quat} d the fourth operand\n * @param {Number} t interpolation amount\n * @returns {quat} out\n */\nquat.sqlerp = (function () {\n  var temp1 = quat.create();\n  var temp2 = quat.create();\n  \n  return function (out, a, b, c, d, t) {\n    quat.slerp(temp1, a, d, t);\n    quat.slerp(temp2, b, c, t);\n    quat.slerp(out, temp1, temp2, 2 * t * (1 - t));\n    \n    return out;\n  };\n}());\n\n/**\n * Calculates the inverse of a quat\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a quat to calculate inverse of\n * @returns {quat} out\n */\nquat.invert = function(out, a) {\n    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3],\n        dot = a0*a0 + a1*a1 + a2*a2 + a3*a3,\n        invDot = dot ? 1.0/dot : 0;\n    \n    // TODO: Would be faster to return [0,0,0,0] immediately if dot == 0\n\n    out[0] = -a0*invDot;\n    out[1] = -a1*invDot;\n    out[2] = -a2*invDot;\n    out[3] = a3*invDot;\n    return out;\n};\n\n/**\n * Calculates the conjugate of a quat\n * If the quaternion is normalized, this function is faster than quat.inverse and produces the same result.\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a quat to calculate conjugate of\n * @returns {quat} out\n */\nquat.conjugate = function (out, a) {\n    out[0] = -a[0];\n    out[1] = -a[1];\n    out[2] = -a[2];\n    out[3] = a[3];\n    return out;\n};\n\n/**\n * Calculates the length of a quat\n *\n * @param {quat} a vector to calculate length of\n * @returns {Number} length of a\n * @function\n */\nquat.length = vec4.length;\n\n/**\n * Alias for {@link quat.length}\n * @function\n */\nquat.len = quat.length;\n\n/**\n * Calculates the squared length of a quat\n *\n * @param {quat} a vector to calculate squared length of\n * @returns {Number} squared length of a\n * @function\n */\nquat.squaredLength = vec4.squaredLength;\n\n/**\n * Alias for {@link quat.squaredLength}\n * @function\n */\nquat.sqrLen = quat.squaredLength;\n\n/**\n * Normalize a quat\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a quaternion to normalize\n * @returns {quat} out\n * @function\n */\nquat.normalize = vec4.normalize;\n\n/**\n * Creates a quaternion from the given 3x3 rotation matrix.\n *\n * NOTE: The resultant quaternion is not normalized, so you should be sure\n * to renormalize the quaternion yourself where necessary.\n *\n * @param {quat} out the receiving quaternion\n * @param {mat3} m rotation matrix\n * @returns {quat} out\n * @function\n */\nquat.fromMat3 = function(out, m) {\n    // Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes\n    // article \"Quaternion Calculus and Fast Animation\".\n    var fTrace = m[0] + m[4] + m[8];\n    var fRoot;\n\n    if ( fTrace > 0.0 ) {\n        // |w| > 1/2, may as well choose w > 1/2\n        fRoot = Math.sqrt(fTrace + 1.0);  // 2w\n        out[3] = 0.5 * fRoot;\n        fRoot = 0.5/fRoot;  // 1/(4w)\n        out[0] = (m[5]-m[7])*fRoot;\n        out[1] = (m[6]-m[2])*fRoot;\n        out[2] = (m[1]-m[3])*fRoot;\n    } else {\n        // |w| <= 1/2\n        var i = 0;\n        if ( m[4] > m[0] )\n          i = 1;\n        if ( m[8] > m[i*3+i] )\n          i = 2;\n        var j = (i+1)%3;\n        var k = (i+2)%3;\n        \n        fRoot = Math.sqrt(m[i*3+i]-m[j*3+j]-m[k*3+k] + 1.0);\n        out[i] = 0.5 * fRoot;\n        fRoot = 0.5 / fRoot;\n        out[3] = (m[j*3+k] - m[k*3+j]) * fRoot;\n        out[j] = (m[j*3+i] + m[i*3+j]) * fRoot;\n        out[k] = (m[k*3+i] + m[i*3+k]) * fRoot;\n    }\n    \n    return out;\n};\n\n/**\n * Returns a string representation of a quatenion\n *\n * @param {quat} vec vector to represent as a string\n * @returns {String} string representation of the vector\n */\nquat.str = function (a) {\n    return 'quat(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';\n};\n\n/**\n * Returns whether or not the quaternions have exactly the same elements in the same position (when compared with ===)\n *\n * @param {quat} a The first quaternion.\n * @param {quat} b The second quaternion.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nquat.exactEquals = vec4.exactEquals;\n\n/**\n * Returns whether or not the quaternions have approximately the same elements in the same position.\n *\n * @param {quat} a The first vector.\n * @param {quat} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nquat.equals = vec4.equals;\n\nmodule.exports = quat;\n\n},{\"./common.js\":2,\"./mat3.js\":5,\"./vec3.js\":9,\"./vec4.js\":10}],8:[function(_dereq_,module,exports){\n/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE. */\n\nvar glMatrix = _dereq_(\"./common.js\");\n\n/**\n * @class 2 Dimensional Vector\n * @name vec2\n */\nvar vec2 = {};\n\n/**\n * Creates a new, empty vec2\n *\n * @returns {vec2} a new 2D vector\n */\nvec2.create = function() {\n    var out = new glMatrix.ARRAY_TYPE(2);\n    out[0] = 0;\n    out[1] = 0;\n    return out;\n};\n\n/**\n * Creates a new vec2 initialized with values from an existing vector\n *\n * @param {vec2} a vector to clone\n * @returns {vec2} a new 2D vector\n */\nvec2.clone = function(a) {\n    var out = new glMatrix.ARRAY_TYPE(2);\n    out[0] = a[0];\n    out[1] = a[1];\n    return out;\n};\n\n/**\n * Creates a new vec2 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @returns {vec2} a new 2D vector\n */\nvec2.fromValues = function(x, y) {\n    var out = new glMatrix.ARRAY_TYPE(2);\n    out[0] = x;\n    out[1] = y;\n    return out;\n};\n\n/**\n * Copy the values from one vec2 to another\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the source vector\n * @returns {vec2} out\n */\nvec2.copy = function(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    return out;\n};\n\n/**\n * Set the components of a vec2 to the given values\n *\n * @param {vec2} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @returns {vec2} out\n */\nvec2.set = function(out, x, y) {\n    out[0] = x;\n    out[1] = y;\n    return out;\n};\n\n/**\n * Adds two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nvec2.add = function(out, a, b) {\n    out[0] = a[0] + b[0];\n    out[1] = a[1] + b[1];\n    return out;\n};\n\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nvec2.subtract = function(out, a, b) {\n    out[0] = a[0] - b[0];\n    out[1] = a[1] - b[1];\n    return out;\n};\n\n/**\n * Alias for {@link vec2.subtract}\n * @function\n */\nvec2.sub = vec2.subtract;\n\n/**\n * Multiplies two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nvec2.multiply = function(out, a, b) {\n    out[0] = a[0] * b[0];\n    out[1] = a[1] * b[1];\n    return out;\n};\n\n/**\n * Alias for {@link vec2.multiply}\n * @function\n */\nvec2.mul = vec2.multiply;\n\n/**\n * Divides two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nvec2.divide = function(out, a, b) {\n    out[0] = a[0] / b[0];\n    out[1] = a[1] / b[1];\n    return out;\n};\n\n/**\n * Alias for {@link vec2.divide}\n * @function\n */\nvec2.div = vec2.divide;\n\n/**\n * Math.ceil the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to ceil\n * @returns {vec2} out\n */\nvec2.ceil = function (out, a) {\n    out[0] = Math.ceil(a[0]);\n    out[1] = Math.ceil(a[1]);\n    return out;\n};\n\n/**\n * Math.floor the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to floor\n * @returns {vec2} out\n */\nvec2.floor = function (out, a) {\n    out[0] = Math.floor(a[0]);\n    out[1] = Math.floor(a[1]);\n    return out;\n};\n\n/**\n * Returns the minimum of two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nvec2.min = function(out, a, b) {\n    out[0] = Math.min(a[0], b[0]);\n    out[1] = Math.min(a[1], b[1]);\n    return out;\n};\n\n/**\n * Returns the maximum of two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nvec2.max = function(out, a, b) {\n    out[0] = Math.max(a[0], b[0]);\n    out[1] = Math.max(a[1], b[1]);\n    return out;\n};\n\n/**\n * Math.round the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to round\n * @returns {vec2} out\n */\nvec2.round = function (out, a) {\n    out[0] = Math.round(a[0]);\n    out[1] = Math.round(a[1]);\n    return out;\n};\n\n/**\n * Scales a vec2 by a scalar number\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec2} out\n */\nvec2.scale = function(out, a, b) {\n    out[0] = a[0] * b;\n    out[1] = a[1] * b;\n    return out;\n};\n\n/**\n * Adds two vec2's after scaling the second operand by a scalar value\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec2} out\n */\nvec2.scaleAndAdd = function(out, a, b, scale) {\n    out[0] = a[0] + (b[0] * scale);\n    out[1] = a[1] + (b[1] * scale);\n    return out;\n};\n\n/**\n * Calculates the euclidian distance between two vec2's\n *\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {Number} distance between a and b\n */\nvec2.distance = function(a, b) {\n    var x = b[0] - a[0],\n        y = b[1] - a[1];\n    return Math.sqrt(x*x + y*y);\n};\n\n/**\n * Alias for {@link vec2.distance}\n * @function\n */\nvec2.dist = vec2.distance;\n\n/**\n * Calculates the squared euclidian distance between two vec2's\n *\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {Number} squared distance between a and b\n */\nvec2.squaredDistance = function(a, b) {\n    var x = b[0] - a[0],\n        y = b[1] - a[1];\n    return x*x + y*y;\n};\n\n/**\n * Alias for {@link vec2.squaredDistance}\n * @function\n */\nvec2.sqrDist = vec2.squaredDistance;\n\n/**\n * Calculates the length of a vec2\n *\n * @param {vec2} a vector to calculate length of\n * @returns {Number} length of a\n */\nvec2.length = function (a) {\n    var x = a[0],\n        y = a[1];\n    return Math.sqrt(x*x + y*y);\n};\n\n/**\n * Alias for {@link vec2.length}\n * @function\n */\nvec2.len = vec2.length;\n\n/**\n * Calculates the squared length of a vec2\n *\n * @param {vec2} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\nvec2.squaredLength = function (a) {\n    var x = a[0],\n        y = a[1];\n    return x*x + y*y;\n};\n\n/**\n * Alias for {@link vec2.squaredLength}\n * @function\n */\nvec2.sqrLen = vec2.squaredLength;\n\n/**\n * Negates the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to negate\n * @returns {vec2} out\n */\nvec2.negate = function(out, a) {\n    out[0] = -a[0];\n    out[1] = -a[1];\n    return out;\n};\n\n/**\n * Returns the inverse of the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to invert\n * @returns {vec2} out\n */\nvec2.inverse = function(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  return out;\n};\n\n/**\n * Normalize a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to normalize\n * @returns {vec2} out\n */\nvec2.normalize = function(out, a) {\n    var x = a[0],\n        y = a[1];\n    var len = x*x + y*y;\n    if (len > 0) {\n        //TODO: evaluate use of glm_invsqrt here?\n        len = 1 / Math.sqrt(len);\n        out[0] = a[0] * len;\n        out[1] = a[1] * len;\n    }\n    return out;\n};\n\n/**\n * Calculates the dot product of two vec2's\n *\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {Number} dot product of a and b\n */\nvec2.dot = function (a, b) {\n    return a[0] * b[0] + a[1] * b[1];\n};\n\n/**\n * Computes the cross product of two vec2's\n * Note that the cross product must by definition produce a 3D vector\n *\n * @param {vec3} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec3} out\n */\nvec2.cross = function(out, a, b) {\n    var z = a[0] * b[1] - a[1] * b[0];\n    out[0] = out[1] = 0;\n    out[2] = z;\n    return out;\n};\n\n/**\n * Performs a linear interpolation between two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @param {Number} t interpolation amount between the two inputs\n * @returns {vec2} out\n */\nvec2.lerp = function (out, a, b, t) {\n    var ax = a[0],\n        ay = a[1];\n    out[0] = ax + t * (b[0] - ax);\n    out[1] = ay + t * (b[1] - ay);\n    return out;\n};\n\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec2} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec2} out\n */\nvec2.random = function (out, scale) {\n    scale = scale || 1.0;\n    var r = glMatrix.RANDOM() * 2.0 * Math.PI;\n    out[0] = Math.cos(r) * scale;\n    out[1] = Math.sin(r) * scale;\n    return out;\n};\n\n/**\n * Transforms the vec2 with a mat2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to transform\n * @param {mat2} m matrix to transform with\n * @returns {vec2} out\n */\nvec2.transformMat2 = function(out, a, m) {\n    var x = a[0],\n        y = a[1];\n    out[0] = m[0] * x + m[2] * y;\n    out[1] = m[1] * x + m[3] * y;\n    return out;\n};\n\n/**\n * Transforms the vec2 with a mat2d\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to transform\n * @param {mat2d} m matrix to transform with\n * @returns {vec2} out\n */\nvec2.transformMat2d = function(out, a, m) {\n    var x = a[0],\n        y = a[1];\n    out[0] = m[0] * x + m[2] * y + m[4];\n    out[1] = m[1] * x + m[3] * y + m[5];\n    return out;\n};\n\n/**\n * Transforms the vec2 with a mat3\n * 3rd vector component is implicitly '1'\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to transform\n * @param {mat3} m matrix to transform with\n * @returns {vec2} out\n */\nvec2.transformMat3 = function(out, a, m) {\n    var x = a[0],\n        y = a[1];\n    out[0] = m[0] * x + m[3] * y + m[6];\n    out[1] = m[1] * x + m[4] * y + m[7];\n    return out;\n};\n\n/**\n * Transforms the vec2 with a mat4\n * 3rd vector component is implicitly '0'\n * 4th vector component is implicitly '1'\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to transform\n * @param {mat4} m matrix to transform with\n * @returns {vec2} out\n */\nvec2.transformMat4 = function(out, a, m) {\n    var x = a[0], \n        y = a[1];\n    out[0] = m[0] * x + m[4] * y + m[12];\n    out[1] = m[1] * x + m[5] * y + m[13];\n    return out;\n};\n\n/**\n * Perform some operation over an array of vec2s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec2. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec2s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\nvec2.forEach = (function() {\n    var vec = vec2.create();\n\n    return function(a, stride, offset, count, fn, arg) {\n        var i, l;\n        if(!stride) {\n            stride = 2;\n        }\n\n        if(!offset) {\n            offset = 0;\n        }\n        \n        if(count) {\n            l = Math.min((count * stride) + offset, a.length);\n        } else {\n            l = a.length;\n        }\n\n        for(i = offset; i < l; i += stride) {\n            vec[0] = a[i]; vec[1] = a[i+1];\n            fn(vec, vec, arg);\n            a[i] = vec[0]; a[i+1] = vec[1];\n        }\n        \n        return a;\n    };\n})();\n\n/**\n * Returns a string representation of a vector\n *\n * @param {vec2} vec vector to represent as a string\n * @returns {String} string representation of the vector\n */\nvec2.str = function (a) {\n    return 'vec2(' + a[0] + ', ' + a[1] + ')';\n};\n\n/**\n * Returns whether or not the vectors exactly have the same elements in the same position (when compared with ===)\n *\n * @param {vec2} a The first vector.\n * @param {vec2} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nvec2.exactEquals = function (a, b) {\n    return a[0] === b[0] && a[1] === b[1];\n};\n\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {vec2} a The first vector.\n * @param {vec2} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nvec2.equals = function (a, b) {\n    var a0 = a[0], a1 = a[1];\n    var b0 = b[0], b1 = b[1];\n    return (Math.abs(a0 - b0) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n            Math.abs(a1 - b1) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a1), Math.abs(b1)));\n};\n\nmodule.exports = vec2;\n\n},{\"./common.js\":2}],9:[function(_dereq_,module,exports){\n/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE. */\n\nvar glMatrix = _dereq_(\"./common.js\");\n\n/**\n * @class 3 Dimensional Vector\n * @name vec3\n */\nvar vec3 = {};\n\n/**\n * Creates a new, empty vec3\n *\n * @returns {vec3} a new 3D vector\n */\nvec3.create = function() {\n    var out = new glMatrix.ARRAY_TYPE(3);\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n    return out;\n};\n\n/**\n * Creates a new vec3 initialized with values from an existing vector\n *\n * @param {vec3} a vector to clone\n * @returns {vec3} a new 3D vector\n */\nvec3.clone = function(a) {\n    var out = new glMatrix.ARRAY_TYPE(3);\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    return out;\n};\n\n/**\n * Creates a new vec3 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} a new 3D vector\n */\nvec3.fromValues = function(x, y, z) {\n    var out = new glMatrix.ARRAY_TYPE(3);\n    out[0] = x;\n    out[1] = y;\n    out[2] = z;\n    return out;\n};\n\n/**\n * Copy the values from one vec3 to another\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the source vector\n * @returns {vec3} out\n */\nvec3.copy = function(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    return out;\n};\n\n/**\n * Set the components of a vec3 to the given values\n *\n * @param {vec3} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} out\n */\nvec3.set = function(out, x, y, z) {\n    out[0] = x;\n    out[1] = y;\n    out[2] = z;\n    return out;\n};\n\n/**\n * Adds two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nvec3.add = function(out, a, b) {\n    out[0] = a[0] + b[0];\n    out[1] = a[1] + b[1];\n    out[2] = a[2] + b[2];\n    return out;\n};\n\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nvec3.subtract = function(out, a, b) {\n    out[0] = a[0] - b[0];\n    out[1] = a[1] - b[1];\n    out[2] = a[2] - b[2];\n    return out;\n};\n\n/**\n * Alias for {@link vec3.subtract}\n * @function\n */\nvec3.sub = vec3.subtract;\n\n/**\n * Multiplies two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nvec3.multiply = function(out, a, b) {\n    out[0] = a[0] * b[0];\n    out[1] = a[1] * b[1];\n    out[2] = a[2] * b[2];\n    return out;\n};\n\n/**\n * Alias for {@link vec3.multiply}\n * @function\n */\nvec3.mul = vec3.multiply;\n\n/**\n * Divides two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nvec3.divide = function(out, a, b) {\n    out[0] = a[0] / b[0];\n    out[1] = a[1] / b[1];\n    out[2] = a[2] / b[2];\n    return out;\n};\n\n/**\n * Alias for {@link vec3.divide}\n * @function\n */\nvec3.div = vec3.divide;\n\n/**\n * Math.ceil the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to ceil\n * @returns {vec3} out\n */\nvec3.ceil = function (out, a) {\n    out[0] = Math.ceil(a[0]);\n    out[1] = Math.ceil(a[1]);\n    out[2] = Math.ceil(a[2]);\n    return out;\n};\n\n/**\n * Math.floor the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to floor\n * @returns {vec3} out\n */\nvec3.floor = function (out, a) {\n    out[0] = Math.floor(a[0]);\n    out[1] = Math.floor(a[1]);\n    out[2] = Math.floor(a[2]);\n    return out;\n};\n\n/**\n * Returns the minimum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nvec3.min = function(out, a, b) {\n    out[0] = Math.min(a[0], b[0]);\n    out[1] = Math.min(a[1], b[1]);\n    out[2] = Math.min(a[2], b[2]);\n    return out;\n};\n\n/**\n * Returns the maximum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nvec3.max = function(out, a, b) {\n    out[0] = Math.max(a[0], b[0]);\n    out[1] = Math.max(a[1], b[1]);\n    out[2] = Math.max(a[2], b[2]);\n    return out;\n};\n\n/**\n * Math.round the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to round\n * @returns {vec3} out\n */\nvec3.round = function (out, a) {\n    out[0] = Math.round(a[0]);\n    out[1] = Math.round(a[1]);\n    out[2] = Math.round(a[2]);\n    return out;\n};\n\n/**\n * Scales a vec3 by a scalar number\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec3} out\n */\nvec3.scale = function(out, a, b) {\n    out[0] = a[0] * b;\n    out[1] = a[1] * b;\n    out[2] = a[2] * b;\n    return out;\n};\n\n/**\n * Adds two vec3's after scaling the second operand by a scalar value\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec3} out\n */\nvec3.scaleAndAdd = function(out, a, b, scale) {\n    out[0] = a[0] + (b[0] * scale);\n    out[1] = a[1] + (b[1] * scale);\n    out[2] = a[2] + (b[2] * scale);\n    return out;\n};\n\n/**\n * Calculates the euclidian distance between two vec3's\n *\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {Number} distance between a and b\n */\nvec3.distance = function(a, b) {\n    var x = b[0] - a[0],\n        y = b[1] - a[1],\n        z = b[2] - a[2];\n    return Math.sqrt(x*x + y*y + z*z);\n};\n\n/**\n * Alias for {@link vec3.distance}\n * @function\n */\nvec3.dist = vec3.distance;\n\n/**\n * Calculates the squared euclidian distance between two vec3's\n *\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {Number} squared distance between a and b\n */\nvec3.squaredDistance = function(a, b) {\n    var x = b[0] - a[0],\n        y = b[1] - a[1],\n        z = b[2] - a[2];\n    return x*x + y*y + z*z;\n};\n\n/**\n * Alias for {@link vec3.squaredDistance}\n * @function\n */\nvec3.sqrDist = vec3.squaredDistance;\n\n/**\n * Calculates the length of a vec3\n *\n * @param {vec3} a vector to calculate length of\n * @returns {Number} length of a\n */\nvec3.length = function (a) {\n    var x = a[0],\n        y = a[1],\n        z = a[2];\n    return Math.sqrt(x*x + y*y + z*z);\n};\n\n/**\n * Alias for {@link vec3.length}\n * @function\n */\nvec3.len = vec3.length;\n\n/**\n * Calculates the squared length of a vec3\n *\n * @param {vec3} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\nvec3.squaredLength = function (a) {\n    var x = a[0],\n        y = a[1],\n        z = a[2];\n    return x*x + y*y + z*z;\n};\n\n/**\n * Alias for {@link vec3.squaredLength}\n * @function\n */\nvec3.sqrLen = vec3.squaredLength;\n\n/**\n * Negates the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to negate\n * @returns {vec3} out\n */\nvec3.negate = function(out, a) {\n    out[0] = -a[0];\n    out[1] = -a[1];\n    out[2] = -a[2];\n    return out;\n};\n\n/**\n * Returns the inverse of the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to invert\n * @returns {vec3} out\n */\nvec3.inverse = function(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  return out;\n};\n\n/**\n * Normalize a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to normalize\n * @returns {vec3} out\n */\nvec3.normalize = function(out, a) {\n    var x = a[0],\n        y = a[1],\n        z = a[2];\n    var len = x*x + y*y + z*z;\n    if (len > 0) {\n        //TODO: evaluate use of glm_invsqrt here?\n        len = 1 / Math.sqrt(len);\n        out[0] = a[0] * len;\n        out[1] = a[1] * len;\n        out[2] = a[2] * len;\n    }\n    return out;\n};\n\n/**\n * Calculates the dot product of two vec3's\n *\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {Number} dot product of a and b\n */\nvec3.dot = function (a, b) {\n    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n};\n\n/**\n * Computes the cross product of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nvec3.cross = function(out, a, b) {\n    var ax = a[0], ay = a[1], az = a[2],\n        bx = b[0], by = b[1], bz = b[2];\n\n    out[0] = ay * bz - az * by;\n    out[1] = az * bx - ax * bz;\n    out[2] = ax * by - ay * bx;\n    return out;\n};\n\n/**\n * Performs a linear interpolation between two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @param {Number} t interpolation amount between the two inputs\n * @returns {vec3} out\n */\nvec3.lerp = function (out, a, b, t) {\n    var ax = a[0],\n        ay = a[1],\n        az = a[2];\n    out[0] = ax + t * (b[0] - ax);\n    out[1] = ay + t * (b[1] - ay);\n    out[2] = az + t * (b[2] - az);\n    return out;\n};\n\n/**\n * Performs a hermite interpolation with two control points\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @param {vec3} c the third operand\n * @param {vec3} d the fourth operand\n * @param {Number} t interpolation amount between the two inputs\n * @returns {vec3} out\n */\nvec3.hermite = function (out, a, b, c, d, t) {\n  var factorTimes2 = t * t,\n      factor1 = factorTimes2 * (2 * t - 3) + 1,\n      factor2 = factorTimes2 * (t - 2) + t,\n      factor3 = factorTimes2 * (t - 1),\n      factor4 = factorTimes2 * (3 - 2 * t);\n  \n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  \n  return out;\n};\n\n/**\n * Performs a bezier interpolation with two control points\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @param {vec3} c the third operand\n * @param {vec3} d the fourth operand\n * @param {Number} t interpolation amount between the two inputs\n * @returns {vec3} out\n */\nvec3.bezier = function (out, a, b, c, d, t) {\n  var inverseFactor = 1 - t,\n      inverseFactorTimesTwo = inverseFactor * inverseFactor,\n      factorTimes2 = t * t,\n      factor1 = inverseFactorTimesTwo * inverseFactor,\n      factor2 = 3 * t * inverseFactorTimesTwo,\n      factor3 = 3 * factorTimes2 * inverseFactor,\n      factor4 = factorTimes2 * t;\n  \n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  \n  return out;\n};\n\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec3} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec3} out\n */\nvec3.random = function (out, scale) {\n    scale = scale || 1.0;\n\n    var r = glMatrix.RANDOM() * 2.0 * Math.PI;\n    var z = (glMatrix.RANDOM() * 2.0) - 1.0;\n    var zScale = Math.sqrt(1.0-z*z) * scale;\n\n    out[0] = Math.cos(r) * zScale;\n    out[1] = Math.sin(r) * zScale;\n    out[2] = z * scale;\n    return out;\n};\n\n/**\n * Transforms the vec3 with a mat4.\n * 4th vector component is implicitly '1'\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to transform\n * @param {mat4} m matrix to transform with\n * @returns {vec3} out\n */\nvec3.transformMat4 = function(out, a, m) {\n    var x = a[0], y = a[1], z = a[2],\n        w = m[3] * x + m[7] * y + m[11] * z + m[15];\n    w = w || 1.0;\n    out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\n    out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\n    out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\n    return out;\n};\n\n/**\n * Transforms the vec3 with a mat3.\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to transform\n * @param {mat4} m the 3x3 matrix to transform with\n * @returns {vec3} out\n */\nvec3.transformMat3 = function(out, a, m) {\n    var x = a[0], y = a[1], z = a[2];\n    out[0] = x * m[0] + y * m[3] + z * m[6];\n    out[1] = x * m[1] + y * m[4] + z * m[7];\n    out[2] = x * m[2] + y * m[5] + z * m[8];\n    return out;\n};\n\n/**\n * Transforms the vec3 with a quat\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to transform\n * @param {quat} q quaternion to transform with\n * @returns {vec3} out\n */\nvec3.transformQuat = function(out, a, q) {\n    // benchmarks: http://jsperf.com/quaternion-transform-vec3-implementations\n\n    var x = a[0], y = a[1], z = a[2],\n        qx = q[0], qy = q[1], qz = q[2], qw = q[3],\n\n        // calculate quat * vec\n        ix = qw * x + qy * z - qz * y,\n        iy = qw * y + qz * x - qx * z,\n        iz = qw * z + qx * y - qy * x,\n        iw = -qx * x - qy * y - qz * z;\n\n    // calculate result * inverse quat\n    out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n    out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n    out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n    return out;\n};\n\n/**\n * Rotate a 3D vector around the x-axis\n * @param {vec3} out The receiving vec3\n * @param {vec3} a The vec3 point to rotate\n * @param {vec3} b The origin of the rotation\n * @param {Number} c The angle of rotation\n * @returns {vec3} out\n */\nvec3.rotateX = function(out, a, b, c){\n   var p = [], r=[];\n\t  //Translate point to the origin\n\t  p[0] = a[0] - b[0];\n\t  p[1] = a[1] - b[1];\n  \tp[2] = a[2] - b[2];\n\n\t  //perform rotation\n\t  r[0] = p[0];\n\t  r[1] = p[1]*Math.cos(c) - p[2]*Math.sin(c);\n\t  r[2] = p[1]*Math.sin(c) + p[2]*Math.cos(c);\n\n\t  //translate to correct position\n\t  out[0] = r[0] + b[0];\n\t  out[1] = r[1] + b[1];\n\t  out[2] = r[2] + b[2];\n\n  \treturn out;\n};\n\n/**\n * Rotate a 3D vector around the y-axis\n * @param {vec3} out The receiving vec3\n * @param {vec3} a The vec3 point to rotate\n * @param {vec3} b The origin of the rotation\n * @param {Number} c The angle of rotation\n * @returns {vec3} out\n */\nvec3.rotateY = function(out, a, b, c){\n  \tvar p = [], r=[];\n  \t//Translate point to the origin\n  \tp[0] = a[0] - b[0];\n  \tp[1] = a[1] - b[1];\n  \tp[2] = a[2] - b[2];\n  \n  \t//perform rotation\n  \tr[0] = p[2]*Math.sin(c) + p[0]*Math.cos(c);\n  \tr[1] = p[1];\n  \tr[2] = p[2]*Math.cos(c) - p[0]*Math.sin(c);\n  \n  \t//translate to correct position\n  \tout[0] = r[0] + b[0];\n  \tout[1] = r[1] + b[1];\n  \tout[2] = r[2] + b[2];\n  \n  \treturn out;\n};\n\n/**\n * Rotate a 3D vector around the z-axis\n * @param {vec3} out The receiving vec3\n * @param {vec3} a The vec3 point to rotate\n * @param {vec3} b The origin of the rotation\n * @param {Number} c The angle of rotation\n * @returns {vec3} out\n */\nvec3.rotateZ = function(out, a, b, c){\n  \tvar p = [], r=[];\n  \t//Translate point to the origin\n  \tp[0] = a[0] - b[0];\n  \tp[1] = a[1] - b[1];\n  \tp[2] = a[2] - b[2];\n  \n  \t//perform rotation\n  \tr[0] = p[0]*Math.cos(c) - p[1]*Math.sin(c);\n  \tr[1] = p[0]*Math.sin(c) + p[1]*Math.cos(c);\n  \tr[2] = p[2];\n  \n  \t//translate to correct position\n  \tout[0] = r[0] + b[0];\n  \tout[1] = r[1] + b[1];\n  \tout[2] = r[2] + b[2];\n  \n  \treturn out;\n};\n\n/**\n * Perform some operation over an array of vec3s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\nvec3.forEach = (function() {\n    var vec = vec3.create();\n\n    return function(a, stride, offset, count, fn, arg) {\n        var i, l;\n        if(!stride) {\n            stride = 3;\n        }\n\n        if(!offset) {\n            offset = 0;\n        }\n        \n        if(count) {\n            l = Math.min((count * stride) + offset, a.length);\n        } else {\n            l = a.length;\n        }\n\n        for(i = offset; i < l; i += stride) {\n            vec[0] = a[i]; vec[1] = a[i+1]; vec[2] = a[i+2];\n            fn(vec, vec, arg);\n            a[i] = vec[0]; a[i+1] = vec[1]; a[i+2] = vec[2];\n        }\n        \n        return a;\n    };\n})();\n\n/**\n * Get the angle between two 3D vectors\n * @param {vec3} a The first operand\n * @param {vec3} b The second operand\n * @returns {Number} The angle in radians\n */\nvec3.angle = function(a, b) {\n   \n    var tempA = vec3.fromValues(a[0], a[1], a[2]);\n    var tempB = vec3.fromValues(b[0], b[1], b[2]);\n \n    vec3.normalize(tempA, tempA);\n    vec3.normalize(tempB, tempB);\n \n    var cosine = vec3.dot(tempA, tempB);\n\n    if(cosine > 1.0){\n        return 0;\n    } else {\n        return Math.acos(cosine);\n    }     \n};\n\n/**\n * Returns a string representation of a vector\n *\n * @param {vec3} vec vector to represent as a string\n * @returns {String} string representation of the vector\n */\nvec3.str = function (a) {\n    return 'vec3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ')';\n};\n\n/**\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\n *\n * @param {vec3} a The first vector.\n * @param {vec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nvec3.exactEquals = function (a, b) {\n    return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\n};\n\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {vec3} a The first vector.\n * @param {vec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nvec3.equals = function (a, b) {\n    var a0 = a[0], a1 = a[1], a2 = a[2];\n    var b0 = b[0], b1 = b[1], b2 = b[2];\n    return (Math.abs(a0 - b0) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n            Math.abs(a1 - b1) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\n            Math.abs(a2 - b2) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a2), Math.abs(b2)));\n};\n\nmodule.exports = vec3;\n\n},{\"./common.js\":2}],10:[function(_dereq_,module,exports){\n/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE. */\n\nvar glMatrix = _dereq_(\"./common.js\");\n\n/**\n * @class 4 Dimensional Vector\n * @name vec4\n */\nvar vec4 = {};\n\n/**\n * Creates a new, empty vec4\n *\n * @returns {vec4} a new 4D vector\n */\nvec4.create = function() {\n    var out = new glMatrix.ARRAY_TYPE(4);\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    return out;\n};\n\n/**\n * Creates a new vec4 initialized with values from an existing vector\n *\n * @param {vec4} a vector to clone\n * @returns {vec4} a new 4D vector\n */\nvec4.clone = function(a) {\n    var out = new glMatrix.ARRAY_TYPE(4);\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    return out;\n};\n\n/**\n * Creates a new vec4 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {vec4} a new 4D vector\n */\nvec4.fromValues = function(x, y, z, w) {\n    var out = new glMatrix.ARRAY_TYPE(4);\n    out[0] = x;\n    out[1] = y;\n    out[2] = z;\n    out[3] = w;\n    return out;\n};\n\n/**\n * Copy the values from one vec4 to another\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the source vector\n * @returns {vec4} out\n */\nvec4.copy = function(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    return out;\n};\n\n/**\n * Set the components of a vec4 to the given values\n *\n * @param {vec4} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {vec4} out\n */\nvec4.set = function(out, x, y, z, w) {\n    out[0] = x;\n    out[1] = y;\n    out[2] = z;\n    out[3] = w;\n    return out;\n};\n\n/**\n * Adds two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {vec4} out\n */\nvec4.add = function(out, a, b) {\n    out[0] = a[0] + b[0];\n    out[1] = a[1] + b[1];\n    out[2] = a[2] + b[2];\n    out[3] = a[3] + b[3];\n    return out;\n};\n\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {vec4} out\n */\nvec4.subtract = function(out, a, b) {\n    out[0] = a[0] - b[0];\n    out[1] = a[1] - b[1];\n    out[2] = a[2] - b[2];\n    out[3] = a[3] - b[3];\n    return out;\n};\n\n/**\n * Alias for {@link vec4.subtract}\n * @function\n */\nvec4.sub = vec4.subtract;\n\n/**\n * Multiplies two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {vec4} out\n */\nvec4.multiply = function(out, a, b) {\n    out[0] = a[0] * b[0];\n    out[1] = a[1] * b[1];\n    out[2] = a[2] * b[2];\n    out[3] = a[3] * b[3];\n    return out;\n};\n\n/**\n * Alias for {@link vec4.multiply}\n * @function\n */\nvec4.mul = vec4.multiply;\n\n/**\n * Divides two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {vec4} out\n */\nvec4.divide = function(out, a, b) {\n    out[0] = a[0] / b[0];\n    out[1] = a[1] / b[1];\n    out[2] = a[2] / b[2];\n    out[3] = a[3] / b[3];\n    return out;\n};\n\n/**\n * Alias for {@link vec4.divide}\n * @function\n */\nvec4.div = vec4.divide;\n\n/**\n * Math.ceil the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a vector to ceil\n * @returns {vec4} out\n */\nvec4.ceil = function (out, a) {\n    out[0] = Math.ceil(a[0]);\n    out[1] = Math.ceil(a[1]);\n    out[2] = Math.ceil(a[2]);\n    out[3] = Math.ceil(a[3]);\n    return out;\n};\n\n/**\n * Math.floor the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a vector to floor\n * @returns {vec4} out\n */\nvec4.floor = function (out, a) {\n    out[0] = Math.floor(a[0]);\n    out[1] = Math.floor(a[1]);\n    out[2] = Math.floor(a[2]);\n    out[3] = Math.floor(a[3]);\n    return out;\n};\n\n/**\n * Returns the minimum of two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {vec4} out\n */\nvec4.min = function(out, a, b) {\n    out[0] = Math.min(a[0], b[0]);\n    out[1] = Math.min(a[1], b[1]);\n    out[2] = Math.min(a[2], b[2]);\n    out[3] = Math.min(a[3], b[3]);\n    return out;\n};\n\n/**\n * Returns the maximum of two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {vec4} out\n */\nvec4.max = function(out, a, b) {\n    out[0] = Math.max(a[0], b[0]);\n    out[1] = Math.max(a[1], b[1]);\n    out[2] = Math.max(a[2], b[2]);\n    out[3] = Math.max(a[3], b[3]);\n    return out;\n};\n\n/**\n * Math.round the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a vector to round\n * @returns {vec4} out\n */\nvec4.round = function (out, a) {\n    out[0] = Math.round(a[0]);\n    out[1] = Math.round(a[1]);\n    out[2] = Math.round(a[2]);\n    out[3] = Math.round(a[3]);\n    return out;\n};\n\n/**\n * Scales a vec4 by a scalar number\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec4} out\n */\nvec4.scale = function(out, a, b) {\n    out[0] = a[0] * b;\n    out[1] = a[1] * b;\n    out[2] = a[2] * b;\n    out[3] = a[3] * b;\n    return out;\n};\n\n/**\n * Adds two vec4's after scaling the second operand by a scalar value\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec4} out\n */\nvec4.scaleAndAdd = function(out, a, b, scale) {\n    out[0] = a[0] + (b[0] * scale);\n    out[1] = a[1] + (b[1] * scale);\n    out[2] = a[2] + (b[2] * scale);\n    out[3] = a[3] + (b[3] * scale);\n    return out;\n};\n\n/**\n * Calculates the euclidian distance between two vec4's\n *\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {Number} distance between a and b\n */\nvec4.distance = function(a, b) {\n    var x = b[0] - a[0],\n        y = b[1] - a[1],\n        z = b[2] - a[2],\n        w = b[3] - a[3];\n    return Math.sqrt(x*x + y*y + z*z + w*w);\n};\n\n/**\n * Alias for {@link vec4.distance}\n * @function\n */\nvec4.dist = vec4.distance;\n\n/**\n * Calculates the squared euclidian distance between two vec4's\n *\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {Number} squared distance between a and b\n */\nvec4.squaredDistance = function(a, b) {\n    var x = b[0] - a[0],\n        y = b[1] - a[1],\n        z = b[2] - a[2],\n        w = b[3] - a[3];\n    return x*x + y*y + z*z + w*w;\n};\n\n/**\n * Alias for {@link vec4.squaredDistance}\n * @function\n */\nvec4.sqrDist = vec4.squaredDistance;\n\n/**\n * Calculates the length of a vec4\n *\n * @param {vec4} a vector to calculate length of\n * @returns {Number} length of a\n */\nvec4.length = function (a) {\n    var x = a[0],\n        y = a[1],\n        z = a[2],\n        w = a[3];\n    return Math.sqrt(x*x + y*y + z*z + w*w);\n};\n\n/**\n * Alias for {@link vec4.length}\n * @function\n */\nvec4.len = vec4.length;\n\n/**\n * Calculates the squared length of a vec4\n *\n * @param {vec4} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\nvec4.squaredLength = function (a) {\n    var x = a[0],\n        y = a[1],\n        z = a[2],\n        w = a[3];\n    return x*x + y*y + z*z + w*w;\n};\n\n/**\n * Alias for {@link vec4.squaredLength}\n * @function\n */\nvec4.sqrLen = vec4.squaredLength;\n\n/**\n * Negates the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a vector to negate\n * @returns {vec4} out\n */\nvec4.negate = function(out, a) {\n    out[0] = -a[0];\n    out[1] = -a[1];\n    out[2] = -a[2];\n    out[3] = -a[3];\n    return out;\n};\n\n/**\n * Returns the inverse of the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a vector to invert\n * @returns {vec4} out\n */\nvec4.inverse = function(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  out[3] = 1.0 / a[3];\n  return out;\n};\n\n/**\n * Normalize a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a vector to normalize\n * @returns {vec4} out\n */\nvec4.normalize = function(out, a) {\n    var x = a[0],\n        y = a[1],\n        z = a[2],\n        w = a[3];\n    var len = x*x + y*y + z*z + w*w;\n    if (len > 0) {\n        len = 1 / Math.sqrt(len);\n        out[0] = x * len;\n        out[1] = y * len;\n        out[2] = z * len;\n        out[3] = w * len;\n    }\n    return out;\n};\n\n/**\n * Calculates the dot product of two vec4's\n *\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {Number} dot product of a and b\n */\nvec4.dot = function (a, b) {\n    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];\n};\n\n/**\n * Performs a linear interpolation between two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @param {Number} t interpolation amount between the two inputs\n * @returns {vec4} out\n */\nvec4.lerp = function (out, a, b, t) {\n    var ax = a[0],\n        ay = a[1],\n        az = a[2],\n        aw = a[3];\n    out[0] = ax + t * (b[0] - ax);\n    out[1] = ay + t * (b[1] - ay);\n    out[2] = az + t * (b[2] - az);\n    out[3] = aw + t * (b[3] - aw);\n    return out;\n};\n\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec4} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec4} out\n */\nvec4.random = function (out, scale) {\n    scale = scale || 1.0;\n\n    //TODO: This is a pretty awful way of doing this. Find something better.\n    out[0] = glMatrix.RANDOM();\n    out[1] = glMatrix.RANDOM();\n    out[2] = glMatrix.RANDOM();\n    out[3] = glMatrix.RANDOM();\n    vec4.normalize(out, out);\n    vec4.scale(out, out, scale);\n    return out;\n};\n\n/**\n * Transforms the vec4 with a mat4.\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the vector to transform\n * @param {mat4} m matrix to transform with\n * @returns {vec4} out\n */\nvec4.transformMat4 = function(out, a, m) {\n    var x = a[0], y = a[1], z = a[2], w = a[3];\n    out[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;\n    out[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;\n    out[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;\n    out[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;\n    return out;\n};\n\n/**\n * Transforms the vec4 with a quat\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the vector to transform\n * @param {quat} q quaternion to transform with\n * @returns {vec4} out\n */\nvec4.transformQuat = function(out, a, q) {\n    var x = a[0], y = a[1], z = a[2],\n        qx = q[0], qy = q[1], qz = q[2], qw = q[3],\n\n        // calculate quat * vec\n        ix = qw * x + qy * z - qz * y,\n        iy = qw * y + qz * x - qx * z,\n        iz = qw * z + qx * y - qy * x,\n        iw = -qx * x - qy * y - qz * z;\n\n    // calculate result * inverse quat\n    out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n    out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n    out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n    out[3] = a[3];\n    return out;\n};\n\n/**\n * Perform some operation over an array of vec4s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec4. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec4s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\nvec4.forEach = (function() {\n    var vec = vec4.create();\n\n    return function(a, stride, offset, count, fn, arg) {\n        var i, l;\n        if(!stride) {\n            stride = 4;\n        }\n\n        if(!offset) {\n            offset = 0;\n        }\n        \n        if(count) {\n            l = Math.min((count * stride) + offset, a.length);\n        } else {\n            l = a.length;\n        }\n\n        for(i = offset; i < l; i += stride) {\n            vec[0] = a[i]; vec[1] = a[i+1]; vec[2] = a[i+2]; vec[3] = a[i+3];\n            fn(vec, vec, arg);\n            a[i] = vec[0]; a[i+1] = vec[1]; a[i+2] = vec[2]; a[i+3] = vec[3];\n        }\n        \n        return a;\n    };\n})();\n\n/**\n * Returns a string representation of a vector\n *\n * @param {vec4} vec vector to represent as a string\n * @returns {String} string representation of the vector\n */\nvec4.str = function (a) {\n    return 'vec4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';\n};\n\n/**\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\n *\n * @param {vec4} a The first vector.\n * @param {vec4} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nvec4.exactEquals = function (a, b) {\n    return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\n};\n\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {vec4} a The first vector.\n * @param {vec4} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nvec4.equals = function (a, b) {\n    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];\n    var b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3];\n    return (Math.abs(a0 - b0) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n            Math.abs(a1 - b1) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\n            Math.abs(a2 - b2) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&\n            Math.abs(a3 - b3) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a3), Math.abs(b3)));\n};\n\nmodule.exports = vec4;\n\n},{\"./common.js\":2}],11:[function(_dereq_,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n// Scheduler.js\nvar FRAMERATE = 60;\n\nvar Scheduler = function () {\n\tfunction Scheduler() {\n\t\t_classCallCheck(this, Scheduler);\n\n\t\tthis._delayTasks = [];\n\t\tthis._nextTasks = [];\n\t\tthis._deferTasks = [];\n\t\tthis._highTasks = [];\n\t\tthis._usurpTask = [];\n\t\tthis._enterframeTasks = [];\n\t\tthis._idTable = 0;\n\n\t\tthis._loop();\n\t}\n\n\t//  PUBLIC METHODS\n\n\t_createClass(Scheduler, [{\n\t\tkey: \"addEF\",\n\t\tvalue: function addEF(func, params) {\n\t\t\tparams = params || [];\n\t\t\tvar id = this._idTable;\n\t\t\tthis._enterframeTasks[id] = { func: func, params: params };\n\t\t\tthis._idTable++;\n\t\t\treturn id;\n\t\t}\n\t}, {\n\t\tkey: \"removeEF\",\n\t\tvalue: function removeEF(id) {\n\t\t\tif (this._enterframeTasks[id] !== undefined) {\n\t\t\t\tthis._enterframeTasks[id] = null;\n\t\t\t}\n\t\t\treturn -1;\n\t\t}\n\t}, {\n\t\tkey: \"delay\",\n\t\tvalue: function delay(func, params, _delay) {\n\t\t\tvar time = new Date().getTime();\n\t\t\tvar t = { func: func, params: params, delay: _delay, time: time };\n\t\t\tthis._delayTasks.push(t);\n\t\t}\n\t}, {\n\t\tkey: \"defer\",\n\t\tvalue: function defer(func, params) {\n\t\t\tvar t = { func: func, params: params };\n\t\t\tthis._deferTasks.push(t);\n\t\t}\n\t}, {\n\t\tkey: \"next\",\n\t\tvalue: function next(func, params) {\n\t\t\tvar t = { func: func, params: params };\n\t\t\tthis._nextTasks.push(t);\n\t\t}\n\t}, {\n\t\tkey: \"usurp\",\n\t\tvalue: function usurp(func, params) {\n\t\t\tvar t = { func: func, params: params };\n\t\t\tthis._usurpTask.push(t);\n\t\t}\n\n\t\t//  PRIVATE METHODS\n\n\t}, {\n\t\tkey: \"_process\",\n\t\tvalue: function _process() {\n\t\t\tvar i = 0;\n\t\t\tvar task = void 0;\n\t\t\tvar interval = void 0;\n\t\t\tvar current = void 0;\n\t\t\tfor (i = 0; i < this._enterframeTasks.length; i++) {\n\t\t\t\ttask = this._enterframeTasks[i];\n\t\t\t\tif (task !== null && task !== undefined) {\n\t\t\t\t\ttask.func(task.params);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\twhile (this._highTasks.length > 0) {\n\t\t\t\ttask = this._highTasks.pop();\n\t\t\t\ttask.func(task.params);\n\t\t\t}\n\n\t\t\tvar startTime = new Date().getTime();\n\n\t\t\tfor (i = 0; i < this._delayTasks.length; i++) {\n\t\t\t\ttask = this._delayTasks[i];\n\t\t\t\tif (startTime - task.time > task.delay) {\n\t\t\t\t\ttask.func(task.params);\n\t\t\t\t\tthis._delayTasks.splice(i, 1);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tstartTime = new Date().getTime();\n\t\t\tinterval = 1000 / FRAMERATE;\n\t\t\twhile (this._deferTasks.length > 0) {\n\t\t\t\ttask = this._deferTasks.shift();\n\t\t\t\tcurrent = new Date().getTime();\n\t\t\t\tif (current - startTime < interval) {\n\t\t\t\t\ttask.func(task.params);\n\t\t\t\t} else {\n\t\t\t\t\tthis._deferTasks.unshift(task);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tstartTime = new Date().getTime();\n\t\t\tinterval = 1000 / FRAMERATE;\n\t\t\twhile (this._usurpTask.length > 0) {\n\t\t\t\ttask = this._usurpTask.shift();\n\t\t\t\tcurrent = new Date().getTime();\n\t\t\t\tif (current - startTime < interval) {\n\t\t\t\t\ttask.func(task.params);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis._highTasks = this._highTasks.concat(this._nextTasks);\n\t\t\tthis._nextTasks = [];\n\t\t\tthis._usurpTask = [];\n\t\t}\n\t}, {\n\t\tkey: \"_loop\",\n\t\tvalue: function _loop() {\n\t\t\tvar _this = this;\n\n\t\t\tthis._process();\n\t\t\twindow.requestAnimationFrame(function () {\n\t\t\t\treturn _this._loop();\n\t\t\t});\n\t\t}\n\t}]);\n\n\treturn Scheduler;\n}();\n\nvar scheduler = new Scheduler();\n\nexports.default = scheduler;\n},{}],12:[function(_dereq_,module,exports){\n'use strict';\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); // alfrid.js\n\n//\tTOOLS\n\n\n//\tCAMERAS\n\n\n//\tLOADERS\n\n\n//\tHELPERS\n\n\n//\tPOST\n\n\nvar _glMatrix = _dereq_('gl-matrix');\n\nvar _glMatrix2 = _interopRequireDefault(_glMatrix);\n\nvar _GLTool = _dereq_('./alfrid/GLTool');\n\nvar _GLTool2 = _interopRequireDefault(_GLTool);\n\nvar _GLShader = _dereq_('./alfrid/GLShader');\n\nvar _GLShader2 = _interopRequireDefault(_GLShader);\n\nvar _GLTexture = _dereq_('./alfrid/GLTexture');\n\nvar _GLTexture2 = _interopRequireDefault(_GLTexture);\n\nvar _GLCubeTexture = _dereq_('./alfrid/GLCubeTexture');\n\nvar _GLCubeTexture2 = _interopRequireDefault(_GLCubeTexture);\n\nvar _Mesh = _dereq_('./alfrid/Mesh');\n\nvar _Mesh2 = _interopRequireDefault(_Mesh);\n\nvar _Geom = _dereq_('./alfrid/Geom');\n\nvar _Geom2 = _interopRequireDefault(_Geom);\n\nvar _Batch = _dereq_('./alfrid/Batch');\n\nvar _Batch2 = _interopRequireDefault(_Batch);\n\nvar _FrameBuffer = _dereq_('./alfrid/FrameBuffer');\n\nvar _FrameBuffer2 = _interopRequireDefault(_FrameBuffer);\n\nvar _CubeFrameBuffer = _dereq_('./alfrid/CubeFrameBuffer');\n\nvar _CubeFrameBuffer2 = _interopRequireDefault(_CubeFrameBuffer);\n\nvar _scheduling = _dereq_('scheduling');\n\nvar _scheduling2 = _interopRequireDefault(_scheduling);\n\nvar _EventDispatcher = _dereq_('./alfrid/tools/EventDispatcher');\n\nvar _EventDispatcher2 = _interopRequireDefault(_EventDispatcher);\n\nvar _EaseNumber = _dereq_('./alfrid/tools/EaseNumber');\n\nvar _EaseNumber2 = _interopRequireDefault(_EaseNumber);\n\nvar _OrbitalControl = _dereq_('./alfrid/tools/OrbitalControl');\n\nvar _OrbitalControl2 = _interopRequireDefault(_OrbitalControl);\n\nvar _QuatRotation = _dereq_('./alfrid/tools/QuatRotation');\n\nvar _QuatRotation2 = _interopRequireDefault(_QuatRotation);\n\nvar _Camera = _dereq_('./alfrid/cameras/Camera');\n\nvar _Camera2 = _interopRequireDefault(_Camera);\n\nvar _CameraOrtho = _dereq_('./alfrid/cameras/CameraOrtho');\n\nvar _CameraOrtho2 = _interopRequireDefault(_CameraOrtho);\n\nvar _CameraPerspective = _dereq_('./alfrid/cameras/CameraPerspective');\n\nvar _CameraPerspective2 = _interopRequireDefault(_CameraPerspective);\n\nvar _CameraCube = _dereq_('./alfrid/cameras/CameraCube');\n\nvar _CameraCube2 = _interopRequireDefault(_CameraCube);\n\nvar _BinaryLoader = _dereq_('./alfrid/loaders/BinaryLoader');\n\nvar _BinaryLoader2 = _interopRequireDefault(_BinaryLoader);\n\nvar _ObjLoader = _dereq_('./alfrid/loaders/ObjLoader');\n\nvar _ObjLoader2 = _interopRequireDefault(_ObjLoader);\n\nvar _HDRLoader = _dereq_('./alfrid/loaders/HDRLoader');\n\nvar _HDRLoader2 = _interopRequireDefault(_HDRLoader);\n\nvar _BatchCopy = _dereq_('./alfrid/helpers/BatchCopy');\n\nvar _BatchCopy2 = _interopRequireDefault(_BatchCopy);\n\nvar _BatchAxis = _dereq_('./alfrid/helpers/BatchAxis');\n\nvar _BatchAxis2 = _interopRequireDefault(_BatchAxis);\n\nvar _BatchBall = _dereq_('./alfrid/helpers/BatchBall');\n\nvar _BatchBall2 = _interopRequireDefault(_BatchBall);\n\nvar _BatchDotsPlane = _dereq_('./alfrid/helpers/BatchDotsPlane');\n\nvar _BatchDotsPlane2 = _interopRequireDefault(_BatchDotsPlane);\n\nvar _BatchSkybox = _dereq_('./alfrid/helpers/BatchSkybox');\n\nvar _BatchSkybox2 = _interopRequireDefault(_BatchSkybox);\n\nvar _Scene = _dereq_('./alfrid/helpers/Scene');\n\nvar _Scene2 = _interopRequireDefault(_Scene);\n\nvar _View = _dereq_('./alfrid/helpers/View');\n\nvar _View2 = _interopRequireDefault(_View);\n\nvar _ShaderLibs = _dereq_('./alfrid/tools/ShaderLibs');\n\nvar _ShaderLibs2 = _interopRequireDefault(_ShaderLibs);\n\nvar _EffectComposer = _dereq_('./alfrid/post/EffectComposer');\n\nvar _EffectComposer2 = _interopRequireDefault(_EffectComposer);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar VERSION = '0.0.1';\n\nvar alfrid = function () {\n\tfunction alfrid() {\n\t\t_classCallCheck(this, alfrid);\n\n\t\tthis.glm = _glMatrix2.default;\n\t\tthis.GL = _GLTool2.default;\n\t\tthis.GLTool = _GLTool2.default;\n\t\tthis.GLShader = _GLShader2.default;\n\t\tthis.GLTexture = _GLTexture2.default;\n\t\tthis.GLCubeTexture = _GLCubeTexture2.default;\n\t\tthis.Mesh = _Mesh2.default;\n\t\tthis.Geom = _Geom2.default;\n\t\tthis.Batch = _Batch2.default;\n\t\tthis.FrameBuffer = _FrameBuffer2.default;\n\t\tthis.CubeFrameBuffer = _CubeFrameBuffer2.default;\n\t\tthis.Scheduler = _scheduling2.default;\n\t\tthis.EventDispatcher = _EventDispatcher2.default;\n\t\tthis.EaseNumber = _EaseNumber2.default;\n\t\tthis.Camera = _Camera2.default;\n\t\tthis.CameraOrtho = _CameraOrtho2.default;\n\t\tthis.CameraPerspective = _CameraPerspective2.default;\n\t\tthis.CameraCube = _CameraCube2.default;\n\t\tthis.OrbitalControl = _OrbitalControl2.default;\n\t\tthis.QuatRotation = _QuatRotation2.default;\n\t\tthis.BinaryLoader = _BinaryLoader2.default;\n\t\tthis.ObjLoader = _ObjLoader2.default;\n\t\tthis.HDRLoader = _HDRLoader2.default;\n\t\tthis.BatchCopy = _BatchCopy2.default;\n\t\tthis.BatchAxis = _BatchAxis2.default;\n\t\tthis.BatchBall = _BatchBall2.default;\n\t\tthis.BatchBall = _BatchBall2.default;\n\t\tthis.BatchSkybox = _BatchSkybox2.default;\n\t\tthis.BatchDotsPlane = _BatchDotsPlane2.default;\n\t\tthis.Scene = _Scene2.default;\n\t\tthis.View = _View2.default;\n\t\tthis.EffectComposer = _EffectComposer2.default;\n\t\tthis.ShaderLibs = _ShaderLibs2.default;\n\n\t\t//\tNOT SUPER SURE I'VE DONE THIS IS A GOOD WAY\n\n\t\tfor (var s in _glMatrix2.default) {\n\t\t\tif (_glMatrix2.default[s]) {\n\t\t\t\twindow[s] = _glMatrix2.default[s];\n\t\t\t}\n\t\t}\n\t}\n\n\t_createClass(alfrid, [{\n\t\tkey: 'log',\n\t\tvalue: function log() {\n\t\t\tif (navigator.userAgent.indexOf('Chrome') > -1) {\n\t\t\t\tconsole.log('%clib alfrid : VERSION ' + VERSION, 'background: #193441; color: #FCFFF5');\n\t\t\t} else {\n\t\t\t\tconsole.log('lib alfrid : VERSION ', VERSION);\n\t\t\t}\n\t\t\tconsole.log('%cClasses : ', 'color: #193441');\n\n\t\t\tfor (var s in this) {\n\t\t\t\tif (this[s]) {\n\t\t\t\t\tconsole.log('%c - ' + s, 'color: #3E606F');\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}]);\n\n\treturn alfrid;\n}();\n\nvar b = new alfrid();\n\nmodule.exports = b;\n\n},{\"./alfrid/Batch\":13,\"./alfrid/CubeFrameBuffer\":14,\"./alfrid/FrameBuffer\":15,\"./alfrid/GLCubeTexture\":16,\"./alfrid/GLShader\":17,\"./alfrid/GLTexture\":18,\"./alfrid/GLTool\":19,\"./alfrid/Geom\":20,\"./alfrid/Mesh\":21,\"./alfrid/cameras/Camera\":22,\"./alfrid/cameras/CameraCube\":23,\"./alfrid/cameras/CameraOrtho\":24,\"./alfrid/cameras/CameraPerspective\":25,\"./alfrid/helpers/BatchAxis\":26,\"./alfrid/helpers/BatchBall\":27,\"./alfrid/helpers/BatchCopy\":28,\"./alfrid/helpers/BatchDotsPlane\":29,\"./alfrid/helpers/BatchSkybox\":30,\"./alfrid/helpers/Scene\":31,\"./alfrid/helpers/View\":32,\"./alfrid/loaders/BinaryLoader\":33,\"./alfrid/loaders/HDRLoader\":34,\"./alfrid/loaders/ObjLoader\":35,\"./alfrid/post/EffectComposer\":36,\"./alfrid/tools/EaseNumber\":37,\"./alfrid/tools/EventDispatcher\":38,\"./alfrid/tools/OrbitalControl\":40,\"./alfrid/tools/QuatRotation\":41,\"./alfrid/tools/ShaderLibs\":42,\"gl-matrix\":1,\"scheduling\":11}],13:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); // Batch.js\n\nvar _GLTool = _dereq_('./GLTool');\n\nvar _GLTool2 = _interopRequireDefault(_GLTool);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar Batch = function () {\n\tfunction Batch(mMesh, mShader) {\n\t\t_classCallCheck(this, Batch);\n\n\t\tthis._mesh = mMesh;\n\t\tthis._shader = mShader;\n\t}\n\n\t//\tPUBLIC METHODS\n\n\t_createClass(Batch, [{\n\t\tkey: 'draw',\n\t\tvalue: function draw() {\n\t\t\tthis._shader.bind();\n\t\t\t_GLTool2.default.draw(this.mesh);\n\t\t}\n\n\t\t//\tGETTER AND SETTER\n\n\t}, {\n\t\tkey: 'mesh',\n\t\tget: function get() {\n\t\t\treturn this._mesh;\n\t\t}\n\t}, {\n\t\tkey: 'shader',\n\t\tget: function get() {\n\t\t\treturn this._shader;\n\t\t}\n\t}]);\n\n\treturn Batch;\n}();\n\nexports.default = Batch;\n\n},{\"./GLTool\":19}],14:[function(_dereq_,module,exports){\n// CubeFrameBuffer.js\n\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _GLTool = _dereq_('./GLTool');\n\nvar _GLTool2 = _interopRequireDefault(_GLTool);\n\nvar _GLCubeTexture = _dereq_('./GLCubeTexture');\n\nvar _GLCubeTexture2 = _interopRequireDefault(_GLCubeTexture);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar gl = void 0;\n\nvar CubeFrameBuffer = function () {\n\tfunction CubeFrameBuffer(size) {\n\t\tvar mParameters = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n\t\t_classCallCheck(this, CubeFrameBuffer);\n\n\t\tgl = _GLTool2.default.gl;\n\t\tthis._size = size;\n\t\tthis.magFilter = mParameters.magFilter || gl.LINEAR;\n\t\tthis.minFilter = mParameters.minFilter || gl.LINEAR;\n\t\tthis.wrapS = mParameters.wrapS || gl.CLAMP_TO_EDGE;\n\t\tthis.wrapT = mParameters.wrapT || gl.CLAMP_TO_EDGE;\n\n\t\tthis._init();\n\t}\n\n\t_createClass(CubeFrameBuffer, [{\n\t\tkey: '_init',\n\t\tvalue: function _init() {\n\t\t\tthis.texture = gl.createTexture();\n\t\t\tthis.glTexture = new _GLCubeTexture2.default(this.texture, {}, true);\n\n\t\t\tgl.bindTexture(gl.TEXTURE_CUBE_MAP, this.texture);\n\t\t\tgl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_MAG_FILTER, this.magFilter);\n\t\t\tgl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_MIN_FILTER, this.minFilter);\n\t\t\tgl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_WRAP_S, this.wrapS);\n\t\t\tgl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_WRAP_T, this.wrapT);\n\n\t\t\tvar targets = [gl.TEXTURE_CUBE_MAP_POSITIVE_X, gl.TEXTURE_CUBE_MAP_NEGATIVE_X, gl.TEXTURE_CUBE_MAP_POSITIVE_Y, gl.TEXTURE_CUBE_MAP_NEGATIVE_Y, gl.TEXTURE_CUBE_MAP_POSITIVE_Z, gl.TEXTURE_CUBE_MAP_NEGATIVE_Z];\n\n\t\t\tfor (var i = 0; i < targets.length; i++) {\n\t\t\t\tgl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, false);\n\t\t\t\tgl.texImage2D(targets[i], 0, gl.RGBA, this.width, this.height, 0, gl.RGBA, gl.FLOAT, null);\n\t\t\t}\n\n\t\t\tthis._frameBuffers = [];\n\t\t\tfor (var _i = 0; _i < targets.length; _i++) {\n\t\t\t\tvar frameBuffer = gl.createFramebuffer();\n\t\t\t\tgl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer);\n\t\t\t\tgl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, targets[_i], this.texture, 0);\n\n\t\t\t\tvar status = gl.checkFramebufferStatus(gl.FRAMEBUFFER);\n\t\t\t\tif (status !== gl.FRAMEBUFFER_COMPLETE) {\n\t\t\t\t\tconsole.log('gl.checkFramebufferStatus() returned ' + status);\n\t\t\t\t}\n\n\t\t\t\tthis._frameBuffers.push(frameBuffer);\n\t\t\t}\n\n\t\t\t// gl.generateMipmap(gl.TEXTURE_CUBE_MAP);\n\t\t\tgl.bindFramebuffer(gl.FRAMEBUFFER, null);\n\t\t\tgl.bindRenderbuffer(gl.RENDERBUFFER, null);\n\t\t\tgl.bindTexture(gl.TEXTURE_CUBE_MAP, null);\n\t\t}\n\t}, {\n\t\tkey: 'bind',\n\t\tvalue: function bind(mTargetIndex) {\n\n\t\t\t// if(Math.random() > .99) console.log('bind :', mTargetIndex, this._frameBuffers[mTargetIndex]);\n\t\t\t_GLTool2.default.viewport(0, 0, this.width, this.height);\n\t\t\tgl.bindFramebuffer(gl.FRAMEBUFFER, this._frameBuffers[mTargetIndex]);\n\t\t}\n\t}, {\n\t\tkey: 'unbind',\n\t\tvalue: function unbind() {\n\t\t\tgl.bindFramebuffer(gl.FRAMEBUFFER, null);\n\t\t\t_GLTool2.default.viewport(0, 0, _GLTool2.default.width, _GLTool2.default.height);\n\t\t}\n\n\t\t//\tTEXTURES\n\n\t}, {\n\t\tkey: 'getTexture',\n\t\tvalue: function getTexture() {\n\t\t\treturn this.glTexture;\n\t\t}\n\n\t\t//\tGETTERS AND SETTERS\n\n\t}, {\n\t\tkey: 'width',\n\t\tget: function get() {\n\t\t\treturn this._size;\n\t\t}\n\t}, {\n\t\tkey: 'height',\n\t\tget: function get() {\n\t\t\treturn this._size;\n\t\t}\n\t}]);\n\n\treturn CubeFrameBuffer;\n}();\n\nexports.default = CubeFrameBuffer;\n\n},{\"./GLCubeTexture\":16,\"./GLTool\":19}],15:[function(_dereq_,module,exports){\n// FrameBuffer.js\n\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _GLTool = _dereq_('./GLTool');\n\nvar _GLTool2 = _interopRequireDefault(_GLTool);\n\nvar _GLTexture = _dereq_('./GLTexture');\n\nvar _GLTexture2 = _interopRequireDefault(_GLTexture);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar isPowerOfTwo = function isPowerOfTwo(x) {\n\treturn x !== 0 && !(x & x - 1);\n};\n\nvar gl = void 0;\nvar WEBGL_depth_texture = void 0;\n\nvar FrameBuffer = function () {\n\tfunction FrameBuffer(mWidth, mHeight) {\n\t\tvar mParameters = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];\n\n\t\t_classCallCheck(this, FrameBuffer);\n\n\t\tgl = _GLTool2.default.gl;\n\t\tWEBGL_depth_texture = _GLTool2.default.checkExtension('WEBGL_depth_texture');\n\n\t\tthis.width = mWidth;\n\t\tthis.height = mHeight;\n\n\t\tthis.magFilter = mParameters.magFilter || gl.LINEAR;\n\t\tthis.minFilter = mParameters.minFilter || gl.LINEAR;\n\t\tthis.wrapS = mParameters.wrapS || gl.CLAMP_TO_EDGE;\n\t\tthis.wrapT = mParameters.wrapT || gl.CLAMP_TO_EDGE;\n\t\tthis.useDepth = mParameters.useDepth || true;\n\t\tthis.useStencil = mParameters.useStencil || false;\n\n\t\tif (!isPowerOfTwo(this.width) || !isPowerOfTwo(this.height)) {\n\t\t\tthis.wrapS = this.wrapT = gl.CLAMP_TO_EDGE;\n\n\t\t\tif (this.minFilter === gl.LINEAR_MIPMAP_NEAREST) {\n\t\t\t\tthis.minFilter = gl.LINEAR;\n\t\t\t}\n\t\t}\n\n\t\tthis._init();\n\t}\n\n\t_createClass(FrameBuffer, [{\n\t\tkey: '_init',\n\t\tvalue: function _init() {\n\t\t\tthis.texture = gl.createTexture();\n\t\t\tthis.glTexture = new _GLTexture2.default(this.texture, true);\n\n\t\t\tthis.depthTexture = gl.createTexture();\n\t\t\tthis.glDepthTexture = new _GLTexture2.default(this.depthTexture, true);\n\n\t\t\tthis.frameBuffer = gl.createFramebuffer();\n\t\t\tgl.bindFramebuffer(gl.FRAMEBUFFER, this.frameBuffer);\n\n\t\t\t//\tSETUP TEXTURE MIPMAP, WRAP\n\n\t\t\tgl.bindTexture(gl.TEXTURE_2D, this.texture);\n\t\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, this.magFilter);\n\t\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, this.minFilter);\n\t\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, this.wrapS);\n\t\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, this.wrapT);\n\t\t\tgl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, this.width, this.height, 0, gl.RGBA, _GLTool2.default.isMobile ? gl.UNSIGNED_BYTE : gl.FLOAT, null);\n\n\t\t\tif (WEBGL_depth_texture) {\n\t\t\t\tgl.bindTexture(gl.TEXTURE_2D, this.depthTexture);\n\t\t\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, this.magFilter);\n\t\t\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, this.minFilter);\n\t\t\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, this.wrapS);\n\t\t\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, this.wrapT);\n\t\t\t\tgl.texImage2D(gl.TEXTURE_2D, 0, gl.DEPTH_COMPONENT, this.width, this.height, 0, gl.DEPTH_COMPONENT, gl.UNSIGNED_SHORT, null);\n\t\t\t}\n\n\t\t\t//\tGET COLOUR\n\n\t\t\tgl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, this.texture, 0);\n\n\t\t\t//\tGET DEPTH\n\n\t\t\tgl.framebufferTexture2D(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.TEXTURE_2D, this.depthTexture, 0);\n\n\t\t\tif (this.minFilter === gl.LINEAR_MIPMAP_NEAREST) {\n\t\t\t\tgl.bindTexture(gl.TEXTURE_2D, this.texture);\n\t\t\t\tgl.generateMipmap(gl.TEXTURE_2D);\n\t\t\t}\n\n\t\t\t//\tUNBIND\n\n\t\t\tgl.bindTexture(gl.TEXTURE_2D, null);\n\t\t\tgl.bindRenderbuffer(gl.RENDERBUFFER, null);\n\t\t\tgl.bindFramebuffer(gl.FRAMEBUFFER, null);\n\n\t\t\t//\tCLEAR FRAMEBUFFER\n\n\t\t\tthis.clear();\n\t\t}\n\n\t\t//\tPUBLIC METHODS\n\n\t}, {\n\t\tkey: 'bind',\n\t\tvalue: function bind() {\n\t\t\t_GLTool2.default.viewport(0, 0, this.width, this.height);\n\t\t\tgl.bindFramebuffer(gl.FRAMEBUFFER, this.frameBuffer);\n\t\t}\n\t}, {\n\t\tkey: 'unbind',\n\t\tvalue: function unbind() {\n\t\t\tgl.bindFramebuffer(gl.FRAMEBUFFER, null);\n\t\t\t_GLTool2.default.viewport(0, 0, _GLTool2.default.width, _GLTool2.default.height);\n\t\t}\n\t}, {\n\t\tkey: 'clear',\n\t\tvalue: function clear() {\n\t\t\tvar r = arguments.length <= 0 || arguments[0] === undefined ? 0 : arguments[0];\n\t\t\tvar g = arguments.length <= 1 || arguments[1] === undefined ? 0 : arguments[1];\n\t\t\tvar b = arguments.length <= 2 || arguments[2] === undefined ? 0 : arguments[2];\n\t\t\tvar a = arguments.length <= 3 || arguments[3] === undefined ? 0 : arguments[3];\n\n\t\t\tthis.bind();\n\t\t\t_GLTool2.default.clear(r, g, b, a);\n\t\t\tthis.unbind();\n\t\t}\n\n\t\t//\tTEXTURES\n\n\t}, {\n\t\tkey: 'getTexture',\n\t\tvalue: function getTexture() {\n\t\t\treturn this.glTexture;\n\t\t}\n\t}, {\n\t\tkey: 'getDepthTexture',\n\t\tvalue: function getDepthTexture() {\n\t\t\treturn this.glDepthTexture;\n\t\t}\n\n\t\t//\tMIPMAP FILTER\n\n\t}, {\n\t\tkey: 'minFilter',\n\t\tvalue: function minFilter(mValue) {\n\t\t\tif (mValue !== gl.LINEAR && mValue !== gl.NEAREST && mValue !== gl.LINEAR_MIPMAP_NEAREST) {\n\t\t\t\treturn this;\n\t\t\t}\n\t\t\tthis.minFilter = mValue;\n\t\t\treturn this;\n\t\t}\n\t}, {\n\t\tkey: 'magFilter',\n\t\tvalue: function magFilter(mValue) {\n\t\t\tif (mValue !== gl.LINEAR && mValue !== gl.NEAREST && mValue !== gl.LINEAR_MIPMAP_NEAREST) {\n\t\t\t\treturn this;\n\t\t\t}\n\t\t\tthis.magFilter = mValue;\n\t\t\treturn this;\n\t\t}\n\n\t\t//\tWRAP\n\n\t}, {\n\t\tkey: 'wrapS',\n\t\tvalue: function wrapS(mValue) {\n\t\t\tif (mValue !== gl.CLAMP_TO_EDGE && mValue !== gl.REPEAT && mValue !== gl.MIRRORED_REPEAT) {\n\t\t\t\treturn this;\n\t\t\t}\n\t\t\tthis.wrapS = mValue;\n\t\t\treturn this;\n\t\t}\n\t}, {\n\t\tkey: 'wrapT',\n\t\tvalue: function wrapT(mValue) {\n\t\t\tif (mValue !== gl.CLAMP_TO_EDGE && mValue !== gl.REPEAT && mValue !== gl.MIRRORED_REPEAT) {\n\t\t\t\treturn this;\n\t\t\t}\n\t\t\tthis.wrapT = mValue;\n\t\t\treturn this;\n\t\t}\n\t}]);\n\n\treturn FrameBuffer;\n}();\n\nexports.default = FrameBuffer;\n\n},{\"./GLTexture\":18,\"./GLTool\":19}],16:[function(_dereq_,module,exports){\n// GLCubeTexture.js\n\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _GLTool = _dereq_('./GLTool');\n\nvar _GLTool2 = _interopRequireDefault(_GLTool);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar gl = void 0;\n\nvar GLCubeTexture = function () {\n\tfunction GLCubeTexture(mSource) {\n\t\tvar mParameters = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\t\tvar isCubeTexture = arguments.length <= 2 || arguments[2] === undefined ? false : arguments[2];\n\n\t\t_classCallCheck(this, GLCubeTexture);\n\n\t\t// console.log(typeof(mSource));\n\t\tgl = _GLTool2.default.gl;\n\n\t\tif (isCubeTexture) {\n\t\t\tthis.texture = mSource;\n\t\t\treturn;\n\t\t}\n\n\t\tthis.texture = gl.createTexture();\n\t\tthis.magFilter = mParameters.magFilter || gl.LINEAR;\n\t\tthis.minFilter = mParameters.minFilter || gl.LINEAR_MIPMAP_NEAREST;\n\t\tthis.wrapS = mParameters.wrapS || gl.CLAMP_TO_EDGE;\n\t\tthis.wrapT = mParameters.wrapT || gl.CLAMP_TO_EDGE;\n\n\t\tgl.bindTexture(gl.TEXTURE_CUBE_MAP, this.texture);\n\t\tvar targets = [gl.TEXTURE_CUBE_MAP_POSITIVE_X, gl.TEXTURE_CUBE_MAP_NEGATIVE_X, gl.TEXTURE_CUBE_MAP_POSITIVE_Y, gl.TEXTURE_CUBE_MAP_NEGATIVE_Y, gl.TEXTURE_CUBE_MAP_POSITIVE_Z, gl.TEXTURE_CUBE_MAP_NEGATIVE_Z];\n\n\t\tfor (var j = 0; j < 6; j++) {\n\t\t\tgl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, false);\n\t\t\t// gl.texImage2D(targets[j], 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, mSource[j]);\t\n\t\t\tif (mSource[j].exposure) {\n\t\t\t\tgl.texImage2D(targets[j], 0, gl.RGBA, mSource[j].shape[0], mSource[j].shape[1], 0, gl.RGBA, gl.FLOAT, mSource[j].data);\n\t\t\t} else {\n\t\t\t\tgl.texImage2D(targets[j], 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, mSource[j]);\n\t\t\t}\n\t\t\tgl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_WRAP_S, this.wrapS);\n\t\t\tgl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_WRAP_T, this.wrapT);\n\t\t\tgl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_MAG_FILTER, this.magFilter);\n\t\t\tgl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_MIN_FILTER, this.minFilter);\n\t\t}\n\n\t\tgl.generateMipmap(gl.TEXTURE_CUBE_MAP);\n\t\tgl.bindTexture(gl.TEXTURE_CUBE_MAP, null);\n\t}\n\n\t//\tPUBLIC METHOD\n\n\t_createClass(GLCubeTexture, [{\n\t\tkey: 'bind',\n\t\tvalue: function bind() {\n\t\t\tvar index = arguments.length <= 0 || arguments[0] === undefined ? 0 : arguments[0];\n\n\t\t\tif (!_GLTool2.default.shader) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tgl.activeTexture(gl.TEXTURE0 + index);\n\t\t\tgl.bindTexture(gl.TEXTURE_CUBE_MAP, this.texture);\n\t\t\tgl.uniform1i(_GLTool2.default.shader.uniformTextures[index], index);\n\t\t\tthis._bindIndex = index;\n\t\t}\n\t}, {\n\t\tkey: 'unbind',\n\t\tvalue: function unbind() {\n\t\t\tgl.bindTexture(gl.TEXTURE_CUBE_MAP, null);\n\t\t}\n\t}]);\n\n\treturn GLCubeTexture;\n}();\n\nexports.default = GLCubeTexture;\n\n},{\"./GLTool\":19}],17:[function(_dereq_,module,exports){\n// GLShader.js\n\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _GLTool = _dereq_('./GLTool');\n\nvar _GLTool2 = _interopRequireDefault(_GLTool);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n\n\nvar addLineNumbers = function addLineNumbers(string) {\n\tvar lines = string.split('\\n');\n\tfor (var i = 0; i < lines.length; i++) {\n\t\tlines[i] = i + 1 + ': ' + lines[i];\n\t}\n\treturn lines.join('\\n');\n};\n\nvar gl = void 0;\nvar defaultVertexShader = \"// basic.vert\\n\\n#define SHADER_NAME BASIC_VERTEX\\n\\nprecision highp float;\\n#define GLSLIFY 1\\nattribute vec3 aVertexPosition;\\nattribute vec2 aTextureCoord;\\n\\nuniform mat4 uModelMatrix;\\nuniform mat4 uViewMatrix;\\nuniform mat4 uProjectionMatrix;\\n\\nvarying vec2 vTextureCoord;\\n\\nvoid main(void) {\\n    gl_Position = uProjectionMatrix * uViewMatrix * uModelMatrix * vec4(aVertexPosition, 1.0);\\n    vTextureCoord = aTextureCoord;\\n}\";\nvar defaultFragmentShader = \"// basic.frag\\n\\n#define SHADER_NAME BASIC_FRAGMENT\\n\\nprecision highp float;\\n#define GLSLIFY 1\\nvarying vec2 vTextureCoord;\\nuniform float time;\\n// uniform sampler2D texture;\\n\\nvoid main(void) {\\n    gl_FragColor = vec4(vTextureCoord, sin(time) * .5 + .5, 1.0);\\n}\";\n\nvar uniform_mapping = {\n\t'float': 'uniform1f',\n\t'vec2': 'uniform2fv',\n\t'vec3': 'uniform3fv',\n\t'vec4': 'uniform4fv',\n\t'int': 'uniform1i',\n\t'mat3': 'uniformMatrix3fv',\n\t'mat4': 'uniformMatrix4fv'\n};\n\nvar GLShader = function () {\n\tfunction GLShader() {\n\t\tvar strVertexShader = arguments.length <= 0 || arguments[0] === undefined ? defaultVertexShader : arguments[0];\n\t\tvar strFragmentShader = arguments.length <= 1 || arguments[1] === undefined ? defaultFragmentShader : arguments[1];\n\n\t\t_classCallCheck(this, GLShader);\n\n\t\tgl = _GLTool2.default.gl;\n\t\tthis.parameters = [];\n\t\tthis.uniformValues = {};\n\t\tthis.uniformTextures = [];\n\n\t\tif (!strVertexShader) {\n\t\t\tstrVertexShader = defaultVertexShader;\n\t\t}\n\t\tif (!strFragmentShader) {\n\t\t\tstrFragmentShader = defaultVertexShader;\n\t\t}\n\n\t\tvar vsShader = this._createShaderProgram(strVertexShader, true);\n\t\tvar fsShader = this._createShaderProgram(strFragmentShader, false);\n\t\tthis._attachShaderProgram(vsShader, fsShader);\n\t}\n\n\t_createClass(GLShader, [{\n\t\tkey: 'bind',\n\t\tvalue: function bind() {\n\n\t\t\tgl.useProgram(this.shaderProgram);\n\t\t\t_GLTool2.default.useShader(this);\n\t\t\tthis.uniformTextures = [];\n\t\t}\n\t}, {\n\t\tkey: 'uniform',\n\t\tvalue: function uniform(mName, mType, mValue) {\n\t\t\tvar uniformType = uniform_mapping[mType] || mType;\n\t\t\tvar hasUniform = false;\n\t\t\tvar oUniform = void 0;\n\n\t\t\tfor (var i = 0; i < this.parameters.length; i++) {\n\t\t\t\toUniform = this.parameters[i];\n\t\t\t\tif (oUniform.name === mName) {\n\t\t\t\t\toUniform.value = mValue;\n\t\t\t\t\thasUniform = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!hasUniform) {\n\t\t\t\tthis.shaderProgram[mName] = gl.getUniformLocation(this.shaderProgram, mName);\n\t\t\t\tthis.parameters.push({ name: mName, type: uniformType, value: mValue, uniformLoc: this.shaderProgram[mName] });\n\t\t\t} else {\n\t\t\t\tthis.shaderProgram[mName] = oUniform.uniformLoc;\n\t\t\t}\n\n\t\t\tif (uniformType.indexOf('Matrix') === -1) {\n\t\t\t\tgl[uniformType](this.shaderProgram[mName], mValue);\n\t\t\t} else {\n\t\t\t\tgl[uniformType](this.shaderProgram[mName], false, mValue);\n\t\t\t\tthis.uniformValues[mName] = mValue;\n\t\t\t}\n\t\t}\n\t}, {\n\t\tkey: '_createShaderProgram',\n\t\tvalue: function _createShaderProgram(mShaderStr, isVertexShader) {\n\n\t\t\tvar shaderType = isVertexShader ? _GLTool2.default.VERTEX_SHADER : _GLTool2.default.FRAGMENT_SHADER;\n\t\t\tvar shader = gl.createShader(shaderType);\n\n\t\t\tgl.shaderSource(shader, mShaderStr);\n\t\t\tgl.compileShader(shader);\n\n\t\t\tif (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\n\t\t\t\tconsole.warn('Error in Shader : ', gl.getShaderInfoLog(shader));\n\t\t\t\tconsole.log(addLineNumbers(mShaderStr));\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\treturn shader;\n\t\t}\n\t}, {\n\t\tkey: '_attachShaderProgram',\n\t\tvalue: function _attachShaderProgram(mVertexShader, mFragmentShader) {\n\n\t\t\tthis.shaderProgram = gl.createProgram();\n\t\t\tgl.attachShader(this.shaderProgram, mVertexShader);\n\t\t\tgl.attachShader(this.shaderProgram, mFragmentShader);\n\t\t\tgl.linkProgram(this.shaderProgram);\n\t\t}\n\t}]);\n\n\treturn GLShader;\n}();\n\nexports.default = GLShader;\n\n},{\"./GLTool\":19}],18:[function(_dereq_,module,exports){\n// GLTexture.js\n\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _GLTool = _dereq_('./GLTool');\n\nvar _GLTool2 = _interopRequireDefault(_GLTool);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar isPowerOfTwo = function isPowerOfTwo(x) {\n\treturn x !== 0 && !(x & x - 1);\n};\n\nvar isSourcePowerOfTwo = function isSourcePowerOfTwo(obj) {\n\tvar w = obj.width || obj.videoWidth;\n\tvar h = obj.height || obj.videoHeight;\n\n\tif (!w || !h) {\n\t\treturn false;\n\t}\n\n\treturn isPowerOfTwo(w) && isPowerOfTwo(h);\n};\n\nvar gl = void 0;\n\nvar GLTexture = function () {\n\tfunction GLTexture(mSource) {\n\t\tvar isTexture = arguments.length <= 1 || arguments[1] === undefined ? false : arguments[1];\n\t\tvar mParameters = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];\n\n\t\t_classCallCheck(this, GLTexture);\n\n\t\tgl = _GLTool2.default.gl;\n\n\t\tif (isTexture) {\n\t\t\tthis.texture = mSource;\n\t\t} else {\n\t\t\tthis._mSource = mSource;\n\t\t\tthis.texture = gl.createTexture();\n\t\t\tthis._isVideo = mSource.tagName === 'VIDEO';\n\t\t\tthis.magFilter = mParameters.magFilter || gl.LINEAR;\n\t\t\tthis.minFilter = mParameters.minFilter || gl.LINEAR_MIPMAP_NEAREST;\n\n\t\t\tthis.wrapS = mParameters.wrapS || gl.MIRRORED_REPEAT;\n\t\t\tthis.wrapT = mParameters.wrapT || gl.MIRRORED_REPEAT;\n\t\t\tvar width = mSource.width || mSource.videoWidth;\n\n\t\t\tif (width) {\n\t\t\t\tif (!isSourcePowerOfTwo(mSource)) {\n\t\t\t\t\tthis.wrapS = this.wrapT = gl.CLAMP_TO_EDGE;\n\t\t\t\t\tif (this.minFilter === gl.LINEAR_MIPMAP_NEAREST) {\n\t\t\t\t\t\tthis.minFilter = gl.LINEAR;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis.wrapS = this.wrapT = gl.CLAMP_TO_EDGE;\n\t\t\t\tif (this.minFilter === gl.LINEAR_MIPMAP_NEAREST) {\n\t\t\t\t\tthis.minFilter = gl.LINEAR;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tgl.bindTexture(gl.TEXTURE_2D, this.texture);\n\t\t\tgl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, true);\n\n\t\t\tif (mSource.exposure) {\n\t\t\t\tgl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, mSource.shape[0], mSource.shape[1], 0, gl.RGBA, gl.FLOAT, mSource.data);\n\t\t\t} else {\n\t\t\t\tgl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, mSource);\n\t\t\t}\n\n\t\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, this.magFilter);\n\t\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, this.minFilter);\n\t\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, this.wrapS);\n\t\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, this.wrapT);\n\n\t\t\tvar ext = _GLTool2.default.getExtension('EXT_texture_filter_anisotropic');\n\t\t\tif (ext) {\n\t\t\t\tvar max = gl.getParameter(ext.MAX_TEXTURE_MAX_ANISOTROPY_EXT);\n\t\t\t\tgl.texParameterf(gl.TEXTURE_2D, ext.TEXTURE_MAX_ANISOTROPY_EXT, max);\n\t\t\t}\n\n\t\t\tif (this.minFilter === gl.LINEAR_MIPMAP_NEAREST) {\n\t\t\t\tgl.generateMipmap(gl.TEXTURE_2D);\n\t\t\t}\n\n\t\t\tgl.bindTexture(gl.TEXTURE_2D, null);\n\t\t}\n\t}\n\n\t//\tMIPMAP FILTER\n\n\t_createClass(GLTexture, [{\n\t\tkey: 'minFilter',\n\t\tvalue: function minFilter(mValue) {\n\t\t\tif (mValue !== gl.LINEAR && mValue !== gl.NEAREST && mValue !== gl.LINEAR_MIPMAP_NEAREST) {\n\t\t\t\treturn this;\n\t\t\t}\n\t\t\tthis.minFilter = mValue;\n\t\t\treturn this;\n\t\t}\n\t}, {\n\t\tkey: 'magFilter',\n\t\tvalue: function magFilter(mValue) {\n\t\t\tif (mValue !== gl.LINEAR && mValue !== gl.NEAREST && mValue !== gl.LINEAR_MIPMAP_NEAREST) {\n\t\t\t\treturn this;\n\t\t\t}\n\t\t\tthis.magFilter = mValue;\n\t\t\treturn this;\n\t\t}\n\n\t\t//\tWRAP\n\n\t}, {\n\t\tkey: 'wrapS',\n\t\tvalue: function wrapS(mValue) {\n\t\t\tif (mValue !== gl.CLAMP_TO_EDGE && mValue !== gl.REPEAT && mValue !== gl.MIRRORED_REPEAT) {\n\t\t\t\treturn this;\n\t\t\t}\n\t\t\tthis.wrapS = mValue;\n\t\t\treturn this;\n\t\t}\n\t}, {\n\t\tkey: 'wrapT',\n\t\tvalue: function wrapT(mValue) {\n\t\t\tif (mValue !== gl.CLAMP_TO_EDGE && mValue !== gl.REPEAT && mValue !== gl.MIRRORED_REPEAT) {\n\t\t\t\treturn this;\n\t\t\t}\n\t\t\tthis.wrapT = mValue;\n\t\t\treturn this;\n\t\t}\n\n\t\t//\tUPDATE TEXTURE\n\n\t}, {\n\t\tkey: 'updateTexture',\n\t\tvalue: function updateTexture(mSource) {\n\t\t\tif (mSource) {\n\t\t\t\tthis._mSource = mSource;\n\t\t\t}\n\t\t\tgl.bindTexture(gl.TEXTURE_2D, this.texture);\n\t\t\tgl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, true);\n\t\t\tgl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, this._mSource);\n\t\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, this.magFilter);\n\t\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, this.minFilter);\n\t\t\tif (this.minFilter === gl.LINEAR_MIPMAP_NEAREST) {\n\t\t\t\tgl.generateMipmap(gl.TEXTURE_2D);\n\t\t\t}\n\n\t\t\tgl.bindTexture(gl.TEXTURE_2D, null);\n\t\t}\n\t}, {\n\t\tkey: 'bind',\n\t\tvalue: function bind(index) {\n\t\t\tif (index === undefined) {\n\t\t\t\tindex = 0;\n\t\t\t}\n\t\t\tif (!_GLTool2.default.shader) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tgl.activeTexture(gl.TEXTURE0 + index);\n\t\t\tgl.bindTexture(gl.TEXTURE_2D, this.texture);\n\t\t\tgl.uniform1i(_GLTool2.default.shader.uniformTextures[index], index);\n\t\t\tthis._bindIndex = index;\n\t\t}\n\t}]);\n\n\treturn GLTexture;\n}();\n\nexports.default = GLTexture;\n\n},{\"./GLTool\":19}],19:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); // GLTool.js\n\nvar _glMatrix = _dereq_('gl-matrix');\n\nvar _glMatrix2 = _interopRequireDefault(_glMatrix);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar GLTool = function () {\n\tfunction GLTool() {\n\t\t_classCallCheck(this, GLTool);\n\n\t\tthis.canvas;\n\t\tthis._viewport = [0, 0, 0, 0];\n\t\tthis._enabledVertexAttribute = [];\n\t\tthis.identityMatrix = _glMatrix2.default.mat4.create();\n\t\tthis._normalMatrix = _glMatrix2.default.mat3.create();\n\t\tthis._inverseModelViewMatrix = _glMatrix2.default.mat3.create();\n\t\tthis._modelMatrix = _glMatrix2.default.mat4.create();\n\t\tthis._matrix = _glMatrix2.default.mat4.create();\n\t\t_glMatrix2.default.mat4.identity(this.identityMatrix, this.identityMatrix);\n\n\t\tthis.isMobile = false;\n\t\tif (/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)) {\n\t\t\tthis.isMobile = true;\n\t\t}\n\t}\n\n\t//\tINITIALIZE\n\n\t_createClass(GLTool, [{\n\t\tkey: 'init',\n\t\tvalue: function init(mCanvas) {\n\t\t\tvar mParameters = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n\n\t\t\tif (mCanvas === null || mCanvas === undefined) {\n\t\t\t\tconsole.error('Canvas not exist');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (this.canvas !== undefined && this.canvas !== null) {\n\t\t\t\tthis.destroy();\n\t\t\t}\n\n\t\t\tthis.canvas = mCanvas;\n\t\t\tthis.setSize(window.innerWidth, window.innerHeight);\n\t\t\tthis.gl = this.canvas.getContext('webgl', mParameters) || this.canvas.getContext('experimental-webgl', mParameters);\n\n\t\t\t//\textensions\n\t\t\tvar extensions = ['EXT_shader_texture_lod', 'EXT_sRGB', 'EXT_frag_depth', 'OES_texture_float', 'OES_texture_half_float', 'OES_texture_float_linear', 'OES_texture_half_float_linear', 'OES_standard_derivatives', 'WEBGL_depth_texture', 'EXT_texture_filter_anisotropic', 'ANGLE_instanced_arrays'];\n\t\t\tthis.extensions = {};\n\t\t\tfor (var i = 0; i < extensions.length; i++) {\n\t\t\t\tthis.extensions[extensions[i]] = this.gl.getExtension(extensions[i]);\n\t\t\t}\n\n\t\t\t//\tCopy gl Attributes\n\t\t\tvar gl = this.gl;\n\t\t\tthis.VERTEX_SHADER = gl.VERTEX_SHADER;\n\t\t\tthis.FRAGMENT_SHADER = gl.FRAGMENT_SHADER;\n\t\t\tthis.COMPILE_STATUS = gl.COMPILE_STATUS;\n\t\t\tthis.DEPTH_TEST = gl.DEPTH_TEST;\n\t\t\tthis.CULL_FACE = gl.CULL_FACE;\n\t\t\tthis.BLEND = gl.BLEND;\n\t\t\tthis.POINTS = gl.POINTS;\n\t\t\tthis.LINES = gl.LINES;\n\t\t\tthis.TRIANGLES = gl.TRIANGLES;\n\n\t\t\tthis.LINEAR = gl.LINEAR;\n\t\t\tthis.NEAREST = gl.NEAREST;\n\t\t\tthis.LINEAR_MIPMAP_NEAREST = gl.LINEAR_MIPMAP_NEAREST;\n\t\t\tthis.MIRRORED_REPEAT = gl.MIRRORED_REPEAT;\n\t\t\tthis.CLAMP_TO_EDGE = gl.CLAMP_TO_EDGE;\n\t\t\tthis.SCISSOR_TEST = gl.SCISSOR_TEST;\n\n\t\t\tthis.enable(this.DEPTH_TEST);\n\t\t\tthis.enable(this.CULL_FACE);\n\t\t\tthis.enable(this.BLEND);\n\t\t}\n\n\t\t//\tPUBLIC METHODS\n\n\t}, {\n\t\tkey: 'setViewport',\n\t\tvalue: function setViewport(x, y, w, h) {\n\t\t\tvar hasChanged = false;\n\t\t\tif (x !== this._viewport[0]) {\n\t\t\t\thasChanged = true;\n\t\t\t}\n\t\t\tif (y !== this._viewport[1]) {\n\t\t\t\thasChanged = true;\n\t\t\t}\n\t\t\tif (w !== this._viewport[2]) {\n\t\t\t\thasChanged = true;\n\t\t\t}\n\t\t\tif (h !== this._viewport[3]) {\n\t\t\t\thasChanged = true;\n\t\t\t}\n\n\t\t\tif (hasChanged) {\n\t\t\t\tthis.gl.viewport(x, y, w, h);\n\t\t\t\tthis._viewport = [x, y, w, h];\n\t\t\t}\n\t\t}\n\t}, {\n\t\tkey: 'scissor',\n\t\tvalue: function scissor(x, y, w, h) {\n\t\t\tthis.gl.scissor(x, y, w, h);\n\t\t}\n\t}, {\n\t\tkey: 'clear',\n\t\tvalue: function clear(r, g, b, a) {\n\t\t\tthis.gl.clearColor(r, g, b, a);\n\t\t\tthis.gl.clear(this.gl.COLOR_BUFFER_BIT | this.gl.DEPTH_BUFFER_BIT);\n\t\t}\n\t}, {\n\t\tkey: 'setMatrices',\n\t\tvalue: function setMatrices(mCamera) {\n\t\t\tthis.camera = mCamera;\n\t\t\tthis.rotate(this.identityMatrix);\n\t\t}\n\t}, {\n\t\tkey: 'useShader',\n\t\tvalue: function useShader(mShader) {\n\t\t\tthis.shader = mShader;\n\t\t\tthis.shaderProgram = this.shader.shaderProgram;\n\t\t}\n\t}, {\n\t\tkey: 'rotate',\n\t\tvalue: function rotate(mRotation) {\n\t\t\t_glMatrix2.default.mat4.copy(this._modelMatrix, mRotation);\n\t\t\t_glMatrix2.default.mat4.multiply(this._matrix, this.camera.matrix, this._modelMatrix);\n\t\t\t_glMatrix2.default.mat3.fromMat4(this._normalMatrix, this._matrix);\n\t\t\t_glMatrix2.default.mat3.invert(this._normalMatrix, this._normalMatrix);\n\t\t\t_glMatrix2.default.mat3.transpose(this._normalMatrix, this._normalMatrix);\n\n\t\t\t_glMatrix2.default.mat3.fromMat4(this._inverseModelViewMatrix, this._matrix);\n\t\t\t_glMatrix2.default.mat3.invert(this._inverseModelViewMatrix, this._inverseModelViewMatrix);\n\t\t}\n\t}, {\n\t\tkey: 'draw',\n\t\tvalue: function draw(mMesh, drawingType) {\n\n\t\t\tif (mMesh.length) {\n\t\t\t\tfor (var i = 0; i < mMesh.length; i++) {\n\t\t\t\t\tthis.draw(mMesh[i]);\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tfunction getAttribLoc(gl, shaderProgram, name) {\n\t\t\t\tif (shaderProgram.cacheAttribLoc === undefined) {\n\t\t\t\t\tshaderProgram.cacheAttribLoc = {};\n\t\t\t\t}\n\t\t\t\tif (shaderProgram.cacheAttribLoc[name] === undefined) {\n\t\t\t\t\tshaderProgram.cacheAttribLoc[name] = gl.getAttribLocation(shaderProgram, name);\n\t\t\t\t}\n\n\t\t\t\treturn shaderProgram.cacheAttribLoc[name];\n\t\t\t}\n\n\t\t\t//\tATTRIBUTES\n\t\t\tfor (var _i = 0; _i < mMesh.attributes.length; _i++) {\n\n\t\t\t\tvar attribute = mMesh.attributes[_i];\n\t\t\t\tthis.gl.bindBuffer(this.gl.ARRAY_BUFFER, attribute.buffer);\n\t\t\t\tvar attrPosition = getAttribLoc(this.gl, this.shaderProgram, attribute.name);\n\t\t\t\tthis.gl.vertexAttribPointer(attrPosition, attribute.itemSize, this.gl.FLOAT, false, 0, 0);\n\n\t\t\t\tif (this._enabledVertexAttribute.indexOf(attrPosition) === -1) {\n\t\t\t\t\tthis.gl.enableVertexAttribArray(attrPosition);\n\t\t\t\t\tthis._enabledVertexAttribute.push(attrPosition);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t//\tBIND INDEX BUFFER\n\n\t\t\tthis.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, mMesh.iBuffer);\n\n\t\t\t//\tDEFAULT MATRICES\n\t\t\tif (this.camera !== undefined) {\n\t\t\t\tthis.shader.uniform('uProjectionMatrix', 'mat4', this.camera.projection);\n\t\t\t\tthis.shader.uniform('uViewMatrix', 'mat4', this.camera.matrix);\n\t\t\t}\n\n\t\t\tthis.shader.uniform('uModelMatrix', 'mat4', this._modelMatrix);\n\t\t\tthis.shader.uniform('uNormalMatrix', 'mat3', this._normalMatrix);\n\t\t\tthis.shader.uniform('uModelViewMatrixInverse', 'mat3', this._inverseModelViewMatrix);\n\n\t\t\tvar drawType = mMesh.drawType;\n\t\t\tif (drawingType !== undefined) {\n\t\t\t\tdrawType = drawingType;\n\t\t\t}\n\n\t\t\t//\tDRAWING\n\t\t\tif (drawType === this.gl.POINTS) {\n\t\t\t\tthis.gl.drawArrays(drawType, 0, mMesh.vertexSize);\n\t\t\t} else {\n\t\t\t\tthis.gl.drawElements(drawType, mMesh.iBuffer.numItems, this.gl.UNSIGNED_SHORT, 0);\n\t\t\t}\n\t\t}\n\t}, {\n\t\tkey: 'setSize',\n\t\tvalue: function setSize(mWidth, mHeight) {\n\t\t\tthis._width = mWidth;\n\t\t\tthis._height = mHeight;\n\t\t\tthis.canvas.width = this._width;\n\t\t\tthis.canvas.height = this._height;\n\t\t\tthis._aspectRatio = this._width / this._height;\n\n\t\t\tif (this.gl) {\n\t\t\t\tthis.viewport(0, 0, this._width, this._height);\n\t\t\t}\n\t\t}\n\t}, {\n\t\tkey: 'showExtensions',\n\t\tvalue: function showExtensions() {\n\t\t\tconsole.log('Extensions : ', this.extensions);\n\t\t\tfor (var ext in this.extensions) {\n\t\t\t\tif (this.extensions[ext]) {\n\t\t\t\t\tconsole.log(ext, ':', this.extensions[ext]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}, {\n\t\tkey: 'checkExtension',\n\t\tvalue: function checkExtension(mExtension) {\n\t\t\treturn !!this.extensions[mExtension];\n\t\t}\n\t}, {\n\t\tkey: 'getExtension',\n\t\tvalue: function getExtension(mExtension) {\n\t\t\treturn this.extensions[mExtension];\n\t\t}\n\n\t\t//\tBLEND MODES\n\n\t}, {\n\t\tkey: 'enableAlphaBlending',\n\t\tvalue: function enableAlphaBlending() {\n\t\t\tthis.gl.blendFunc(this.gl.SRC_ALPHA, this.gl.ONE_MINUS_SRC_ALPHA);\n\t\t}\n\t}, {\n\t\tkey: 'enableAdditiveBlending',\n\t\tvalue: function enableAdditiveBlending() {\n\t\t\tthis.gl.blendFunc(this.gl.ONE, this.gl.ONE);\n\t\t}\n\n\t\t//\tGL NATIVE FUNCTIONS\n\n\t}, {\n\t\tkey: 'enable',\n\t\tvalue: function enable(mParameter) {\n\t\t\tthis.gl.enable(mParameter);\n\t\t}\n\t}, {\n\t\tkey: 'disable',\n\t\tvalue: function disable(mParameter) {\n\t\t\tthis.gl.disable(mParameter);\n\t\t}\n\t}, {\n\t\tkey: 'viewport',\n\t\tvalue: function viewport(x, y, w, h) {\n\t\t\tthis.setViewport(x, y, w, h);\n\t\t}\n\n\t\t//\tGETTER AND SETTERS\n\n\t}, {\n\t\tkey: 'destroy',\n\n\n\t\t//\tDESTROY\n\n\t\tvalue: function destroy() {\n\n\t\t\tif (this.canvas.parentNode) {\n\t\t\t\ttry {\n\t\t\t\t\tthis.canvas.parentNode.removeChild(this.canvas);\n\t\t\t\t} catch (e) {\n\t\t\t\t\tconsole.log('Error : ', e);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.canvas = null;\n\t\t}\n\t}, {\n\t\tkey: 'width',\n\t\tget: function get() {\n\t\t\treturn this._width;\n\t\t}\n\t}, {\n\t\tkey: 'height',\n\t\tget: function get() {\n\t\t\treturn this._height;\n\t\t}\n\t}, {\n\t\tkey: 'aspectRatio',\n\t\tget: function get() {\n\t\t\treturn this._aspectRatio;\n\t\t}\n\t}]);\n\n\treturn GLTool;\n}();\n\nvar GL = new GLTool();\n\nexports.default = GL;\n\n},{\"gl-matrix\":1}],20:[function(_dereq_,module,exports){\n// Geom.js\n\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\n\nvar _Mesh = _dereq_('./Mesh');\n\nvar _Mesh2 = _interopRequireDefault(_Mesh);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar Geom = {};\n\nGeom.plane = function (width, height, numSegments) {\n\tvar withNormals = arguments.length <= 3 || arguments[3] === undefined ? false : arguments[3];\n\tvar axis = arguments.length <= 4 || arguments[4] === undefined ? 'xy' : arguments[4];\n\tvar drawType = arguments.length <= 5 || arguments[5] === undefined ? 4 : arguments[5];\n\n\tvar positions = [];\n\tvar coords = [];\n\tvar indices = [];\n\tvar normals = [];\n\n\tvar gapX = width / numSegments;\n\tvar gapY = height / numSegments;\n\tvar gapUV = 1 / numSegments;\n\tvar index = 0;\n\tvar sx = -width * 0.5;\n\tvar sy = -height * 0.5;\n\n\tfor (var i = 0; i < numSegments; i++) {\n\t\tfor (var j = 0; j < numSegments; j++) {\n\t\t\tvar tx = gapX * i + sx;\n\t\t\tvar ty = gapY * j + sy;\n\n\t\t\tvar u = i / numSegments;\n\t\t\tvar v = j / numSegments;\n\n\t\t\tif (axis === 'xz') {\n\t\t\t\tpositions.push([tx, 0, ty + gapY]);\n\t\t\t\tpositions.push([tx + gapX, 0, ty + gapY]);\n\t\t\t\tpositions.push([tx + gapX, 0, ty]);\n\t\t\t\tpositions.push([tx, 0, ty]);\n\n\t\t\t\tcoords.push([u, 1.0 - (v + gapUV)]);\n\t\t\t\tcoords.push([u + gapUV, 1.0 - (v + gapUV)]);\n\t\t\t\tcoords.push([u + gapUV, 1.0 - v]);\n\t\t\t\tcoords.push([u, 1.0 - v]);\n\n\t\t\t\tnormals.push([0, 1, 0]);\n\t\t\t\tnormals.push([0, 1, 0]);\n\t\t\t\tnormals.push([0, 1, 0]);\n\t\t\t\tnormals.push([0, 1, 0]);\n\t\t\t} else if (axis === 'yz') {\n\t\t\t\tpositions.push([0, ty, tx]);\n\t\t\t\tpositions.push([0, ty, tx + gapX]);\n\t\t\t\tpositions.push([0, ty + gapY, tx + gapX]);\n\t\t\t\tpositions.push([0, ty + gapY, tx]);\n\n\t\t\t\tcoords.push([u, v]);\n\t\t\t\tcoords.push([u + gapUV, v]);\n\t\t\t\tcoords.push([u + gapUV, v + gapUV]);\n\t\t\t\tcoords.push([u, v + gapUV]);\n\n\t\t\t\tnormals.push([1, 0, 0]);\n\t\t\t\tnormals.push([1, 0, 0]);\n\t\t\t\tnormals.push([1, 0, 0]);\n\t\t\t\tnormals.push([1, 0, 0]);\n\t\t\t} else {\n\t\t\t\tpositions.push([tx, ty, 0]);\n\t\t\t\tpositions.push([tx + gapX, ty, 0]);\n\t\t\t\tpositions.push([tx + gapX, ty + gapY, 0]);\n\t\t\t\tpositions.push([tx, ty + gapY, 0]);\n\n\t\t\t\tcoords.push([u, v]);\n\t\t\t\tcoords.push([u + gapUV, v]);\n\t\t\t\tcoords.push([u + gapUV, v + gapUV]);\n\t\t\t\tcoords.push([u, v + gapUV]);\n\n\t\t\t\tnormals.push([0, 0, 1]);\n\t\t\t\tnormals.push([0, 0, 1]);\n\t\t\t\tnormals.push([0, 0, 1]);\n\t\t\t\tnormals.push([0, 0, 1]);\n\t\t\t}\n\n\t\t\tindices.push(index * 4 + 0);\n\t\t\tindices.push(index * 4 + 1);\n\t\t\tindices.push(index * 4 + 2);\n\t\t\tindices.push(index * 4 + 0);\n\t\t\tindices.push(index * 4 + 2);\n\t\t\tindices.push(index * 4 + 3);\n\n\t\t\tindex++;\n\t\t}\n\t}\n\n\tvar mesh = new _Mesh2.default(drawType);\n\tmesh.bufferVertex(positions);\n\tmesh.bufferTexCoords(coords);\n\tmesh.bufferIndices(indices);\n\tif (withNormals) {\n\t\tmesh.bufferNormal(normals);\n\t}\n\n\treturn mesh;\n};\n\nGeom.sphere = function (size, numSegments) {\n\tvar withNormals = arguments.length <= 2 || arguments[2] === undefined ? false : arguments[2];\n\tvar isInvert = arguments.length <= 3 || arguments[3] === undefined ? false : arguments[3];\n\tvar drawType = arguments.length <= 4 || arguments[4] === undefined ? 4 : arguments[4];\n\n\tvar positions = [];\n\tvar coords = [];\n\tvar indices = [];\n\tvar normals = [];\n\tvar index = 0;\n\tvar gapUV = 1 / numSegments;\n\n\tvar getPosition = function getPosition(i, j) {\n\t\tvar isNormal = arguments.length <= 2 || arguments[2] === undefined ? false : arguments[2];\n\t\t//\trx : -90 ~ 90 , ry : 0 ~ 360\n\t\tvar rx = i / numSegments * Math.PI - Math.PI * 0.5;\n\t\tvar ry = j / numSegments * Math.PI * 2;\n\t\tvar r = isNormal ? 1 : size;\n\t\tvar pos = [];\n\t\tpos[1] = Math.sin(rx) * r;\n\t\tvar t = Math.cos(rx) * r;\n\t\tpos[0] = Math.cos(ry) * t;\n\t\tpos[2] = Math.sin(ry) * t;\n\n\t\tvar precision = 10000;\n\t\tpos[0] = Math.floor(pos[0] * precision) / precision;\n\t\tpos[1] = Math.floor(pos[1] * precision) / precision;\n\t\tpos[2] = Math.floor(pos[2] * precision) / precision;\n\n\t\treturn pos;\n\t};\n\n\tfor (var i = 0; i < numSegments; i++) {\n\t\tfor (var j = 0; j < numSegments; j++) {\n\t\t\tpositions.push(getPosition(i, j));\n\t\t\tpositions.push(getPosition(i + 1, j));\n\t\t\tpositions.push(getPosition(i + 1, j + 1));\n\t\t\tpositions.push(getPosition(i, j + 1));\n\n\t\t\tif (withNormals) {\n\t\t\t\tnormals.push(getPosition(i, j, true));\n\t\t\t\tnormals.push(getPosition(i + 1, j, true));\n\t\t\t\tnormals.push(getPosition(i + 1, j + 1, true));\n\t\t\t\tnormals.push(getPosition(i, j + 1, true));\n\t\t\t}\n\n\t\t\tvar u = j / numSegments;\n\t\t\tvar v = i / numSegments;\n\n\t\t\tcoords.push([1.0 - u, v]);\n\t\t\tcoords.push([1.0 - u, v + gapUV]);\n\t\t\tcoords.push([1.0 - u - gapUV, v + gapUV]);\n\t\t\tcoords.push([1.0 - u - gapUV, v]);\n\n\t\t\tindices.push(index * 4 + 0);\n\t\t\tindices.push(index * 4 + 1);\n\t\t\tindices.push(index * 4 + 2);\n\t\t\tindices.push(index * 4 + 0);\n\t\t\tindices.push(index * 4 + 2);\n\t\t\tindices.push(index * 4 + 3);\n\n\t\t\tindex++;\n\t\t}\n\t}\n\n\tif (isInvert) {\n\t\tindices.reverse();\n\t}\n\n\tvar mesh = new _Mesh2.default(drawType);\n\tmesh.bufferVertex(positions);\n\tmesh.bufferTexCoords(coords);\n\tmesh.bufferIndices(indices);\n\tif (withNormals) {\n\t\tmesh.bufferNormal(normals);\n\t}\n\n\treturn mesh;\n};\n\nGeom.cube = function (w, h, d) {\n\tvar withNormals = arguments.length <= 3 || arguments[3] === undefined ? false : arguments[3];\n\tvar drawType = arguments.length <= 4 || arguments[4] === undefined ? 4 : arguments[4];\n\n\th = h || w;\n\td = d || w;\n\n\tvar x = w / 2;\n\tvar y = h / 2;\n\tvar z = d / 2;\n\n\tvar positions = [];\n\tvar coords = [];\n\tvar indices = [];\n\tvar normals = [];\n\tvar count = 0;\n\n\t// BACK\n\tpositions.push([-x, y, -z]);\n\tpositions.push([x, y, -z]);\n\tpositions.push([x, -y, -z]);\n\tpositions.push([-x, -y, -z]);\n\n\tnormals.push([0, 0, -1]);\n\tnormals.push([0, 0, -1]);\n\tnormals.push([0, 0, -1]);\n\tnormals.push([0, 0, -1]);\n\n\tcoords.push([0, 0]);\n\tcoords.push([1, 0]);\n\tcoords.push([1, 1]);\n\tcoords.push([0, 1]);\n\n\tindices.push(count * 4 + 0);\n\tindices.push(count * 4 + 1);\n\tindices.push(count * 4 + 2);\n\tindices.push(count * 4 + 0);\n\tindices.push(count * 4 + 2);\n\tindices.push(count * 4 + 3);\n\n\tcount++;\n\n\t// RIGHT\n\tpositions.push([x, y, -z]);\n\tpositions.push([x, y, z]);\n\tpositions.push([x, -y, z]);\n\tpositions.push([x, -y, -z]);\n\n\tnormals.push([1, 0, 0]);\n\tnormals.push([1, 0, 0]);\n\tnormals.push([1, 0, 0]);\n\tnormals.push([1, 0, 0]);\n\n\tcoords.push([0, 0]);\n\tcoords.push([1, 0]);\n\tcoords.push([1, 1]);\n\tcoords.push([0, 1]);\n\n\tindices.push(count * 4 + 0);\n\tindices.push(count * 4 + 1);\n\tindices.push(count * 4 + 2);\n\tindices.push(count * 4 + 0);\n\tindices.push(count * 4 + 2);\n\tindices.push(count * 4 + 3);\n\n\tcount++;\n\n\t// FRONT\n\tpositions.push([x, y, z]);\n\tpositions.push([-x, y, z]);\n\tpositions.push([-x, -y, z]);\n\tpositions.push([x, -y, z]);\n\n\tnormals.push([0, 0, 1]);\n\tnormals.push([0, 0, 1]);\n\tnormals.push([0, 0, 1]);\n\tnormals.push([0, 0, 1]);\n\n\tcoords.push([0, 0]);\n\tcoords.push([1, 0]);\n\tcoords.push([1, 1]);\n\tcoords.push([0, 1]);\n\n\tindices.push(count * 4 + 0);\n\tindices.push(count * 4 + 1);\n\tindices.push(count * 4 + 2);\n\tindices.push(count * 4 + 0);\n\tindices.push(count * 4 + 2);\n\tindices.push(count * 4 + 3);\n\n\tcount++;\n\n\t// LEFT\n\tpositions.push([-x, y, z]);\n\tpositions.push([-x, y, -z]);\n\tpositions.push([-x, -y, -z]);\n\tpositions.push([-x, -y, z]);\n\n\tnormals.push([-1, 0, 0]);\n\tnormals.push([-1, 0, 0]);\n\tnormals.push([-1, 0, 0]);\n\tnormals.push([-1, 0, 0]);\n\n\tcoords.push([0, 0]);\n\tcoords.push([1, 0]);\n\tcoords.push([1, 1]);\n\tcoords.push([0, 1]);\n\n\tindices.push(count * 4 + 0);\n\tindices.push(count * 4 + 1);\n\tindices.push(count * 4 + 2);\n\tindices.push(count * 4 + 0);\n\tindices.push(count * 4 + 2);\n\tindices.push(count * 4 + 3);\n\n\tcount++;\n\n\t// TOP\n\tpositions.push([-x, y, z]);\n\tpositions.push([x, y, z]);\n\tpositions.push([x, y, -z]);\n\tpositions.push([-x, y, -z]);\n\n\tnormals.push([0, 1, 0]);\n\tnormals.push([0, 1, 0]);\n\tnormals.push([0, 1, 0]);\n\tnormals.push([0, 1, 0]);\n\n\tcoords.push([0, 0]);\n\tcoords.push([1, 0]);\n\tcoords.push([1, 1]);\n\tcoords.push([0, 1]);\n\n\tindices.push(count * 4 + 0);\n\tindices.push(count * 4 + 1);\n\tindices.push(count * 4 + 2);\n\tindices.push(count * 4 + 0);\n\tindices.push(count * 4 + 2);\n\tindices.push(count * 4 + 3);\n\n\tcount++;\n\n\t// BOTTOM\n\tpositions.push([-x, -y, -z]);\n\tpositions.push([x, -y, -z]);\n\tpositions.push([x, -y, z]);\n\tpositions.push([-x, -y, z]);\n\n\tnormals.push([0, -1, 0]);\n\tnormals.push([0, -1, 0]);\n\tnormals.push([0, -1, 0]);\n\tnormals.push([0, -1, 0]);\n\n\tcoords.push([0, 0]);\n\tcoords.push([1, 0]);\n\tcoords.push([1, 1]);\n\tcoords.push([0, 1]);\n\n\tindices.push(count * 4 + 0);\n\tindices.push(count * 4 + 1);\n\tindices.push(count * 4 + 2);\n\tindices.push(count * 4 + 0);\n\tindices.push(count * 4 + 2);\n\tindices.push(count * 4 + 3);\n\n\tcount++;\n\n\tvar mesh = new _Mesh2.default(drawType);\n\tmesh.bufferVertex(positions);\n\tmesh.bufferTexCoords(coords);\n\tmesh.bufferIndices(indices);\n\tif (withNormals) {\n\t\tmesh.bufferNormal(normals);\n\t}\n\n\treturn mesh;\n};\n\nGeom.skybox = function (size) {\n\tvar withNormals = arguments.length <= 1 || arguments[1] === undefined ? false : arguments[1];\n\tvar drawType = arguments.length <= 2 || arguments[2] === undefined ? 4 : arguments[2];\n\n\tvar positions = [];\n\tvar coords = [];\n\tvar indices = [];\n\tvar normals = [];\n\tvar count = 0;\n\n\t// BACK\n\tpositions.push([size, size, -size]);\n\tpositions.push([-size, size, -size]);\n\tpositions.push([-size, -size, -size]);\n\tpositions.push([size, -size, -size]);\n\n\tnormals.push([0, 0, -1]);\n\tnormals.push([0, 0, -1]);\n\tnormals.push([0, 0, -1]);\n\tnormals.push([0, 0, -1]);\n\n\tcoords.push([0, 0]);\n\tcoords.push([1, 0]);\n\tcoords.push([1, 1]);\n\tcoords.push([0, 1]);\n\n\tindices.push(count * 4 + 0);\n\tindices.push(count * 4 + 1);\n\tindices.push(count * 4 + 2);\n\tindices.push(count * 4 + 0);\n\tindices.push(count * 4 + 2);\n\tindices.push(count * 4 + 3);\n\n\tcount++;\n\n\t// RIGHT\n\tpositions.push([size, -size, -size]);\n\tpositions.push([size, -size, size]);\n\tpositions.push([size, size, size]);\n\tpositions.push([size, size, -size]);\n\n\tnormals.push([1, 0, 0]);\n\tnormals.push([1, 0, 0]);\n\tnormals.push([1, 0, 0]);\n\tnormals.push([1, 0, 0]);\n\n\tcoords.push([0, 0]);\n\tcoords.push([1, 0]);\n\tcoords.push([1, 1]);\n\tcoords.push([0, 1]);\n\n\tindices.push(count * 4 + 0);\n\tindices.push(count * 4 + 1);\n\tindices.push(count * 4 + 2);\n\tindices.push(count * 4 + 0);\n\tindices.push(count * 4 + 2);\n\tindices.push(count * 4 + 3);\n\n\tcount++;\n\n\t// FRONT\n\tpositions.push([-size, size, size]);\n\tpositions.push([size, size, size]);\n\tpositions.push([size, -size, size]);\n\tpositions.push([-size, -size, size]);\n\n\tnormals.push([0, 0, 1]);\n\tnormals.push([0, 0, 1]);\n\tnormals.push([0, 0, 1]);\n\tnormals.push([0, 0, 1]);\n\n\tcoords.push([0, 0]);\n\tcoords.push([1, 0]);\n\tcoords.push([1, 1]);\n\tcoords.push([0, 1]);\n\n\tindices.push(count * 4 + 0);\n\tindices.push(count * 4 + 1);\n\tindices.push(count * 4 + 2);\n\tindices.push(count * 4 + 0);\n\tindices.push(count * 4 + 2);\n\tindices.push(count * 4 + 3);\n\n\tcount++;\n\n\t// LEFT\n\tpositions.push([-size, -size, size]);\n\tpositions.push([-size, -size, -size]);\n\tpositions.push([-size, size, -size]);\n\tpositions.push([-size, size, size]);\n\n\tnormals.push([-1, 0, 0]);\n\tnormals.push([-1, 0, 0]);\n\tnormals.push([-1, 0, 0]);\n\tnormals.push([-1, 0, 0]);\n\n\tcoords.push([0, 0]);\n\tcoords.push([1, 0]);\n\tcoords.push([1, 1]);\n\tcoords.push([0, 1]);\n\n\tindices.push(count * 4 + 0);\n\tindices.push(count * 4 + 1);\n\tindices.push(count * 4 + 2);\n\tindices.push(count * 4 + 0);\n\tindices.push(count * 4 + 2);\n\tindices.push(count * 4 + 3);\n\n\tcount++;\n\n\t// TOP\n\tpositions.push([size, size, size]);\n\tpositions.push([-size, size, size]);\n\tpositions.push([-size, size, -size]);\n\tpositions.push([size, size, -size]);\n\n\tnormals.push([0, 1, 0]);\n\tnormals.push([0, 1, 0]);\n\tnormals.push([0, 1, 0]);\n\tnormals.push([0, 1, 0]);\n\n\tcoords.push([0, 0]);\n\tcoords.push([1, 0]);\n\tcoords.push([1, 1]);\n\tcoords.push([0, 1]);\n\n\tindices.push(count * 4 + 0);\n\tindices.push(count * 4 + 1);\n\tindices.push(count * 4 + 2);\n\tindices.push(count * 4 + 0);\n\tindices.push(count * 4 + 2);\n\tindices.push(count * 4 + 3);\n\n\tcount++;\n\n\t// BOTTOM\n\tpositions.push([size, -size, -size]);\n\tpositions.push([-size, -size, -size]);\n\tpositions.push([-size, -size, size]);\n\tpositions.push([size, -size, size]);\n\n\tnormals.push([0, -1, 0]);\n\tnormals.push([0, -1, 0]);\n\tnormals.push([0, -1, 0]);\n\tnormals.push([0, -1, 0]);\n\n\tcoords.push([0, 0]);\n\tcoords.push([1, 0]);\n\tcoords.push([1, 1]);\n\tcoords.push([0, 1]);\n\n\tindices.push(count * 4 + 0);\n\tindices.push(count * 4 + 1);\n\tindices.push(count * 4 + 2);\n\tindices.push(count * 4 + 0);\n\tindices.push(count * 4 + 2);\n\tindices.push(count * 4 + 3);\n\n\tvar mesh = new _Mesh2.default(drawType);\n\tmesh.bufferVertex(positions);\n\tmesh.bufferTexCoords(coords);\n\tmesh.bufferIndices(indices);\n\tif (withNormals) {\n\t\tmesh.bufferNormal(normals);\n\t}\n\n\treturn mesh;\n};\n\nGeom.bigTriangle = function () {\n\tvar indices = [2, 1, 0];\n\tvar positions = [[-1, -1], [-1, 4], [4, -1]];\n\n\tvar mesh = new _Mesh2.default();\n\tmesh.bufferData(positions, 'aPosition', 2);\n\tmesh.bufferIndices(indices);\n\n\treturn mesh;\n};\n\nexports.default = Geom;\n\n},{\"./Mesh\":21}],21:[function(_dereq_,module,exports){\n// Mesh.js\n\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _GLTool = _dereq_('./GLTool');\n\nvar _GLTool2 = _interopRequireDefault(_GLTool);\n\nvar _glMatrix = _dereq_('gl-matrix');\n\nvar _glMatrix2 = _interopRequireDefault(_glMatrix);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar gl = void 0;\n\nvar vec3 = _glMatrix2.default.vec3;\n\nvar Mesh = function () {\n\tfunction Mesh() {\n\t\tvar mDrawType = arguments.length <= 0 || arguments[0] === undefined ? _GLTool2.default.gl.TRIANGLES : arguments[0];\n\n\t\t_classCallCheck(this, Mesh);\n\n\t\tgl = _GLTool2.default.gl;\n\t\tthis.drawType = mDrawType;\n\t\tthis._attributes = [];\n\t\tthis._vertexSize = 0;\n\n\t\tthis._vertices = [];\n\t\tthis._texCoords = [];\n\t\tthis._normals = [];\n\t\tthis._faceNormals = [];\n\t\tthis._tangents = [];\n\t\tthis._indices = [];\n\t\tthis._faces = [];\n\t}\n\n\t_createClass(Mesh, [{\n\t\tkey: 'bufferVertex',\n\t\tvalue: function bufferVertex(mArrayVertices) {\n\t\t\tvar isDynamic = arguments.length <= 1 || arguments[1] === undefined ? false : arguments[1];\n\n\n\t\t\tthis._vertexSize = mArrayVertices.length;\n\t\t\tthis.bufferData(mArrayVertices, 'aVertexPosition', 3, isDynamic);\n\t\t\tthis._vertices = mArrayVertices;\n\t\t}\n\t}, {\n\t\tkey: 'bufferTexCoords',\n\t\tvalue: function bufferTexCoords(mArrayTexCoords) {\n\t\t\tvar isDynamic = arguments.length <= 1 || arguments[1] === undefined ? false : arguments[1];\n\n\n\t\t\tthis.bufferData(mArrayTexCoords, 'aTextureCoord', 2, isDynamic);\n\t\t\tthis._texCoords = mArrayTexCoords;\n\t\t}\n\t}, {\n\t\tkey: 'bufferNormal',\n\t\tvalue: function bufferNormal(mNormals) {\n\t\t\tvar isDynamic = arguments.length <= 1 || arguments[1] === undefined ? false : arguments[1];\n\n\n\t\t\tthis.bufferData(mNormals, 'aNormal', 3, isDynamic);\n\t\t\tthis._normals = mNormals;\n\t\t}\n\t}, {\n\t\tkey: 'bufferIndices',\n\t\tvalue: function bufferIndices(mArrayIndices) {\n\t\t\tvar isDynamic = arguments.length <= 1 || arguments[1] === undefined ? false : arguments[1];\n\n\n\t\t\tvar drawType = isDynamic ? gl.DYNAMIC_DRAW : gl.STATIC_DRAW;\n\t\t\tthis._indices = mArrayIndices;\n\t\t\tthis.iBuffer = gl.createBuffer();\n\t\t\tgl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.iBuffer);\n\t\t\tgl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(mArrayIndices), drawType);\n\t\t\tthis.iBuffer.itemSize = 1;\n\t\t\tthis.iBuffer.numItems = mArrayIndices.length;\n\t\t\tthis._indices = mArrayIndices;\n\t\t}\n\t}, {\n\t\tkey: 'bufferData',\n\t\tvalue: function bufferData(mData, mName, mItemSize) {\n\t\t\tvar isDynamic = arguments.length <= 3 || arguments[3] === undefined ? false : arguments[3];\n\n\t\t\tvar index = -1,\n\t\t\t    i = 0;\n\t\t\tvar drawType = isDynamic ? gl.DYNAMIC_DRAW : gl.STATIC_DRAW;\n\t\t\tvar bufferData = [];\n\t\t\tvar buffer = void 0,\n\t\t\t    dataArray = void 0;\n\n\t\t\t//\tCheck for existing attributes\n\t\t\tfor (i = 0; i < this._attributes.length; i++) {\n\t\t\t\tif (this._attributes[i].name === mName) {\n\t\t\t\t\tthis._attributes[i].data = mData;\n\t\t\t\t\tindex = i;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t//\tflatten buffer data\t\t\n\t\t\tfor (i = 0; i < mData.length; i++) {\n\t\t\t\tfor (var j = 0; j < mData[i].length; j++) {\n\t\t\t\t\tbufferData.push(mData[i][j]);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (index === -1) {\n\n\t\t\t\t//\tattribute not exist yet, create new buffer\n\t\t\t\tbuffer = gl.createBuffer();\n\t\t\t\tgl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n\n\t\t\t\tdataArray = new Float32Array(bufferData);\n\t\t\t\tgl.bufferData(gl.ARRAY_BUFFER, dataArray, drawType);\n\t\t\t\tthis._attributes.push({ name: mName, data: mData, itemSize: mItemSize, buffer: buffer, dataArray: dataArray });\n\t\t\t} else {\n\n\t\t\t\t//\tattribute existed, replace with new data\n\t\t\t\tbuffer = this._attributes[index].buffer;\n\t\t\t\tgl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n\t\t\t\tdataArray = this._attributes[index].dataArray;\n\t\t\t\tfor (i = 0; i < bufferData.length; i++) {\n\t\t\t\t\tdataArray[i] = bufferData[i];\n\t\t\t\t}\n\t\t\t\tgl.bufferData(gl.ARRAY_BUFFER, dataArray, drawType);\n\t\t\t}\n\t\t}\n\t}, {\n\t\tkey: 'computeNormals',\n\t\tvalue: function computeNormals() {\n\t\t\tvar usingFaceNormals = arguments.length <= 0 || arguments[0] === undefined ? false : arguments[0];\n\n\n\t\t\tthis._generateFaces();\n\n\t\t\tif (usingFaceNormals) {\n\t\t\t\tthis._computeFaceNormals();\n\t\t\t} else {\n\t\t\t\tthis._computeVertexNormals();\n\t\t\t}\n\t\t}\n\t}, {\n\t\tkey: 'computeTangents',\n\t\tvalue: function computeTangents() {}\n\n\t\t//\tPRIVATE METHODS\n\n\t}, {\n\t\tkey: '_computeFaceNormals',\n\t\tvalue: function _computeFaceNormals() {\n\n\t\t\tvar faceIndex = void 0;\n\t\t\tvar face = void 0;\n\t\t\tvar normals = [];\n\n\t\t\tfor (var i = 0; i < this._indices.length; i += 3) {\n\t\t\t\tfaceIndex = i / 3;\n\t\t\t\tface = this._faces[faceIndex];\n\t\t\t\tvar N = face.normal;\n\n\t\t\t\tnormals[face.indices[0]] = N;\n\t\t\t\tnormals[face.indices[1]] = N;\n\t\t\t\tnormals[face.indices[2]] = N;\n\t\t\t}\n\n\t\t\tthis.bufferNormal(normals);\n\t\t}\n\t}, {\n\t\tkey: '_computeVertexNormals',\n\t\tvalue: function _computeVertexNormals() {\n\t\t\t//\tloop through all vertices\n\t\t\tvar sumNormal = vec3.create();\n\t\t\tvar face = void 0;\n\t\t\tvar normals = [];\n\n\t\t\tfor (var i = 0; i < this._vertices.length; i++) {\n\n\t\t\t\tvec3.set(sumNormal, 0, 0, 0);\n\n\t\t\t\tfor (var j = 0; j < this._faces.length; j++) {\n\t\t\t\t\tface = this._faces[j];\n\n\t\t\t\t\t//\tif vertex exist in the face, add the normal to sum normal\n\t\t\t\t\tif (face.indices.indexOf(i) >= 0) {\n\n\t\t\t\t\t\tsumNormal[0] += face.normal[0];\n\t\t\t\t\t\tsumNormal[1] += face.normal[1];\n\t\t\t\t\t\tsumNormal[2] += face.normal[2];\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tvec3.normalize(sumNormal, sumNormal);\n\t\t\t\tnormals.push([sumNormal[0], sumNormal[1], sumNormal[2]]);\n\t\t\t}\n\n\t\t\tthis.bufferNormal(normals);\n\t\t}\n\t}, {\n\t\tkey: '_generateFaces',\n\t\tvalue: function _generateFaces() {\n\n\t\t\tvar ia = void 0,\n\t\t\t    ib = void 0,\n\t\t\t    ic = void 0;\n\t\t\tvar a = void 0,\n\t\t\t    b = void 0,\n\t\t\t    c = void 0,\n\t\t\t    vba = vec3.create(),\n\t\t\t    vca = vec3.create(),\n\t\t\t    vNormal = vec3.create();\n\n\t\t\tfor (var i = 0; i < this._indices.length; i += 3) {\n\n\t\t\t\tia = this._indices[i];\n\t\t\t\tib = this._indices[i + 1];\n\t\t\t\tic = this._indices[i + 2];\n\n\t\t\t\ta = vec3.clone(this._vertices[ia]);\n\t\t\t\tb = vec3.clone(this._vertices[ib]);\n\t\t\t\tc = vec3.clone(this._vertices[ic]);\n\n\t\t\t\tvec3.sub(vba, b, a);\n\t\t\t\tvec3.sub(vca, c, a);\n\n\t\t\t\tvec3.cross(vNormal, vba, vca);\n\t\t\t\tvec3.normalize(vNormal, vNormal);\n\t\t\t\tvar N = [vNormal[0], vNormal[1], vNormal[2]];\n\n\t\t\t\tvar face = {\n\t\t\t\t\tindices: [ia, ib, ic],\n\t\t\t\t\tnormal: N\n\t\t\t\t};\n\n\t\t\t\tthis._faces.push(face);\n\t\t\t}\n\t\t}\n\n\t\t//\tGETTER AND SETTERS\n\n\t}, {\n\t\tkey: 'vertices',\n\t\tget: function get() {\n\t\t\treturn this._vertices;\n\t\t}\n\t}, {\n\t\tkey: 'normals',\n\t\tget: function get() {\n\t\t\treturn this._normals;\n\t\t}\n\t}, {\n\t\tkey: 'attributes',\n\t\tget: function get() {\n\t\t\treturn this._attributes;\n\t\t}\n\t}, {\n\t\tkey: 'vertexSize',\n\t\tget: function get() {\n\t\t\treturn this._vertexSize;\n\t\t}\n\t}, {\n\t\tkey: 'hasNormals',\n\t\tget: function get() {\n\t\t\tif (this._normals.length === 0) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\t}, {\n\t\tkey: 'hasTangents',\n\t\tget: function get() {\n\t\t\tif (this._tangents.length === 0) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\t}]);\n\n\treturn Mesh;\n}();\n\nexports.default = Mesh;\n\n},{\"./GLTool\":19,\"gl-matrix\":1}],22:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); // Camera.js\n\nvar _glMatrix = _dereq_('gl-matrix');\n\nvar _glMatrix2 = _interopRequireDefault(_glMatrix);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar Camera = function () {\n\tfunction Camera() {\n\t\t_classCallCheck(this, Camera);\n\n\t\t//\tVIEW MATRIX\n\t\tthis._matrix = _glMatrix2.default.mat4.create();\n\n\t\t//\tPROJECTION MATRIX\n\t\tthis._projection = _glMatrix2.default.mat4.create();\n\n\t\t//\tPOSITION OF CAMERA\n\t\tthis.position = _glMatrix2.default.vec3.create();\n\t}\n\n\t_createClass(Camera, [{\n\t\tkey: 'lookAt',\n\t\tvalue: function lookAt(aEye, aCenter, aUp) {\n\t\t\t_glMatrix2.default.vec3.copy(this.position, aEye);\n\t\t\t_glMatrix2.default.mat4.identity(this._matrix);\n\t\t\t_glMatrix2.default.mat4.lookAt(this._matrix, aEye, aCenter, aUp);\n\t\t}\n\n\t\t//\tGETTERS\n\n\t}, {\n\t\tkey: 'matrix',\n\t\tget: function get() {\n\t\t\treturn this._matrix;\n\t\t}\n\t}, {\n\t\tkey: 'viewMatrix',\n\t\tget: function get() {\n\t\t\treturn this._matrix;\n\t\t}\n\t}, {\n\t\tkey: 'projection',\n\t\tget: function get() {\n\t\t\treturn this._projection;\n\t\t}\n\t}, {\n\t\tkey: 'projectionMatrix',\n\t\tget: function get() {\n\t\t\treturn this._projection;\n\t\t}\n\t}]);\n\n\treturn Camera;\n}();\n\nexports.default = Camera;\n\n},{\"gl-matrix\":1}],23:[function(_dereq_,module,exports){\n// CameraCube.js\n\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _CameraPerspective2 = _dereq_('./CameraPerspective');\n\nvar _CameraPerspective3 = _interopRequireDefault(_CameraPerspective2);\n\nvar _glMatrix = _dereq_('gl-matrix');\n\nvar _glMatrix2 = _interopRequireDefault(_glMatrix);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar vec3 = _glMatrix2.default.vec3;\n\nvar CAMERA_SETTINGS = [[vec3.fromValues(0, 0, 0), vec3.fromValues(1, 0, 0), vec3.fromValues(0, -1, 0)], [vec3.fromValues(0, 0, 0), vec3.fromValues(-1, 0, 0), vec3.fromValues(0, -1, 0)], [vec3.fromValues(0, 0, 0), vec3.fromValues(0, 1, 0), vec3.fromValues(0, 0, 1)], [vec3.fromValues(0, 0, 0), vec3.fromValues(0, -1, 0), vec3.fromValues(0, 0, -1)], [vec3.fromValues(0, 0, 0), vec3.fromValues(0, 0, 1), vec3.fromValues(0, -1, 0)], [vec3.fromValues(0, 0, 0), vec3.fromValues(0, 0, -1), vec3.fromValues(0, -1, 0)]];\n\nvar CameraCube = function (_CameraPerspective) {\n\t_inherits(CameraCube, _CameraPerspective);\n\n\tfunction CameraCube() {\n\t\t_classCallCheck(this, CameraCube);\n\n\t\tvar _this = _possibleConstructorReturn(this, Object.getPrototypeOf(CameraCube).call(this));\n\n\t\t_this.setPerspective(Math.PI / 2, 1, 0.1, 1000);\n\t\treturn _this;\n\t}\n\n\t_createClass(CameraCube, [{\n\t\tkey: 'face',\n\t\tvalue: function face(mIndex) {\n\t\t\tvar o = CAMERA_SETTINGS[mIndex];\n\t\t\tthis.lookAt(o[0], o[1], o[2]);\n\t\t}\n\t}]);\n\n\treturn CameraCube;\n}(_CameraPerspective3.default);\n\nexports.default = CameraCube;\n\n},{\"./CameraPerspective\":25,\"gl-matrix\":1}],24:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _Camera2 = _dereq_('./Camera');\n\nvar _Camera3 = _interopRequireDefault(_Camera2);\n\nvar _glMatrix = _dereq_('gl-matrix');\n\nvar _glMatrix2 = _interopRequireDefault(_glMatrix);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // CameraOrtho.js\n\nvar CameraOrtho = function (_Camera) {\n\t_inherits(CameraOrtho, _Camera);\n\n\tfunction CameraOrtho() {\n\t\t_classCallCheck(this, CameraOrtho);\n\n\t\tvar _this = _possibleConstructorReturn(this, Object.getPrototypeOf(CameraOrtho).call(this));\n\n\t\tvar eye = _glMatrix2.default.vec3.clone([0, 0, 5]);\n\t\tvar center = _glMatrix2.default.vec3.create();\n\t\tvar up = _glMatrix2.default.vec3.clone([0, -1, 0]);\n\t\t_this.lookAt(eye, center, up);\n\t\t_this.ortho(1, -1, 1, -1);\n\t\treturn _this;\n\t}\n\n\t_createClass(CameraOrtho, [{\n\t\tkey: 'setBoundary',\n\t\tvalue: function setBoundary(left, right, top, bottom) {\n\n\t\t\tthis.ortho(left, right, top, bottom);\n\t\t}\n\t}, {\n\t\tkey: 'ortho',\n\t\tvalue: function ortho(left, right, top, bottom) {\n\t\t\tthis.left = left;\n\t\t\tthis.right = right;\n\t\t\tthis.top = top;\n\t\t\tthis.bottom = bottom;\n\t\t\t_glMatrix2.default.mat4.ortho(this._projection, left, right, top, bottom, 0, 10000);\n\t\t}\n\t}]);\n\n\treturn CameraOrtho;\n}(_Camera3.default);\n\nexports.default = CameraOrtho;\n\n},{\"./Camera\":22,\"gl-matrix\":1}],25:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _Camera2 = _dereq_('./Camera');\n\nvar _Camera3 = _interopRequireDefault(_Camera2);\n\nvar _glMatrix = _dereq_('gl-matrix');\n\nvar _glMatrix2 = _interopRequireDefault(_glMatrix);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // CameraPerspective.js\n\nvar CameraPerspective = function (_Camera) {\n\t_inherits(CameraPerspective, _Camera);\n\n\tfunction CameraPerspective() {\n\t\t_classCallCheck(this, CameraPerspective);\n\n\t\treturn _possibleConstructorReturn(this, Object.getPrototypeOf(CameraPerspective).call(this));\n\t}\n\n\t_createClass(CameraPerspective, [{\n\t\tkey: 'setPerspective',\n\t\tvalue: function setPerspective(mFov, mAspectRatio, mNear, mFar) {\n\n\t\t\tthis._fov = mFov;\n\t\t\tthis._near = mNear;\n\t\t\tthis._far = mFar;\n\t\t\tthis._aspectRatio = mAspectRatio;\n\t\t\t_glMatrix2.default.mat4.perspective(this._projection, mFov, mAspectRatio, mNear, mFar);\n\t\t}\n\t}, {\n\t\tkey: 'setAspectRatio',\n\t\tvalue: function setAspectRatio(mAspectRatio) {\n\t\t\tthis._aspectRatio = mAspectRatio;\n\t\t\t_glMatrix2.default.mat4.perspective(this.projection, this._fov, mAspectRatio, this._near, this._far);\n\t\t}\n\t}]);\n\n\treturn CameraPerspective;\n}(_Camera3.default);\n\nexports.default = CameraPerspective;\n\n},{\"./Camera\":22,\"gl-matrix\":1}],26:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\n\nvar _GLTool = _dereq_('../GLTool');\n\nvar _GLTool2 = _interopRequireDefault(_GLTool);\n\nvar _Mesh = _dereq_('../Mesh');\n\nvar _Mesh2 = _interopRequireDefault(_Mesh);\n\nvar _GLShader = _dereq_('../GLShader');\n\nvar _GLShader2 = _interopRequireDefault(_GLShader);\n\nvar _Batch2 = _dereq_('../Batch');\n\nvar _Batch3 = _interopRequireDefault(_Batch2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // BatchAxis.js\n\n\n\nvar BatchAxis = function (_Batch) {\n\t_inherits(BatchAxis, _Batch);\n\n\tfunction BatchAxis() {\n\t\t_classCallCheck(this, BatchAxis);\n\n\t\tvar positions = [];\n\t\tvar colors = [];\n\t\tvar indices = [0, 1, 2, 3, 4, 5];\n\t\tvar r = 9999;\n\n\t\tpositions.push([-r, 0, 0]);\n\t\tpositions.push([r, 0, 0]);\n\t\tpositions.push([0, -r, 0]);\n\t\tpositions.push([0, r, 0]);\n\t\tpositions.push([0, 0, -r]);\n\t\tpositions.push([0, 0, r]);\n\n\t\tcolors.push([1, 0, 0]);\n\t\tcolors.push([1, 0, 0]);\n\t\tcolors.push([0, 1, 0]);\n\t\tcolors.push([0, 1, 0]);\n\t\tcolors.push([0, 0, 1]);\n\t\tcolors.push([0, 0, 1]);\n\n\t\tvar mesh = new _Mesh2.default(_GLTool2.default.LINES);\n\t\tmesh.bufferVertex(positions);\n\t\tmesh.bufferIndices(indices);\n\t\tmesh.bufferData(colors, 'aColor', 3);\n\n\t\tvar shader = new _GLShader2.default(\"// axis.vert\\n\\n#define SHADER_NAME BASIC_VERTEX\\n\\nprecision highp float;\\n#define GLSLIFY 1\\nattribute vec3 aVertexPosition;\\nattribute vec3 aColor;\\n\\nuniform mat4 uModelMatrix;\\nuniform mat4 uViewMatrix;\\nuniform mat4 uProjectionMatrix;\\n\\nvarying vec3 vColor;\\n\\nvoid main(void) {\\n    gl_Position = uProjectionMatrix * uViewMatrix * uModelMatrix * vec4(aVertexPosition, 1.0);\\n    vColor = aColor;\\n}\", \"// axis.frag\\n\\n#define SHADER_NAME SIMPLE_TEXTURE\\n\\nprecision highp float;\\n#define GLSLIFY 1\\nvarying vec3 vColor;\\n\\nvoid main(void) {\\n    gl_FragColor = vec4(vColor, 1.0);\\n}\");\n\n\t\treturn _possibleConstructorReturn(this, Object.getPrototypeOf(BatchAxis).call(this, mesh, shader));\n\t}\n\n\treturn BatchAxis;\n}(_Batch3.default);\n\nexports.default = BatchAxis;\n\n},{\"../Batch\":13,\"../GLShader\":17,\"../GLTool\":19,\"../Mesh\":21}],27:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\nvar _Geom = _dereq_('../Geom');\n\nvar _Geom2 = _interopRequireDefault(_Geom);\n\nvar _GLShader = _dereq_('../GLShader');\n\nvar _GLShader2 = _interopRequireDefault(_GLShader);\n\nvar _Batch2 = _dereq_('../Batch');\n\nvar _Batch3 = _interopRequireDefault(_Batch2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // BatchBall.js\n\n\n\nvar BatchBall = function (_Batch) {\n\t_inherits(BatchBall, _Batch);\n\n\tfunction BatchBall() {\n\t\t_classCallCheck(this, BatchBall);\n\n\t\tvar mesh = _Geom2.default.sphere(1, 24);\n\t\tvar shader = new _GLShader2.default(\"// general.vert\\n\\n#define SHADER_NAME GENERAL_VERTEX\\n\\nprecision highp float;\\n#define GLSLIFY 1\\nattribute vec3 aVertexPosition;\\nattribute vec2 aTextureCoord;\\n\\nuniform mat4 uModelMatrix;\\nuniform mat4 uViewMatrix;\\nuniform mat4 uProjectionMatrix;\\n\\nuniform vec3 position;\\nuniform vec3 scale;\\n\\nvarying vec2 vTextureCoord;\\n\\nvoid main(void) {\\n\\tvec3 pos      = aVertexPosition * scale;\\n\\tpos           += position;\\n\\tgl_Position   = uProjectionMatrix * uViewMatrix * uModelMatrix * vec4(pos, 1.0);\\n\\tvTextureCoord = aTextureCoord;\\n}\", \"// simpleColor.frag\\n\\n#define SHADER_NAME SIMPLE_COLOR\\n\\nprecision highp float;\\n#define GLSLIFY 1\\n\\nuniform vec3 color;\\nuniform float opacity;\\n\\nvoid main(void) {\\n    gl_FragColor = vec4(color, opacity);\\n}\");\n\t\treturn _possibleConstructorReturn(this, Object.getPrototypeOf(BatchBall).call(this, mesh, shader));\n\t}\n\n\t_createClass(BatchBall, [{\n\t\tkey: 'draw',\n\t\tvalue: function draw() {\n\t\t\tvar position = arguments.length <= 0 || arguments[0] === undefined ? [0, 0, 0] : arguments[0];\n\t\t\tvar scale = arguments.length <= 1 || arguments[1] === undefined ? [1, 1, 1] : arguments[1];\n\t\t\tvar color = arguments.length <= 2 || arguments[2] === undefined ? [1, 1, 1] : arguments[2];\n\t\t\tvar opacity = arguments.length <= 3 || arguments[3] === undefined ? 1 : arguments[3];\n\n\t\t\tthis.shader.bind();\n\t\t\tthis.shader.uniform('position', 'uniform3fv', position);\n\t\t\tthis.shader.uniform('scale', 'uniform3fv', scale);\n\t\t\tthis.shader.uniform('color', 'uniform3fv', color);\n\t\t\tthis.shader.uniform('opacity', 'uniform1f', opacity);\n\t\t\t_get(Object.getPrototypeOf(BatchBall.prototype), 'draw', this).call(this);\n\t\t}\n\t}]);\n\n\treturn BatchBall;\n}(_Batch3.default);\n\nexports.default = BatchBall;\n\n},{\"../Batch\":13,\"../GLShader\":17,\"../Geom\":20}],28:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\nvar _Geom = _dereq_('../Geom');\n\nvar _Geom2 = _interopRequireDefault(_Geom);\n\nvar _GLShader = _dereq_('../GLShader');\n\nvar _GLShader2 = _interopRequireDefault(_GLShader);\n\nvar _Batch2 = _dereq_('../Batch');\n\nvar _Batch3 = _interopRequireDefault(_Batch2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // BatchCopy.js\n\n\n\nvar BatchCopy = function (_Batch) {\n\t_inherits(BatchCopy, _Batch);\n\n\tfunction BatchCopy() {\n\t\t_classCallCheck(this, BatchCopy);\n\n\t\tvar mesh = _Geom2.default.bigTriangle();\n\t\tvar shader = new _GLShader2.default(\"// bigTriangle.vert\\n\\n#define SHADER_NAME BIG_TRIANGLE_VERTEX\\n\\nprecision highp float;\\n#define GLSLIFY 1\\nattribute vec2 aPosition;\\nvarying vec2 vTextureCoord;\\n\\nvoid main(void) {\\n    gl_Position = vec4(aPosition, 0.0, 1.0);\\n    vTextureCoord = aPosition * .5 + .5;\\n}\", \"// copy.frag\\n\\n#define SHADER_NAME COPY_FRAGMENT\\n\\nprecision highp float;\\n#define GLSLIFY 1\\n\\nvarying vec2 vTextureCoord;\\nuniform sampler2D texture;\\n\\nvoid main(void) {\\n    gl_FragColor = texture2D(texture, vTextureCoord);\\n}\");\n\n\t\tvar _this = _possibleConstructorReturn(this, Object.getPrototypeOf(BatchCopy).call(this, mesh, shader));\n\n\t\tshader.bind();\n\t\tshader.uniform('texture', 'uniform1i', 0);\n\t\treturn _this;\n\t}\n\n\t_createClass(BatchCopy, [{\n\t\tkey: 'draw',\n\t\tvalue: function draw(texture) {\n\t\t\tthis.shader.bind();\n\t\t\ttexture.bind(0);\n\t\t\t_get(Object.getPrototypeOf(BatchCopy.prototype), 'draw', this).call(this);\n\t\t}\n\t}]);\n\n\treturn BatchCopy;\n}(_Batch3.default);\n\nexports.default = BatchCopy;\n\n},{\"../Batch\":13,\"../GLShader\":17,\"../Geom\":20}],29:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\nvar _GLTool = _dereq_('../GLTool');\n\nvar _GLTool2 = _interopRequireDefault(_GLTool);\n\nvar _Mesh = _dereq_('../Mesh');\n\nvar _Mesh2 = _interopRequireDefault(_Mesh);\n\nvar _GLShader = _dereq_('../GLShader');\n\nvar _GLShader2 = _interopRequireDefault(_GLShader);\n\nvar _Batch2 = _dereq_('../Batch');\n\nvar _Batch3 = _interopRequireDefault(_Batch2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // BatchDotsPlane.js\n\n\n\nvar BatchDotsPlane = function (_Batch) {\n\t_inherits(BatchDotsPlane, _Batch);\n\n\tfunction BatchDotsPlane() {\n\t\t_classCallCheck(this, BatchDotsPlane);\n\n\t\tvar positions = [];\n\t\tvar indices = [];\n\t\tvar index = 0;\n\n\t\tvar numDots = 100;\n\t\tvar size = 50;\n\t\tvar gap = size / numDots;\n\t\tvar i = void 0,\n\t\t    j = void 0;\n\n\t\tfor (i = -size / 2; i < size; i += gap) {\n\t\t\tfor (j = -size / 2; j < size; j += gap) {\n\t\t\t\tpositions.push([i, j, 0]);\n\t\t\t\tindices.push(index);\n\t\t\t\tindex++;\n\n\t\t\t\tpositions.push([i, 0, j]);\n\t\t\t\tindices.push(index);\n\t\t\t\tindex++;\n\t\t\t}\n\t\t}\n\n\t\tvar mesh = new _Mesh2.default(_GLTool2.default.POINTS);\n\t\tmesh.bufferVertex(positions);\n\t\tmesh.bufferIndices(indices);\n\n\t\tvar shader = new _GLShader2.default(\"// basic.vert\\n\\n#define SHADER_NAME DOTS_PLANE_VERTEX\\n\\nprecision highp float;\\n#define GLSLIFY 1\\nattribute vec3 aVertexPosition;\\n\\nuniform mat4 uModelMatrix;\\nuniform mat4 uViewMatrix;\\nuniform mat4 uProjectionMatrix;\\n\\nvoid main(void) {\\n    gl_Position = uProjectionMatrix * uViewMatrix * uModelMatrix * vec4(aVertexPosition, 1.0);\\n}\", \"// simpleColor.frag\\n\\n#define SHADER_NAME SIMPLE_COLOR\\n\\nprecision highp float;\\n#define GLSLIFY 1\\n\\nuniform vec3 color;\\nuniform float opacity;\\n\\nvoid main(void) {\\n    gl_FragColor = vec4(color, opacity);\\n}\");\n\n\t\tvar _this = _possibleConstructorReturn(this, Object.getPrototypeOf(BatchDotsPlane).call(this, mesh, shader));\n\n\t\t_this.color = [1, 1, 1];\n\t\t_this.opacity = 0.5;\n\t\treturn _this;\n\t}\n\n\t_createClass(BatchDotsPlane, [{\n\t\tkey: 'draw',\n\t\tvalue: function draw() {\n\t\t\tthis.shader.bind();\n\t\t\tthis.shader.uniform('color', 'uniform3fv', this.color);\n\t\t\tthis.shader.uniform('opacity', 'uniform1f', this.opacity);\n\t\t\t// GL.draw(this.mesh);\n\t\t\t_get(Object.getPrototypeOf(BatchDotsPlane.prototype), 'draw', this).call(this);\n\t\t}\n\t}]);\n\n\treturn BatchDotsPlane;\n}(_Batch3.default);\n\nexports.default = BatchDotsPlane;\n\n},{\"../Batch\":13,\"../GLShader\":17,\"../GLTool\":19,\"../Mesh\":21}],30:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\nvar _Geom = _dereq_('../Geom');\n\nvar _Geom2 = _interopRequireDefault(_Geom);\n\nvar _GLShader = _dereq_('../GLShader');\n\nvar _GLShader2 = _interopRequireDefault(_GLShader);\n\nvar _Batch2 = _dereq_('../Batch');\n\nvar _Batch3 = _interopRequireDefault(_Batch2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // BatchSkybox.js\n\n\n\nvar BatchSkybox = function (_Batch) {\n\t_inherits(BatchSkybox, _Batch);\n\n\tfunction BatchSkybox() {\n\t\tvar size = arguments.length <= 0 || arguments[0] === undefined ? 20 : arguments[0];\n\n\t\t_classCallCheck(this, BatchSkybox);\n\n\t\tvar mesh = _Geom2.default.skybox(size);\n\t\tvar shader = new _GLShader2.default(\"// basic.vert\\n\\n#define SHADER_NAME SKYBOX_VERTEX\\n\\nprecision highp float;\\n#define GLSLIFY 1\\nattribute vec3 aVertexPosition;\\nattribute vec2 aTextureCoord;\\n\\nuniform mat4 uModelMatrix;\\nuniform mat4 uViewMatrix;\\nuniform mat4 uProjectionMatrix;\\n\\nvarying vec2 vTextureCoord;\\nvarying vec3 vVertex;\\n\\nvoid main(void) {\\n\\tgl_Position = uProjectionMatrix * uViewMatrix * uModelMatrix * vec4(aVertexPosition, 1.0);\\n\\tvTextureCoord = aTextureCoord;\\n\\t\\n\\tvVertex = aVertexPosition;\\n}\", \"// basic.frag\\n\\n#define SHADER_NAME SKYBOX_FRAGMENT\\n\\nprecision highp float;\\n#define GLSLIFY 1\\nuniform samplerCube texture;\\nvarying vec2 vTextureCoord;\\nvarying vec3 vVertex;\\n\\nvoid main(void) {\\n    gl_FragColor = textureCube(texture, vVertex);\\n}\");\n\n\t\treturn _possibleConstructorReturn(this, Object.getPrototypeOf(BatchSkybox).call(this, mesh, shader));\n\t}\n\n\t_createClass(BatchSkybox, [{\n\t\tkey: 'draw',\n\t\tvalue: function draw(texture) {\n\t\t\tthis.shader.bind();\n\t\t\ttexture.bind(0);\n\t\t\t_get(Object.getPrototypeOf(BatchSkybox.prototype), 'draw', this).call(this);\n\t\t}\n\t}]);\n\n\treturn BatchSkybox;\n}(_Batch3.default);\n\nexports.default = BatchSkybox;\n\n},{\"../Batch\":13,\"../GLShader\":17,\"../Geom\":20}],31:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); // Scene.js\n\nvar _scheduling = _dereq_('scheduling');\n\nvar _scheduling2 = _interopRequireDefault(_scheduling);\n\nvar _GLTool = _dereq_('../GLTool');\n\nvar _GLTool2 = _interopRequireDefault(_GLTool);\n\nvar _CameraPerspective = _dereq_('../cameras/CameraPerspective');\n\nvar _CameraPerspective2 = _interopRequireDefault(_CameraPerspective);\n\nvar _CameraOrtho = _dereq_('../cameras/CameraOrtho');\n\nvar _CameraOrtho2 = _interopRequireDefault(_CameraOrtho);\n\nvar _OrbitalControl = _dereq_('../tools/OrbitalControl');\n\nvar _OrbitalControl2 = _interopRequireDefault(_OrbitalControl);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar Scene = function () {\n\tfunction Scene() {\n\t\tvar _this = this;\n\n\t\t_classCallCheck(this, Scene);\n\n\t\tthis._init();\n\t\tthis._initTextures();\n\t\tthis._initViews();\n\n\t\tthis._efIndex = _scheduling2.default.addEF(function () {\n\t\t\treturn _this._loop();\n\t\t});\n\t\twindow.addEventListener('resize', function () {\n\t\t\treturn _this.resize();\n\t\t});\n\t}\n\n\t//\tPUBLIC METHODS\n\n\t_createClass(Scene, [{\n\t\tkey: 'render',\n\t\tvalue: function render() {}\n\t}, {\n\t\tkey: 'stop',\n\t\tvalue: function stop() {\n\t\t\tif (this._efIndex === -1) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthis._efIndex = _scheduling2.default.removeEF(this._efIndex);\n\t\t}\n\t}, {\n\t\tkey: 'start',\n\t\tvalue: function start() {\n\t\t\tvar _this2 = this;\n\n\t\t\tif (this._efIndex !== -1) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis._efIndex = _scheduling2.default.addEF(function () {\n\t\t\t\treturn _this2._loop();\n\t\t\t});\n\t\t}\n\t}, {\n\t\tkey: 'resize',\n\t\tvalue: function resize() {\n\t\t\t_GLTool2.default.setSize(window.innerWidth, window.innerHeight);\n\t\t\tthis.camera.setAspectRatio(_GLTool2.default.aspectRatio);\n\t\t}\n\n\t\t//\tPROTECTED METHODS TO BE OVERRIDEN BY CHILDREN\n\n\t}, {\n\t\tkey: '_initTextures',\n\t\tvalue: function _initTextures() {}\n\t}, {\n\t\tkey: '_initViews',\n\t\tvalue: function _initViews() {}\n\n\t\t//\tPRIVATE METHODS\n\n\t}, {\n\t\tkey: '_init',\n\t\tvalue: function _init() {\n\t\t\tthis.camera = new _CameraPerspective2.default();\n\t\t\tthis.camera.setPerspective(45 * Math.PI / 180, _GLTool2.default.aspectRatio, 0.1, 100);\n\t\t\tthis.orbitalControl = new _OrbitalControl2.default(this.camera, window, 15);\n\t\t\tthis.orbitalControl.radius.value = 10;\n\n\t\t\tthis.cameraOrtho = new _CameraOrtho2.default();\n\t\t}\n\t}, {\n\t\tkey: '_loop',\n\t\tvalue: function _loop() {\n\n\t\t\t//\tRESET VIEWPORT\n\t\t\t_GLTool2.default.viewport(0, 0, _GLTool2.default.width, _GLTool2.default.height);\n\n\t\t\t//\tRESET CAMERA\n\t\t\t_GLTool2.default.setMatrices(this.camera);\n\n\t\t\tthis.render();\n\t\t}\n\t}]);\n\n\treturn Scene;\n}();\n\nexports.default = Scene;\n\n},{\"../GLTool\":19,\"../cameras/CameraOrtho\":24,\"../cameras/CameraPerspective\":25,\"../tools/OrbitalControl\":40,\"scheduling\":11}],32:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); // View.js\n\nvar _GLShader = _dereq_('../GLShader');\n\nvar _GLShader2 = _interopRequireDefault(_GLShader);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar View = function () {\n\tfunction View(mStrVertex, mStrFrag) {\n\t\t_classCallCheck(this, View);\n\n\t\tthis.shader = new _GLShader2.default(mStrVertex, mStrFrag);\n\n\t\tthis._init();\n\t}\n\n\t//\tPROTECTED METHODS\n\n\t_createClass(View, [{\n\t\tkey: '_init',\n\t\tvalue: function _init() {}\n\n\t\t// \tPUBLIC METHODS\n\n\t}, {\n\t\tkey: 'render',\n\t\tvalue: function render() {}\n\t}]);\n\n\treturn View;\n}();\n\nexports.default = View;\n\n},{\"../GLShader\":17}],33:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n// BinaryLoader.js\n\nvar BinaryLoader = function () {\n\tfunction BinaryLoader() {\n\t\tvar _this = this;\n\n\t\tvar isArrayBuffer = arguments.length <= 0 || arguments[0] === undefined ? false : arguments[0];\n\n\t\t_classCallCheck(this, BinaryLoader);\n\n\t\tthis._req = new XMLHttpRequest();\n\t\tthis._req.addEventListener('load', function (e) {\n\t\t\treturn _this._onLoaded(e);\n\t\t});\n\t\tthis._req.addEventListener('progress', function (e) {\n\t\t\treturn _this._onProgress(e);\n\t\t});\n\t\tif (isArrayBuffer) {\n\t\t\tthis._req.responseType = 'arraybuffer';\n\t\t}\n\t}\n\n\t_createClass(BinaryLoader, [{\n\t\tkey: 'load',\n\t\tvalue: function load(url, callback) {\n\t\t\tconsole.log('Loading : ', url);\n\t\t\tthis._callback = callback;\n\n\t\t\tthis._req.open('GET', url);\n\t\t\tthis._req.send();\n\t\t}\n\t}, {\n\t\tkey: '_onLoaded',\n\t\tvalue: function _onLoaded() {\n\t\t\tthis._callback(this._req.response);\n\t\t}\n\t}, {\n\t\tkey: '_onProgress',\n\t\tvalue: function _onProgress() /*e*/{\n\t\t\t// console.log('on Progress:', (e.loaded/e.total*100).toFixed(2));\n\t\t}\n\t}]);\n\n\treturn BinaryLoader;\n}();\n\nexports.default = BinaryLoader;\n\n},{}],34:[function(_dereq_,module,exports){\n// HDRLoader.js\n\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _BinaryLoader2 = _dereq_('./BinaryLoader');\n\nvar _BinaryLoader3 = _interopRequireDefault(_BinaryLoader2);\n\nvar _HDRParser = _dereq_('../tools/HDRParser');\n\nvar _HDRParser2 = _interopRequireDefault(_HDRParser);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar HDRLoader = function (_BinaryLoader) {\n\t_inherits(HDRLoader, _BinaryLoader);\n\n\tfunction HDRLoader() {\n\t\t_classCallCheck(this, HDRLoader);\n\n\t\treturn _possibleConstructorReturn(this, Object.getPrototypeOf(HDRLoader).call(this, true));\n\t}\n\n\t_createClass(HDRLoader, [{\n\t\tkey: 'parse',\n\t\tvalue: function parse(mArrayBuffer) {\n\t\t\treturn (0, _HDRParser2.default)(mArrayBuffer);\n\t\t}\n\t}, {\n\t\tkey: '_onLoaded',\n\t\tvalue: function _onLoaded() {\n\t\t\tvar o = this.parse(this._req.response);\n\t\t\tif (this._callback) {\n\t\t\t\tthis._callback(o);\n\t\t\t}\n\t\t}\n\t}]);\n\n\treturn HDRLoader;\n}(_BinaryLoader3.default);\n\nHDRLoader.parse = function (mArrayBuffer) {\n\treturn (0, _HDRParser2.default)(mArrayBuffer);\n};\n\nexports.default = HDRLoader;\n\n},{\"../tools/HDRParser\":39,\"./BinaryLoader\":33}],35:[function(_dereq_,module,exports){\n// ObjLoader.js\n\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\nvar _BinaryLoader2 = _dereq_('./BinaryLoader');\n\nvar _BinaryLoader3 = _interopRequireDefault(_BinaryLoader2);\n\nvar _Mesh = _dereq_('../Mesh');\n\nvar _Mesh2 = _interopRequireDefault(_Mesh);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar ObjLoader = function (_BinaryLoader) {\n\t_inherits(ObjLoader, _BinaryLoader);\n\n\tfunction ObjLoader() {\n\t\t_classCallCheck(this, ObjLoader);\n\n\t\treturn _possibleConstructorReturn(this, Object.getPrototypeOf(ObjLoader).call(this));\n\t}\n\n\t_createClass(ObjLoader, [{\n\t\tkey: 'load',\n\t\tvalue: function load(url, callback) {\n\t\t\tvar ignoreNormals = arguments.length <= 2 || arguments[2] === undefined ? true : arguments[2];\n\t\t\tvar drawType = arguments.length <= 3 || arguments[3] === undefined ? 4 : arguments[3];\n\n\t\t\tthis._ignoreNormals = ignoreNormals;\n\t\t\tthis._drawType = drawType;\n\t\t\t_get(Object.getPrototypeOf(ObjLoader.prototype), 'load', this).call(this, url, callback);\n\t\t}\n\t}, {\n\t\tkey: '_onLoaded',\n\t\tvalue: function _onLoaded() {\n\t\t\tthis._parseObj(this._req.response);\n\t\t}\n\t}, {\n\t\tkey: '_parseObj',\n\t\tvalue: function _parseObj(objStr) {\n\t\t\tvar lines = objStr.split('\\n');\n\n\t\t\tvar positions = [];\n\t\t\tvar coords = [];\n\t\t\tvar finalNormals = [];\n\t\t\tvar vertices = [];\n\t\t\tvar normals = [];\n\t\t\tvar uvs = [];\n\t\t\tvar indices = [];\n\t\t\tvar count = 0;\n\t\t\tvar result = void 0;\n\n\t\t\t// v float float float\n\t\t\tvar vertex_pattern = /v( +[\\d|\\.|\\+|\\-|e|E]+)( +[\\d|\\.|\\+|\\-|e|E]+)( +[\\d|\\.|\\+|\\-|e|E]+)/;\n\n\t\t\t// vn float float float\n\t\t\tvar normal_pattern = /vn( +[\\d|\\.|\\+|\\-|e|E]+)( +[\\d|\\.|\\+|\\-|e|E]+)( +[\\d|\\.|\\+|\\-|e|E]+)/;\n\n\t\t\t// vt float float\n\t\t\tvar uv_pattern = /vt( +[\\d|\\.|\\+|\\-|e|E]+)( +[\\d|\\.|\\+|\\-|e|E]+)/;\n\n\t\t\t// f vertex vertex vertex ...\n\t\t\tvar face_pattern1 = /f( +-?\\d+)( +-?\\d+)( +-?\\d+)( +-?\\d+)?/;\n\n\t\t\t// f vertex/uv vertex/uv vertex/uv ...\n\t\t\tvar face_pattern2 = /f( +(-?\\d+)\\/(-?\\d+))( +(-?\\d+)\\/(-?\\d+))( +(-?\\d+)\\/(-?\\d+))( +(-?\\d+)\\/(-?\\d+))?/;\n\n\t\t\t// f vertex/uv/normal vertex/uv/normal vertex/uv/normal ...\n\t\t\tvar face_pattern3 = /f( +(-?\\d+)\\/(-?\\d+)\\/(-?\\d+))( +(-?\\d+)\\/(-?\\d+)\\/(-?\\d+))( +(-?\\d+)\\/(-?\\d+)\\/(-?\\d+))( +(-?\\d+)\\/(-?\\d+)\\/(-?\\d+))?/;\n\n\t\t\t// f vertex//normal vertex//normal vertex//normal ...\n\t\t\tvar face_pattern4 = /f( +(-?\\d+)\\/\\/(-?\\d+))( +(-?\\d+)\\/\\/(-?\\d+))( +(-?\\d+)\\/\\/(-?\\d+))( +(-?\\d+)\\/\\/(-?\\d+))?/;\n\n\t\t\tfunction parseVertexIndex(value) {\n\t\t\t\tvar index = parseInt(value);\n\t\t\t\treturn (index >= 0 ? index - 1 : index + vertices.length / 3) * 3;\n\t\t\t}\n\n\t\t\tfunction parseNormalIndex(value) {\n\t\t\t\tvar index = parseInt(value);\n\t\t\t\treturn (index >= 0 ? index - 1 : index + normals.length / 3) * 3;\n\t\t\t}\n\n\t\t\tfunction parseUVIndex(value) {\n\t\t\t\tvar index = parseInt(value);\n\t\t\t\treturn (index >= 0 ? index - 1 : index + uvs.length / 2) * 2;\n\t\t\t}\n\n\t\t\tfunction addVertex(a, b, c) {\n\t\t\t\tpositions.push([vertices[a], vertices[a + 1], vertices[a + 2]]);\n\t\t\t\tpositions.push([vertices[b], vertices[b + 1], vertices[b + 2]]);\n\t\t\t\tpositions.push([vertices[c], vertices[c + 1], vertices[c + 2]]);\n\n\t\t\t\tindices.push(count * 3 + 0);\n\t\t\t\tindices.push(count * 3 + 1);\n\t\t\t\tindices.push(count * 3 + 2);\n\n\t\t\t\tcount++;\n\t\t\t}\n\n\t\t\tfunction addUV(a, b, c) {\n\t\t\t\tcoords.push([uvs[a], uvs[a + 1]]);\n\t\t\t\tcoords.push([uvs[b], uvs[b + 1]]);\n\t\t\t\tcoords.push([uvs[c], uvs[c + 1]]);\n\t\t\t}\n\n\t\t\tfunction addNormal(a, b, c) {\n\t\t\t\tfinalNormals.push([normals[a], normals[a + 1], normals[a + 2]]);\n\t\t\t\tfinalNormals.push([normals[b], normals[b + 1], normals[b + 2]]);\n\t\t\t\tfinalNormals.push([normals[c], normals[c + 1], normals[c + 2]]);\n\t\t\t}\n\n\t\t\tfunction addFace(a, b, c, d, ua, ub, uc, ud, na, nb, nc, nd) {\n\t\t\t\tvar ia = parseVertexIndex(a);\n\t\t\t\tvar ib = parseVertexIndex(b);\n\t\t\t\tvar ic = parseVertexIndex(c);\n\t\t\t\tvar id = void 0;\n\n\t\t\t\tif (d === undefined) {\n\n\t\t\t\t\taddVertex(ia, ib, ic);\n\t\t\t\t} else {\n\n\t\t\t\t\tid = parseVertexIndex(d);\n\n\t\t\t\t\taddVertex(ia, ib, id);\n\t\t\t\t\taddVertex(ib, ic, id);\n\t\t\t\t}\n\n\t\t\t\tif (ua !== undefined) {\n\n\t\t\t\t\tia = parseUVIndex(ua);\n\t\t\t\t\tib = parseUVIndex(ub);\n\t\t\t\t\tic = parseUVIndex(uc);\n\n\t\t\t\t\tif (d === undefined) {\n\n\t\t\t\t\t\taddUV(ia, ib, ic);\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tid = parseUVIndex(ud);\n\n\t\t\t\t\t\taddUV(ia, ib, id);\n\t\t\t\t\t\taddUV(ib, ic, id);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (na !== undefined) {\n\n\t\t\t\t\tia = parseNormalIndex(na);\n\t\t\t\t\tib = parseNormalIndex(nb);\n\t\t\t\t\tic = parseNormalIndex(nc);\n\n\t\t\t\t\tif (d === undefined) {\n\n\t\t\t\t\t\taddNormal(ia, ib, ic);\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tid = parseNormalIndex(nd);\n\n\t\t\t\t\t\taddNormal(ia, ib, id);\n\t\t\t\t\t\taddNormal(ib, ic, id);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor (var i = 0; i < lines.length; i++) {\n\t\t\t\tvar line = lines[i];\n\t\t\t\tline = line.trim();\n\n\t\t\t\tif (line.length === 0 || line.charAt(0) === '#') {\n\n\t\t\t\t\tcontinue;\n\t\t\t\t} else if ((result = vertex_pattern.exec(line)) !== null) {\n\n\t\t\t\t\tvertices.push(parseFloat(result[1]), parseFloat(result[2]), parseFloat(result[3]));\n\t\t\t\t} else if ((result = normal_pattern.exec(line)) !== null) {\n\n\t\t\t\t\tnormals.push(parseFloat(result[1]), parseFloat(result[2]), parseFloat(result[3]));\n\t\t\t\t} else if ((result = uv_pattern.exec(line)) !== null) {\n\n\t\t\t\t\tuvs.push(parseFloat(result[1]), parseFloat(result[2]));\n\t\t\t\t} else if ((result = face_pattern1.exec(line)) !== null) {\n\n\t\t\t\t\taddFace(result[1], result[2], result[3], result[4]);\n\t\t\t\t} else if ((result = face_pattern2.exec(line)) !== null) {\n\n\t\t\t\t\taddFace(result[2], result[5], result[8], result[11], result[3], result[6], result[9], result[12]);\n\t\t\t\t} else if ((result = face_pattern3.exec(line)) !== null) {\n\t\t\t\t\taddFace(result[2], result[6], result[10], result[14], result[3], result[7], result[11], result[15], result[4], result[8], result[12], result[16]);\n\t\t\t\t} else if ((result = face_pattern4.exec(line)) !== null) {\n\t\t\t\t\taddFace(result[2], result[5], result[8], result[11], undefined, undefined, undefined, undefined, result[3], result[6], result[9], result[12]);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis._generateMeshes({\n\t\t\t\tpositions: positions,\n\t\t\t\tcoords: coords,\n\t\t\t\tnormals: finalNormals,\n\t\t\t\tindices: indices\n\t\t\t});\n\t\t}\n\t}, {\n\t\tkey: '_generateMeshes',\n\t\tvalue: function _generateMeshes(o) {\n\t\t\tvar maxNumVertices = 65535;\n\t\t\tvar hasNormals = o.normals.length > 0;\n\t\t\tvar hasUVs = o.coords.length > 0;\n\n\t\t\tif (o.positions.length > maxNumVertices) {\n\t\t\t\tvar meshes = [];\n\t\t\t\tvar lastIndex = 0;\n\n\t\t\t\tvar oCopy = {};\n\t\t\t\toCopy.positions = o.positions.concat();\n\t\t\t\toCopy.coords = o.coords.concat();\n\t\t\t\toCopy.indices = o.indices.concat();\n\t\t\t\toCopy.normals = o.normals.concat();\n\n\t\t\t\twhile (o.indices.length > 0) {\n\n\t\t\t\t\tvar sliceNum = Math.min(maxNumVertices, o.positions.length);\n\t\t\t\t\tvar indices = o.indices.splice(0, sliceNum);\n\t\t\t\t\tvar positions = [];\n\t\t\t\t\tvar coords = [];\n\t\t\t\t\tvar normals = [];\n\t\t\t\t\tvar index = void 0,\n\t\t\t\t\t    tmpIndex = 0;\n\n\t\t\t\t\tfor (var i = 0; i < indices.length; i++) {\n\t\t\t\t\t\tif (indices[i] > tmpIndex) {\n\t\t\t\t\t\t\ttmpIndex = indices[i];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tindex = indices[i];\n\n\t\t\t\t\t\tpositions.push(oCopy.positions[index]);\n\t\t\t\t\t\tif (hasUVs) {\n\t\t\t\t\t\t\tcoords.push(oCopy.coords[index]);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (hasNormals) {\n\t\t\t\t\t\t\tnormals.push(oCopy.normals[index]);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tindices[i] -= lastIndex;\n\t\t\t\t\t}\n\n\t\t\t\t\tlastIndex = tmpIndex + 1;\n\n\t\t\t\t\tvar mesh = new _Mesh2.default(this._drawType);\n\t\t\t\t\tmesh.bufferVertex(positions);\n\t\t\t\t\tif (hasUVs) {\n\t\t\t\t\t\tmesh.bufferTexCoords(coords);\n\t\t\t\t\t}\n\n\t\t\t\t\tmesh.bufferIndices(indices);\n\t\t\t\t\tif (!this._ignoreNormals && hasNormals) {\n\t\t\t\t\t\tmesh.bufferNormal(normals);\n\t\t\t\t\t}\n\n\t\t\t\t\tmeshes.push(mesh);\n\t\t\t\t}\n\n\t\t\t\tif (this._callback) {\n\t\t\t\t\tthis._callback(meshes, oCopy);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tvar _mesh = new _Mesh2.default(this._drawType);\n\t\t\t\t_mesh.bufferVertex(o.positions);\n\t\t\t\tif (hasUVs) {\n\t\t\t\t\t_mesh.bufferTexCoords(o.coords);\n\t\t\t\t}\n\t\t\t\t_mesh.bufferIndices(o.indices);\n\t\t\t\tif (!this._ignoreNormals && hasNormals) {\n\t\t\t\t\t_mesh.bufferNormal(o.normals);\n\t\t\t\t}\n\n\t\t\t\tif (this._callback) {\n\t\t\t\t\tthis._callback(_mesh, o);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}]);\n\n\treturn ObjLoader;\n}(_BinaryLoader3.default);\n\nexports.default = ObjLoader;\n\n},{\"../Mesh\":21,\"./BinaryLoader\":33}],36:[function(_dereq_,module,exports){\n// EffectComposer.js\n\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _GLTool = _dereq_('../GLTool');\n\nvar _GLTool2 = _interopRequireDefault(_GLTool);\n\nvar _FrameBuffer = _dereq_('../FrameBuffer');\n\nvar _FrameBuffer2 = _interopRequireDefault(_FrameBuffer);\n\nvar _Geom = _dereq_('../Geom');\n\nvar _Geom2 = _interopRequireDefault(_Geom);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar EffectComposer = function () {\n\tfunction EffectComposer(mWidth, mHeight) {\n\t\tvar mParameters = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];\n\n\t\t_classCallCheck(this, EffectComposer);\n\n\t\tthis._fbo = new _FrameBuffer2.default(mWidth, mHeight, mParameters);\n\t\tthis._fboTarget = new _FrameBuffer2.default(mWidth, mHeight, mParameters);\n\n\t\tthis._mesh = _Geom2.default.bigTriangle();\n\n\t\tthis._passes = [];\n\t}\n\n\t_createClass(EffectComposer, [{\n\t\tkey: 'addPass',\n\t\tvalue: function addPass(pass) {\n\t\t\tthis._passes.push(pass);\n\t\t}\n\t}, {\n\t\tkey: 'render',\n\t\tvalue: function render(mSource) {\n\n\t\t\tfor (var i = 0; i < this._passes.length; i++) {\n\n\t\t\t\tthis._swap();\n\t\t\t}\n\t\t}\n\t}, {\n\t\tkey: '_swap',\n\t\tvalue: function _swap() {\n\t\t\tvar tmp = this._fbo;\n\t\t\tthis._fbo = this._fboTarget;\n\t\t\tthis._fboTarget = tmp;\n\t\t}\n\t}]);\n\n\treturn EffectComposer;\n}();\n\nexports.default = EffectComposer;\n\n},{\"../FrameBuffer\":15,\"../GLTool\":19,\"../Geom\":20}],37:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); // EaseNumber.js\n\nvar _scheduling = _dereq_('scheduling');\n\nvar _scheduling2 = _interopRequireDefault(_scheduling);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar EaseNumber = function () {\n\tfunction EaseNumber(mValue) {\n\t\tvar _this = this;\n\n\t\tvar mEasing = arguments.length <= 1 || arguments[1] === undefined ? 0.1 : arguments[1];\n\n\t\t_classCallCheck(this, EaseNumber);\n\n\t\tthis.easing = mEasing;\n\t\tthis._value = mValue;\n\t\tthis._targetValue = mValue;\n\t\t_scheduling2.default.addEF(function () {\n\t\t\treturn _this._update();\n\t\t});\n\t}\n\n\t_createClass(EaseNumber, [{\n\t\tkey: '_update',\n\t\tvalue: function _update() {\n\t\t\tthis._checkLimit();\n\t\t\tthis._value += (this._targetValue - this._value) * this.easing;\n\t\t}\n\t}, {\n\t\tkey: 'setTo',\n\t\tvalue: function setTo(mValue) {\n\t\t\tthis._targetValue = this._value = mValue;\n\t\t}\n\t}, {\n\t\tkey: 'add',\n\t\tvalue: function add(mAdd) {\n\t\t\tthis._targetValue += mAdd;\n\t\t}\n\t}, {\n\t\tkey: 'limit',\n\t\tvalue: function limit(mMin, mMax) {\n\t\t\tif (mMin > mMax) {\n\t\t\t\tthis.limit(mMax, mMin);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis._min = mMin;\n\t\t\tthis._max = mMax;\n\n\t\t\tthis._checkLimit();\n\t\t}\n\t}, {\n\t\tkey: '_checkLimit',\n\t\tvalue: function _checkLimit() {\n\t\t\tif (this._min !== undefined && this._targetValue < this._min) {\n\t\t\t\tthis._targetValue = this._min;\n\t\t\t}\n\n\t\t\tif (this._max !== undefined && this._targetValue > this._max) {\n\t\t\t\tthis._targetValue = this._max;\n\t\t\t}\n\t\t}\n\n\t\t//\tGETTERS / SETTERS\n\n\t}, {\n\t\tkey: 'value',\n\t\tset: function set(mValue) {\n\t\t\tthis._targetValue = mValue;\n\t\t},\n\t\tget: function get() {\n\t\t\treturn this._value;\n\t\t}\n\t}, {\n\t\tkey: 'targetValue',\n\t\tget: function get() {\n\t\t\treturn this._targetValue;\n\t\t}\n\t}]);\n\n\treturn EaseNumber;\n}();\n\nexports.default = EaseNumber;\n\n},{\"scheduling\":11}],38:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n// EventDispatcher.js\n\nvar supportsCustomEvents = true;\ntry {\n\tvar newTestCustomEvent = document.createEvent('CustomEvent');\n\tnewTestCustomEvent = null;\n} catch (e) {\n\tsupportsCustomEvents = false;\n}\n\nvar EventDispatcher = function () {\n\tfunction EventDispatcher() {\n\t\t_classCallCheck(this, EventDispatcher);\n\n\t\tthis._eventListeners = {};\n\t}\n\n\t_createClass(EventDispatcher, [{\n\t\tkey: 'addEventListener',\n\t\tvalue: function addEventListener(aEventType, aFunction) {\n\n\t\t\tif (this._eventListeners === null || this._eventListeners === undefined) {\n\t\t\t\tthis._eventListeners = {};\n\t\t\t}\n\n\t\t\tif (!this._eventListeners[aEventType]) {\n\t\t\t\tthis._eventListeners[aEventType] = [];\n\t\t\t}\n\t\t\tthis._eventListeners[aEventType].push(aFunction);\n\n\t\t\treturn this;\n\t\t}\n\t}, {\n\t\tkey: 'on',\n\t\tvalue: function on(aEventType, aFunction) {\n\t\t\treturn this.addEventListener(aEventType, aFunction);\n\t\t}\n\t}, {\n\t\tkey: 'removeEventListener',\n\t\tvalue: function removeEventListener(aEventType, aFunction) {\n\t\t\tif (this._eventListeners === null || this._eventListeners === undefined) {\n\t\t\t\tthis._eventListeners = {};\n\t\t\t}\n\t\t\tvar currentArray = this._eventListeners[aEventType];\n\n\t\t\tif (typeof currentArray === 'undefined') {\n\t\t\t\treturn this;\n\t\t\t}\n\n\t\t\tvar currentArrayLength = currentArray.length;\n\t\t\tfor (var i = 0; i < currentArrayLength; i++) {\n\t\t\t\tif (currentArray[i] === aFunction) {\n\t\t\t\t\tcurrentArray.splice(i, 1);\n\t\t\t\t\ti--;\n\t\t\t\t\tcurrentArrayLength--;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn this;\n\t\t}\n\t}, {\n\t\tkey: 'off',\n\t\tvalue: function off(aEventType, aFunction) {\n\t\t\treturn this.removeEventListener(aEventType, aFunction);\n\t\t}\n\t}, {\n\t\tkey: 'dispatchEvent',\n\t\tvalue: function dispatchEvent(aEvent) {\n\t\t\tif (this._eventListeners === null || this._eventListeners === undefined) {\n\t\t\t\tthis._eventListeners = {};\n\t\t\t}\n\t\t\tvar eventType = aEvent.type;\n\n\t\t\ttry {\n\t\t\t\tif (aEvent.target === null) {\n\t\t\t\t\taEvent.target = this;\n\t\t\t\t}\n\t\t\t\taEvent.currentTarget = this;\n\t\t\t} catch (theError) {\n\t\t\t\tvar newEvent = { 'type': eventType, 'detail': aEvent.detail, 'dispatcher': this };\n\t\t\t\treturn this.dispatchEvent(newEvent);\n\t\t\t}\n\n\t\t\tvar currentEventListeners = this._eventListeners[eventType];\n\t\t\tif (currentEventListeners !== null && currentEventListeners !== undefined) {\n\t\t\t\tvar currentArray = this._copyArray(currentEventListeners);\n\t\t\t\tvar currentArrayLength = currentArray.length;\n\t\t\t\tfor (var i = 0; i < currentArrayLength; i++) {\n\t\t\t\t\tvar currentFunction = currentArray[i];\n\t\t\t\t\tcurrentFunction.call(this, aEvent);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn this;\n\t\t}\n\t}, {\n\t\tkey: 'dispatchCustomEvent',\n\t\tvalue: function dispatchCustomEvent(aEventType, aDetail) {\n\t\t\tvar newEvent = void 0;\n\t\t\tif (supportsCustomEvents) {\n\t\t\t\tnewEvent = document.createEvent('CustomEvent');\n\t\t\t\tnewEvent.dispatcher = this;\n\t\t\t\tnewEvent.initCustomEvent(aEventType, false, false, aDetail);\n\t\t\t} else {\n\t\t\t\tnewEvent = { 'type': aEventType, 'detail': aDetail, 'dispatcher': this };\n\t\t\t}\n\t\t\treturn this.dispatchEvent(newEvent);\n\t\t}\n\t}, {\n\t\tkey: 'trigger',\n\t\tvalue: function trigger(aEventType, aDetail) {\n\t\t\treturn this.dispatchCustomEvent(aEventType, aDetail);\n\t\t}\n\t}, {\n\t\tkey: '_destroy',\n\t\tvalue: function _destroy() {\n\t\t\tif (this._eventListeners !== null) {\n\t\t\t\tfor (var objectName in this._eventListeners) {\n\t\t\t\t\tif (this._eventListeners.hasOwnProperty(objectName)) {\n\t\t\t\t\t\tvar currentArray = this._eventListeners[objectName];\n\t\t\t\t\t\tvar currentArrayLength = currentArray.length;\n\t\t\t\t\t\tfor (var i = 0; i < currentArrayLength; i++) {\n\t\t\t\t\t\t\tcurrentArray[i] = null;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdelete this._eventListeners[objectName];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tthis._eventListeners = null;\n\t\t\t}\n\t\t}\n\t}, {\n\t\tkey: '_copyArray',\n\t\tvalue: function _copyArray(aArray) {\n\t\t\tvar currentArray = new Array(aArray.length);\n\t\t\tvar currentArrayLength = currentArray.length;\n\t\t\tfor (var i = 0; i < currentArrayLength; i++) {\n\t\t\t\tcurrentArray[i] = aArray[i];\n\t\t\t}\n\t\t\treturn currentArray;\n\t\t}\n\t}]);\n\n\treturn EventDispatcher;\n}();\n\nexports.default = EventDispatcher;\n\n},{}],39:[function(_dereq_,module,exports){\n// HDRParser.js\n\n'use strict';\n\n//Code ported by Marcin Ignac (2014)\n//Based on Java implementation from\n//https://code.google.com/r/cys12345-research/source/browse/hdr/image_processor/RGBE.java?r=7d84e9fd866b24079dbe61fa0a966ce8365f5726\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\nvar radiancePattern = '#\\\\?RADIANCE';\nvar commentPattern = '#.*';\n// let gammaPattern = 'GAMMA=';\nvar exposurePattern = 'EXPOSURE=\\\\s*([0-9]*[.][0-9]*)';\nvar formatPattern = 'FORMAT=32-bit_rle_rgbe';\nvar widthHeightPattern = '-Y ([0-9]+) \\\\+X ([0-9]+)';\n\n//http://croquetweak.blogspot.co.uk/2014/08/deconstructing-floats-frexp-and-ldexp.html\n// function ldexp(mantissa, exponent) {\n//     return exponent > 1023 ? mantissa * Math.pow(2, 1023) * Math.pow(2, exponent - 1023) : exponent < -1074 ? mantissa * Math.pow(2, -1074) * Math.pow(2, exponent + 1074) : mantissa * Math.pow(2, exponent);\n// }\n\nfunction readPixelsRawRLE(buffer, data, offset, fileOffset, scanline_width, num_scanlines) {\n\tvar rgbe = new Array(4);\n\tvar scanline_buffer = null;\n\tvar ptr = void 0;\n\tvar ptr_end = void 0;\n\tvar count = void 0;\n\tvar buf = new Array(2);\n\tvar bufferLength = buffer.length;\n\n\tfunction readBuf(buf) {\n\t\tvar bytesRead = 0;\n\t\tdo {\n\t\t\tbuf[bytesRead++] = buffer[fileOffset];\n\t\t} while (++fileOffset < bufferLength && bytesRead < buf.length);\n\t\treturn bytesRead;\n\t}\n\n\tfunction readBufOffset(buf, offset, length) {\n\t\tvar bytesRead = 0;\n\t\tdo {\n\t\t\tbuf[offset + bytesRead++] = buffer[fileOffset];\n\t\t} while (++fileOffset < bufferLength && bytesRead < length);\n\t\treturn bytesRead;\n\t}\n\n\tfunction readPixelsRaw(buffer, data, offset, numpixels) {\n\t\tvar numExpected = 4 * numpixels;\n\t\tvar numRead = readBufOffset(data, offset, numExpected);\n\t\tif (numRead < numExpected) {\n\t\t\tthrow new Error('Error reading raw pixels: got ' + numRead + ' bytes, expected ' + numExpected);\n\t\t}\n\t}\n\n\twhile (num_scanlines > 0) {\n\t\tif (readBuf(rgbe) < rgbe.length) {\n\t\t\tthrow new Error('Error reading bytes: expected ' + rgbe.length);\n\t\t}\n\n\t\tif (rgbe[0] !== 2 || rgbe[1] !== 2 || (rgbe[2] & 0x80) !== 0) {\n\t\t\t//this file is not run length encoded\n\t\t\tdata[offset++] = rgbe[0];\n\t\t\tdata[offset++] = rgbe[1];\n\t\t\tdata[offset++] = rgbe[2];\n\t\t\tdata[offset++] = rgbe[3];\n\t\t\treadPixelsRaw(buffer, data, offset, scanline_width * num_scanlines - 1);\n\t\t\treturn;\n\t\t}\n\n\t\tif (((rgbe[2] & 0xFF) << 8 | rgbe[3] & 0xFF) !== scanline_width) {\n\t\t\tthrow new Error('Wrong scanline width ' + ((rgbe[2] & 0xFF) << 8 | rgbe[3] & 0xFF) + ', expected ' + scanline_width);\n\t\t}\n\n\t\tif (scanline_buffer === null) {\n\t\t\tscanline_buffer = new Array(4 * scanline_width);\n\t\t}\n\n\t\tptr = 0;\n\t\t/* read each of the four channels for the scanline into the buffer */\n\t\tfor (var i = 0; i < 4; i++) {\n\t\t\tptr_end = (i + 1) * scanline_width;\n\t\t\twhile (ptr < ptr_end) {\n\t\t\t\tif (readBuf(buf) < buf.length) {\n\t\t\t\t\tthrow new Error('Error reading 2-byte buffer');\n\t\t\t\t}\n\t\t\t\tif ((buf[0] & 0xFF) > 128) {\n\t\t\t\t\t/* a run of the same value */\n\t\t\t\t\tcount = (buf[0] & 0xFF) - 128;\n\t\t\t\t\tif (count === 0 || count > ptr_end - ptr) {\n\t\t\t\t\t\tthrow new Error('Bad scanline data');\n\t\t\t\t\t}\n\t\t\t\t\twhile (count-- > 0) {\n\t\t\t\t\t\tscanline_buffer[ptr++] = buf[1];\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t/* a non-run */\n\t\t\t\t\tcount = buf[0] & 0xFF;\n\t\t\t\t\tif (count === 0 || count > ptr_end - ptr) {\n\t\t\t\t\t\tthrow new Error('Bad scanline data');\n\t\t\t\t\t}\n\t\t\t\t\tscanline_buffer[ptr++] = buf[1];\n\t\t\t\t\tif (--count > 0) {\n\t\t\t\t\t\tif (readBufOffset(scanline_buffer, ptr, count) < count) {\n\t\t\t\t\t\t\tthrow new Error('Error reading non-run data');\n\t\t\t\t\t\t}\n\t\t\t\t\t\tptr += count;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t/* copy byte data to output */\n\t\tfor (var _i = 0; _i < scanline_width; _i++) {\n\t\t\tdata[offset + 0] = scanline_buffer[_i];\n\t\t\tdata[offset + 1] = scanline_buffer[_i + scanline_width];\n\t\t\tdata[offset + 2] = scanline_buffer[_i + 2 * scanline_width];\n\t\t\tdata[offset + 3] = scanline_buffer[_i + 3 * scanline_width];\n\t\t\toffset += 4;\n\t\t}\n\n\t\tnum_scanlines--;\n\t}\n}\n\n//Returns data as floats and flipped along Y by default\nfunction parseHdr(buffer) {\n\tif (buffer instanceof ArrayBuffer) {\n\t\tbuffer = new Uint8Array(buffer);\n\t}\n\n\tvar fileOffset = 0;\n\tvar bufferLength = buffer.length;\n\n\tvar NEW_LINE = 10;\n\n\tfunction readLine() {\n\t\tvar buf = '';\n\t\tdo {\n\t\t\tvar b = buffer[fileOffset];\n\t\t\tif (b === NEW_LINE) {\n\t\t\t\t++fileOffset;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tbuf += String.fromCharCode(b);\n\t\t} while (++fileOffset < bufferLength);\n\t\treturn buf;\n\t}\n\n\tvar width = 0;\n\tvar height = 0;\n\tvar exposure = 1;\n\tvar gamma = 1;\n\tvar rle = false;\n\n\tfor (var i = 0; i < 20; i++) {\n\t\tvar line = readLine();\n\t\tvar match = void 0;\n\t\tif (match = line.match(radiancePattern)) {} else if (match = line.match(formatPattern)) {\n\t\t\trle = true;\n\t\t} else if (match = line.match(exposurePattern)) {\n\t\t\texposure = Number(match[1]);\n\t\t} else if (match = line.match(commentPattern)) {} else if (match = line.match(widthHeightPattern)) {\n\t\t\theight = Number(match[1]);\n\t\t\twidth = Number(match[2]);\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tif (!rle) {\n\t\tthrow new Error('File is not run length encoded!');\n\t}\n\n\tvar data = new Uint8Array(width * height * 4);\n\tvar scanline_width = width;\n\tvar num_scanlines = height;\n\n\treadPixelsRawRLE(buffer, data, 0, fileOffset, scanline_width, num_scanlines);\n\n\t//TODO: Should be Float16\n\tvar floatData = new Float32Array(width * height * 4);\n\tfor (var offset = 0; offset < data.length; offset += 4) {\n\t\tvar r = data[offset + 0] / 255;\n\t\tvar g = data[offset + 1] / 255;\n\t\tvar b = data[offset + 2] / 255;\n\t\tvar e = data[offset + 3];\n\t\tvar f = Math.pow(2.0, e - 128.0);\n\n\t\tr *= f;\n\t\tg *= f;\n\t\tb *= f;\n\n\t\tvar floatOffset = offset;\n\n\t\tfloatData[floatOffset + 0] = r;\n\t\tfloatData[floatOffset + 1] = g;\n\t\tfloatData[floatOffset + 2] = b;\n\t\tfloatData[floatOffset + 3] = 1.0;\n\t}\n\n\treturn {\n\t\tshape: [width, height],\n\t\texposure: exposure,\n\t\tgamma: gamma,\n\t\tdata: floatData\n\t};\n}\n\nexports.default = parseHdr;\n\n},{}],40:[function(_dereq_,module,exports){\n// OrbitalControl.js\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _EaseNumber = _dereq_('./EaseNumber');\n\nvar _EaseNumber2 = _interopRequireDefault(_EaseNumber);\n\nvar _scheduling = _dereq_('scheduling');\n\nvar _scheduling2 = _interopRequireDefault(_scheduling);\n\nvar _glMatrix = _dereq_('gl-matrix');\n\nvar _glMatrix2 = _interopRequireDefault(_glMatrix);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar getMouse = function getMouse(mEvent, mTarget) {\n\n\tvar o = mTarget || {};\n\tif (mEvent.touches) {\n\t\to.x = mEvent.touches[0].pageX;\n\t\to.y = mEvent.touches[0].pageY;\n\t} else {\n\t\to.x = mEvent.clientX;\n\t\to.y = mEvent.clientY;\n\t}\n\n\treturn o;\n};\n\nvar OrbitalControl = function () {\n\tfunction OrbitalControl(mTarget) {\n\t\tvar _this = this;\n\n\t\tvar mListenerTarget = arguments.length <= 1 || arguments[1] === undefined ? window : arguments[1];\n\t\tvar mRadius = arguments.length <= 2 || arguments[2] === undefined ? 500 : arguments[2];\n\n\t\t_classCallCheck(this, OrbitalControl);\n\n\t\tthis._target = mTarget;\n\t\tthis._listenerTarget = mListenerTarget;\n\t\tthis._mouse = {};\n\t\tthis._preMouse = {};\n\t\tthis.center = _glMatrix2.default.vec3.create();\n\t\tthis._up = _glMatrix2.default.vec3.fromValues(0, 1, 0);\n\t\tthis.radius = new _EaseNumber2.default(mRadius);\n\t\tthis.position = _glMatrix2.default.vec3.fromValues(0, 0, this.radius.value);\n\t\tthis.positionOffset = _glMatrix2.default.vec3.create();\n\t\tthis._rx = new _EaseNumber2.default(0);\n\t\tthis._rx.limit(-Math.PI / 2, Math.PI / 2);\n\t\tthis._ry = new _EaseNumber2.default(0);\n\t\tthis._preRX = 0;\n\t\tthis._preRY = 0;\n\n\t\tthis._isLockZoom = false;\n\t\tthis._isLockRotation = false;\n\t\tthis._isInvert = false;\n\t\tthis.sensitivity = 1.0;\n\n\t\tthis._listenerTarget.addEventListener('mousewheel', function (e) {\n\t\t\treturn _this._onWheel(e);\n\t\t});\n\t\tthis._listenerTarget.addEventListener('DOMMouseScroll', function (e) {\n\t\t\treturn _this._onWheel(e);\n\t\t});\n\n\t\tthis._listenerTarget.addEventListener('mousedown', function (e) {\n\t\t\treturn _this._onDown(e);\n\t\t});\n\t\tthis._listenerTarget.addEventListener('touchstart', function (e) {\n\t\t\treturn _this._onDown(e);\n\t\t});\n\t\tthis._listenerTarget.addEventListener('mousemove', function (e) {\n\t\t\treturn _this._onMove(e);\n\t\t});\n\t\tthis._listenerTarget.addEventListener('touchmove', function (e) {\n\t\t\treturn _this._onMove(e);\n\t\t});\n\t\twindow.addEventListener('touchend', function () {\n\t\t\treturn _this._onUp();\n\t\t});\n\t\twindow.addEventListener('mouseup', function () {\n\t\t\treturn _this._onUp();\n\t\t});\n\n\t\t_scheduling2.default.addEF(function () {\n\t\t\treturn _this._loop();\n\t\t});\n\t}\n\n\t//\tPUBLIC METHODS\n\n\t_createClass(OrbitalControl, [{\n\t\tkey: 'lock',\n\t\tvalue: function lock() {\n\t\t\tvar mValue = arguments.length <= 0 || arguments[0] === undefined ? true : arguments[0];\n\n\t\t\tthis._isLockZoom = mValue;\n\t\t\tthis._isLockRotation = mValue;\n\t\t}\n\t}, {\n\t\tkey: 'lockZoom',\n\t\tvalue: function lockZoom() {\n\t\t\tvar mValue = arguments.length <= 0 || arguments[0] === undefined ? true : arguments[0];\n\n\t\t\tthis._isLockZoom = mValue;\n\t\t}\n\t}, {\n\t\tkey: 'lockRotation',\n\t\tvalue: function lockRotation() {\n\t\t\tvar mValue = arguments.length <= 0 || arguments[0] === undefined ? true : arguments[0];\n\n\t\t\tthis._isLockRotation = mValue;\n\t\t}\n\t}, {\n\t\tkey: 'inverseControl',\n\t\tvalue: function inverseControl() {\n\t\t\tvar isInvert = arguments.length <= 0 || arguments[0] === undefined ? true : arguments[0];\n\n\t\t\tthis._isInvert = isInvert;\n\t\t}\n\n\t\t//\tEVENT HANDLERES\n\n\t}, {\n\t\tkey: '_onDown',\n\t\tvalue: function _onDown(mEvent) {\n\t\t\tif (this._isLockRotation) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthis._isMouseDown = true;\n\t\t\tgetMouse(mEvent, this._mouse);\n\t\t\tgetMouse(mEvent, this._preMouse);\n\t\t\tthis._preRX = this._rx.targetValue;\n\t\t\tthis._preRY = this._ry.targetValue;\n\t\t}\n\t}, {\n\t\tkey: '_onMove',\n\t\tvalue: function _onMove(mEvent) {\n\t\t\tif (this._isLockRotation) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tgetMouse(mEvent, this._mouse);\n\t\t\tif (mEvent.touches) {\n\t\t\t\tmEvent.preventDefault();\n\t\t\t}\n\n\t\t\tif (this._isMouseDown) {\n\t\t\t\tvar diffX = -(this._mouse.x - this._preMouse.x);\n\t\t\t\tif (this._isInvert) {\n\t\t\t\t\tdiffX *= -1;\n\t\t\t\t}\n\t\t\t\tthis._ry.value = this._preRY - diffX * 0.01 * this.sensitivity;\n\n\t\t\t\tvar diffY = -(this._mouse.y - this._preMouse.y);\n\t\t\t\tif (this._isInvert) {\n\t\t\t\t\tdiffY *= -1;\n\t\t\t\t}\n\t\t\t\tthis._rx.value = this._preRX - diffY * 0.01 * this.sensitivity;\n\t\t\t}\n\t\t}\n\t}, {\n\t\tkey: '_onUp',\n\t\tvalue: function _onUp() {\n\t\t\tif (this._isLockRotation) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthis._isMouseDown = false;\n\t\t}\n\t}, {\n\t\tkey: '_onWheel',\n\t\tvalue: function _onWheel(mEvent) {\n\t\t\tif (this._isLockZoom) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar w = mEvent.wheelDelta;\n\t\t\tvar d = mEvent.detail;\n\t\t\tvar value = 0;\n\t\t\tif (d) {\n\t\t\t\tif (w) {\n\t\t\t\t\tvalue = w / d / 40 * d > 0 ? 1 : -1; // Opera\n\t\t\t\t} else {\n\t\t\t\t\t\tvalue = -d / 3; // Firefox;         TODO: do not /3 for OS X\n\t\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t\tvalue = w / 120;\n\t\t\t\t}\n\n\t\t\tthis.radius.add(-value * 2);\n\t\t}\n\n\t\t//\tPRIVATE METHODS\n\n\t}, {\n\t\tkey: '_loop',\n\t\tvalue: function _loop() {\n\n\t\t\tthis._updatePosition();\n\n\t\t\tif (this._target) {\n\t\t\t\tthis._updateCamera();\n\t\t\t}\n\t\t}\n\t}, {\n\t\tkey: '_updatePosition',\n\t\tvalue: function _updatePosition() {\n\t\t\tthis.position[1] = Math.sin(this._rx.value) * this.radius.value;\n\t\t\tvar tr = Math.cos(this._rx.value) * this.radius.value;\n\t\t\tthis.position[0] = Math.cos(this._ry.value + Math.PI * 0.5) * tr;\n\t\t\tthis.position[2] = Math.sin(this._ry.value + Math.PI * 0.5) * tr;\n\t\t\t_glMatrix2.default.vec3.add(this.position, this.position, this.positionOffset);\n\t\t}\n\t}, {\n\t\tkey: '_updateCamera',\n\t\tvalue: function _updateCamera() {\n\t\t\tthis._target.lookAt(this.position, this.center, this._up);\n\t\t}\n\n\t\t//\tGETTER / SETTER\n\n\t}, {\n\t\tkey: 'rx',\n\t\tget: function get() {\n\t\t\treturn this._rx;\n\t\t}\n\t}, {\n\t\tkey: 'ry',\n\t\tget: function get() {\n\t\t\treturn this._ry;\n\t\t}\n\t}]);\n\n\treturn OrbitalControl;\n}();\n\nexports.default = OrbitalControl;\n\n},{\"./EaseNumber\":37,\"gl-matrix\":1,\"scheduling\":11}],41:[function(_dereq_,module,exports){\n// QuatRotation.js\n\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _glMatrix = _dereq_('gl-matrix');\n\nvar _glMatrix2 = _interopRequireDefault(_glMatrix);\n\nvar _EaseNumber = _dereq_('./EaseNumber');\n\nvar _EaseNumber2 = _interopRequireDefault(_EaseNumber);\n\nvar _scheduling = _dereq_('scheduling');\n\nvar _scheduling2 = _interopRequireDefault(_scheduling);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar getMouse = function getMouse(mEvent, mTarget) {\n\n\tvar o = mTarget || {};\n\tif (mEvent.touches) {\n\t\to.x = mEvent.touches[0].pageX;\n\t\to.y = mEvent.touches[0].pageY;\n\t} else {\n\t\to.x = mEvent.clientX;\n\t\to.y = mEvent.clientY;\n\t}\n\n\treturn o;\n};\n\nvar QuatRotation = function () {\n\tfunction QuatRotation(mTarget) {\n\t\tvar _this = this;\n\n\t\tvar mListenerTarget = arguments.length <= 1 || arguments[1] === undefined ? window : arguments[1];\n\t\tvar mEasing = arguments.length <= 2 || arguments[2] === undefined ? 0.1 : arguments[2];\n\n\t\t_classCallCheck(this, QuatRotation);\n\n\t\tthis._target = mTarget;\n\t\tthis._listenerTarget = mListenerTarget;\n\n\t\tthis.matrix = _glMatrix2.default.mat4.create();\n\t\tthis.m = _glMatrix2.default.mat4.create();\n\t\tthis._vZaxis = _glMatrix2.default.vec3.clone([0, 0, 0]);\n\t\tthis._zAxis = _glMatrix2.default.vec3.clone([0, 0, 1]);\n\t\tthis.preMouse = { x: 0, y: 0 };\n\t\tthis.mouse = { x: 0, y: 0 };\n\t\tthis._isMouseDown = false;\n\t\tthis._rotation = _glMatrix2.default.quat.create();\n\t\tthis.tempRotation = _glMatrix2.default.quat.create();\n\t\tthis._rotateZMargin = 0;\n\t\tthis._offset = 0.004;\n\t\tthis._slerp = -1;\n\t\tthis._isLocked = false;\n\n\t\tthis._diffX = new _EaseNumber2.default(0, mEasing);\n\t\tthis._diffY = new _EaseNumber2.default(0, mEasing);\n\n\t\tthis._listenerTarget.addEventListener('mousedown', function (e) {\n\t\t\treturn _this._onDown(e);\n\t\t});\n\t\tthis._listenerTarget.addEventListener('touchstart', function (e) {\n\t\t\treturn _this._onDown(e);\n\t\t});\n\t\tthis._listenerTarget.addEventListener('mousemove', function (e) {\n\t\t\treturn _this._onMove(e);\n\t\t});\n\t\tthis._listenerTarget.addEventListener('touchmove', function (e) {\n\t\t\treturn _this._onMove(e);\n\t\t});\n\t\twindow.addEventListener('touchend', function () {\n\t\t\treturn _this._onUp();\n\t\t});\n\t\twindow.addEventListener('mouseup', function () {\n\t\t\treturn _this._onUp();\n\t\t});\n\n\t\t_scheduling2.default.addEF(function () {\n\t\t\treturn _this._loop();\n\t\t});\n\t}\n\n\t// \tPUBLIC METHODS\n\n\t_createClass(QuatRotation, [{\n\t\tkey: 'inverseControl',\n\t\tvalue: function inverseControl() {\n\t\t\tvar isInvert = arguments.length <= 0 || arguments[0] === undefined ? true : arguments[0];\n\n\t\t\tthis._isInvert = isInvert;\n\t\t}\n\t}, {\n\t\tkey: 'lock',\n\t\tvalue: function lock() {\n\t\t\tvar mValue = arguments.length <= 0 || arguments[0] === undefined ? true : arguments[0];\n\n\t\t\tthis._isLocked = mValue;\n\t\t}\n\t}, {\n\t\tkey: 'setCameraPos',\n\t\tvalue: function setCameraPos(mQuat) {\n\t\t\tvar speed = arguments.length <= 1 || arguments[1] === undefined ? 0.1 : arguments[1];\n\n\t\t\tthis.easing = speed;\n\t\t\tif (this._slerp > 0) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar tempRotation = _glMatrix2.default.quat.clone(this._rotation);\n\t\t\tthis._updateRotation(tempRotation);\n\t\t\tthis._rotation = _glMatrix2.default.quat.clone(tempRotation);\n\t\t\tthis._currDiffX = this.diffX = 0;\n\t\t\tthis._currDiffY = this.diffY = 0;\n\n\t\t\tthis._isMouseDown = false;\n\t\t\tthis._isRotateZ = 0;\n\n\t\t\tthis._targetQuat = _glMatrix2.default.quat.clone(mQuat);\n\t\t\tthis._slerp = 1;\n\t\t}\n\t}, {\n\t\tkey: 'resetQuat',\n\t\tvalue: function resetQuat() {\n\t\t\tthis._rotation = _glMatrix2.default.quat.clone([0, 0, 1, 0]);\n\t\t\tthis.tempRotation = _glMatrix2.default.quat.clone([0, 0, 0, 0]);\n\t\t\tthis._targetQuat = undefined;\n\t\t\tthis._slerp = -1;\n\t\t}\n\n\t\t//\tEVENT HANDLER\n\n\t}, {\n\t\tkey: '_onDown',\n\t\tvalue: function _onDown(mEvent) {\n\t\t\tif (this._isLocked) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar mouse = getMouse(mEvent);\n\t\t\tvar tempRotation = _glMatrix2.default.quat.clone(this._rotation);\n\t\t\tthis._updateRotation(tempRotation);\n\t\t\tthis._rotation = tempRotation;\n\n\t\t\tthis._isMouseDown = true;\n\t\t\tthis._isRotateZ = 0;\n\t\t\tthis.preMouse = { x: mouse.x, y: mouse.y };\n\n\t\t\tif (mouse.y < this._rotateZMargin || mouse.y > window.innerHeight - this._rotateZMargin) {\n\t\t\t\tthis._isRotateZ = 1;\n\t\t\t} else if (mouse.x < this._rotateZMargin || mouse.x > window.innerWidth - this._rotateZMargin) {\n\t\t\t\tthis._isRotateZ = 2;\n\t\t\t}\n\n\t\t\tthis._diffX.setTo(0);\n\t\t\tthis._diffY.setTo(0);\n\t\t}\n\t}, {\n\t\tkey: '_onMove',\n\t\tvalue: function _onMove(mEvent) {\n\t\t\tif (this._isLocked) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tgetMouse(mEvent, this.mouse);\n\t\t}\n\t}, {\n\t\tkey: '_onUp',\n\t\tvalue: function _onUp() {\n\t\t\tif (this._isLocked) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthis._isMouseDown = false;\n\t\t}\n\n\t\t//\tPRIVATE METHODS\n\n\t}, {\n\t\tkey: '_updateRotation',\n\t\tvalue: function _updateRotation(mTempRotation) {\n\t\t\tif (this._isMouseDown && !this._isLocked) {\n\t\t\t\tthis._diffX.value = -(this.mouse.x - this.preMouse.x);\n\t\t\t\tthis._diffY.value = this.mouse.y - this.preMouse.y;\n\n\t\t\t\tif (this._isInvert) {\n\t\t\t\t\tthis._diffX.value = -this._diffX.targetValue;\n\t\t\t\t\tthis._diffY.value = -this._diffY.targetValue;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar angle = void 0,\n\t\t\t    _quat = void 0;\n\n\t\t\tif (this._isRotateZ > 0) {\n\t\t\t\tif (this._isRotateZ === 1) {\n\t\t\t\t\tangle = -this._diffX.value * this._offset;\n\t\t\t\t\tangle *= this.preMouse.y < this._rotateZMargin ? -1 : 1;\n\t\t\t\t\t_quat = _glMatrix2.default.quat.clone([0, 0, Math.sin(angle), Math.cos(angle)]);\n\t\t\t\t\t_glMatrix2.default.quat.multiply(_quat, mTempRotation, _quat);\n\t\t\t\t} else {\n\t\t\t\t\tangle = -this._diffY.value * this._offset;\n\t\t\t\t\tangle *= this.preMouse.x < this._rotateZMargin ? 1 : -1;\n\t\t\t\t\t_quat = _glMatrix2.default.quat.clone([0, 0, Math.sin(angle), Math.cos(angle)]);\n\t\t\t\t\t_glMatrix2.default.quat.multiply(_quat, mTempRotation, _quat);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tvar v = _glMatrix2.default.vec3.clone([this._diffX.value, this._diffY.value, 0]);\n\t\t\t\tvar axis = _glMatrix2.default.vec3.create();\n\t\t\t\t_glMatrix2.default.vec3.cross(axis, v, this._zAxis);\n\t\t\t\t_glMatrix2.default.vec3.normalize(axis, axis);\n\t\t\t\tangle = _glMatrix2.default.vec3.length(v) * this._offset;\n\t\t\t\t_quat = _glMatrix2.default.quat.clone([Math.sin(angle) * axis[0], Math.sin(angle) * axis[1], Math.sin(angle) * axis[2], Math.cos(angle)]);\n\t\t\t\t_glMatrix2.default.quat.multiply(mTempRotation, _quat, mTempRotation);\n\t\t\t}\n\t\t}\n\t}, {\n\t\tkey: '_loop',\n\t\tvalue: function _loop() {\n\t\t\t_glMatrix2.default.mat4.identity(this.m);\n\n\t\t\tif (this._targetQuat === undefined) {\n\t\t\t\t_glMatrix2.default.quat.set(this.tempRotation, this._rotation[0], this._rotation[1], this._rotation[2], this._rotation[3]);\n\t\t\t\tthis._updateRotation(this.tempRotation);\n\t\t\t} else {\n\t\t\t\tthis._slerp += (0 - this._slerp) * 0.1;\n\n\t\t\t\tif (this._slerp < 0.0005) {\n\t\t\t\t\t_glMatrix2.default.quat.copy(this._rotation, this._targetQuat);\n\t\t\t\t\t_glMatrix2.default.quat.copy(this.tempRotation, this._targetQuat);\n\t\t\t\t\tthis._targetQuat = undefined;\n\t\t\t\t\tthis._diffX.setTo(0);\n\t\t\t\t\tthis._diffY.setTo(0);\n\t\t\t\t\tthis._slerp = -1;\n\t\t\t\t} else {\n\t\t\t\t\t_glMatrix2.default.quat.set(this.tempRotation, 0, 0, 0, 0);\n\t\t\t\t\t_glMatrix2.default.quat.slerp(this.tempRotation, this._targetQuat, this._rotation, this._slerp);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t_glMatrix2.default.vec3.transformQuat(this._vZaxis, this._vZaxis, this.tempRotation);\n\n\t\t\t_glMatrix2.default.mat4.fromQuat(this.matrix, this.tempRotation);\n\t\t}\n\n\t\t//\tGETTER AND SETTER\n\n\t}, {\n\t\tkey: 'easing',\n\t\tset: function set(mValue) {\n\t\t\tthis._diffX.easing = mValue;\n\t\t\tthis._diffY.easing = mValue;\n\t\t},\n\t\tget: function get() {\n\t\t\treturn this._diffX.easing;\n\t\t}\n\t}]);\n\n\treturn QuatRotation;\n}();\n\nexports.default = QuatRotation;\n\n},{\"./EaseNumber\":37,\"gl-matrix\":1,\"scheduling\":11}],42:[function(_dereq_,module,exports){\n// ShaderLbs.js\n\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\n\n\nvar ShaderLibs = {\n\tsimpleColorFrag: \"// simpleColor.frag\\n\\n#define SHADER_NAME SIMPLE_COLOR\\n\\nprecision highp float;\\n#define GLSLIFY 1\\n\\nuniform vec3 color;\\nuniform float opacity;\\n\\nvoid main(void) {\\n    gl_FragColor = vec4(color, opacity);\\n}\",\n\tbigTriangleVert: \"// bigTriangle.vert\\n\\n#define SHADER_NAME BIG_TRIANGLE_VERTEX\\n\\nprecision highp float;\\n#define GLSLIFY 1\\nattribute vec2 aPosition;\\nvarying vec2 vTextureCoord;\\n\\nvoid main(void) {\\n    gl_Position = vec4(aPosition, 0.0, 1.0);\\n    vTextureCoord = aPosition * .5 + .5;\\n}\",\n\tgeneralVert: \"// general.vert\\n\\n#define SHADER_NAME GENERAL_VERTEX\\n\\nprecision highp float;\\n#define GLSLIFY 1\\nattribute vec3 aVertexPosition;\\nattribute vec2 aTextureCoord;\\n\\nuniform mat4 uModelMatrix;\\nuniform mat4 uViewMatrix;\\nuniform mat4 uProjectionMatrix;\\n\\nuniform vec3 position;\\nuniform vec3 scale;\\n\\nvarying vec2 vTextureCoord;\\n\\nvoid main(void) {\\n\\tvec3 pos      = aVertexPosition * scale;\\n\\tpos           += position;\\n\\tgl_Position   = uProjectionMatrix * uViewMatrix * uModelMatrix * vec4(pos, 1.0);\\n\\tvTextureCoord = aTextureCoord;\\n}\",\n\tgeneralNormalVert: \"// generalWithNormal.vert\\n\\n#define SHADER_NAME GENERAL_VERTEX\\n\\nprecision highp float;\\n#define GLSLIFY 1\\nattribute vec3 aVertexPosition;\\nattribute vec2 aTextureCoord;\\nattribute vec3 aNormal;\\n\\nuniform mat4 uModelMatrix;\\nuniform mat4 uViewMatrix;\\nuniform mat4 uProjectionMatrix;\\nuniform mat3 uNormalMatrix;\\n\\nuniform vec3 position;\\nuniform vec3 scale;\\n\\nvarying vec2 vTextureCoord;\\nvarying vec3 vNormal;\\n\\nvoid main(void) {\\n\\tvec3 pos      = aVertexPosition * scale;\\n\\tpos           += position;\\n\\tgl_Position   = uProjectionMatrix * uViewMatrix * uModelMatrix * vec4(pos, 1.0);\\n\\t\\n\\tvTextureCoord = aTextureCoord;\\n\\tvNormal       = normalize(uNormalMatrix * aNormal);\\n}\",\n\tcopyFrag: \"// copy.frag\\n\\n#define SHADER_NAME COPY_FRAGMENT\\n\\nprecision highp float;\\n#define GLSLIFY 1\\n\\nvarying vec2 vTextureCoord;\\nuniform sampler2D texture;\\n\\nvoid main(void) {\\n    gl_FragColor = texture2D(texture, vTextureCoord);\\n}\",\n\tbasicVert: \"// basic.vert\\n\\n#define SHADER_NAME BASIC_VERTEX\\n\\nprecision highp float;\\n#define GLSLIFY 1\\nattribute vec3 aVertexPosition;\\nattribute vec2 aTextureCoord;\\n\\nuniform mat4 uModelMatrix;\\nuniform mat4 uViewMatrix;\\nuniform mat4 uProjectionMatrix;\\n\\nvarying vec2 vTextureCoord;\\n\\nvoid main(void) {\\n    gl_Position = uProjectionMatrix * uViewMatrix * uModelMatrix * vec4(aVertexPosition, 1.0);\\n    vTextureCoord = aTextureCoord;\\n}\",\n\tskyboxVert: \"// basic.vert\\n\\n#define SHADER_NAME SKYBOX_VERTEX\\n\\nprecision highp float;\\n#define GLSLIFY 1\\nattribute vec3 aVertexPosition;\\nattribute vec2 aTextureCoord;\\n\\nuniform mat4 uModelMatrix;\\nuniform mat4 uViewMatrix;\\nuniform mat4 uProjectionMatrix;\\n\\nvarying vec2 vTextureCoord;\\nvarying vec3 vVertex;\\n\\nvoid main(void) {\\n\\tgl_Position = uProjectionMatrix * uViewMatrix * uModelMatrix * vec4(aVertexPosition, 1.0);\\n\\tvTextureCoord = aTextureCoord;\\n\\t\\n\\tvVertex = aVertexPosition;\\n}\",\n\tskyboxFrag: \"// basic.frag\\n\\n#define SHADER_NAME SKYBOX_FRAGMENT\\n\\nprecision highp float;\\n#define GLSLIFY 1\\nuniform samplerCube texture;\\nvarying vec2 vTextureCoord;\\nvarying vec3 vVertex;\\n\\nvoid main(void) {\\n    gl_FragColor = textureCube(texture, vVertex);\\n}\"\n};\n\nexports.default = ShaderLibs;\n\n},{}]},{},[12])(12)\n});\n\n","/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE. */\n\n/**\n * @class Common utilities\n * @name glMatrix\n */\nvar glMatrix = {};\n\n// Configuration Constants\nglMatrix.EPSILON = 0.000001;\nglMatrix.ARRAY_TYPE = (typeof Float32Array !== 'undefined') ? Float32Array : Array;\nglMatrix.RANDOM = Math.random;\nglMatrix.ENABLE_SIMD = false;\n\n// Capability detection\nglMatrix.SIMD_AVAILABLE = (glMatrix.ARRAY_TYPE === Float32Array) && ('SIMD' in this);\nglMatrix.USE_SIMD = glMatrix.ENABLE_SIMD && glMatrix.SIMD_AVAILABLE;\n\n/**\n * Sets the type of array used when creating new vectors and matrices\n *\n * @param {Type} type Array type, such as Float32Array or Array\n */\nglMatrix.setMatrixArrayType = function(type) {\n    glMatrix.ARRAY_TYPE = type;\n}\n\nvar degree = Math.PI / 180;\n\n/**\n* Convert Degree To Radian\n*\n* @param {Number} Angle in Degrees\n*/\nglMatrix.toRadian = function(a){\n     return a * degree;\n}\n\n/**\n * Tests whether or not the arguments have approximately the same value, within an absolute\n * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less \n * than or equal to 1.0, and a relative tolerance is used for larger values)\n * \n * @param {Number} a The first number to test.\n * @param {Number} b The second number to test.\n * @returns {Boolean} True if the numbers are approximately equal, false otherwise.\n */\nglMatrix.equals = function(a, b) {\n\treturn Math.abs(a - b) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a), Math.abs(b));\n}\n\nmodule.exports = glMatrix;\n","/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE. */\n\nvar glMatrix = require(\"./common.js\");\n\n/**\n * @class 2x2 Matrix\n * @name mat2\n */\nvar mat2 = {};\n\n/**\n * Creates a new identity mat2\n *\n * @returns {mat2} a new 2x2 matrix\n */\nmat2.create = function() {\n    var out = new glMatrix.ARRAY_TYPE(4);\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 1;\n    return out;\n};\n\n/**\n * Creates a new mat2 initialized with values from an existing matrix\n *\n * @param {mat2} a matrix to clone\n * @returns {mat2} a new 2x2 matrix\n */\nmat2.clone = function(a) {\n    var out = new glMatrix.ARRAY_TYPE(4);\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    return out;\n};\n\n/**\n * Copy the values from one mat2 to another\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the source matrix\n * @returns {mat2} out\n */\nmat2.copy = function(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    return out;\n};\n\n/**\n * Set a mat2 to the identity matrix\n *\n * @param {mat2} out the receiving matrix\n * @returns {mat2} out\n */\nmat2.identity = function(out) {\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 1;\n    return out;\n};\n\n/**\n * Create a new mat2 with the given values\n *\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m10 Component in column 1, row 0 position (index 2)\n * @param {Number} m11 Component in column 1, row 1 position (index 3)\n * @returns {mat2} out A new 2x2 matrix\n */\nmat2.fromValues = function(m00, m01, m10, m11) {\n    var out = new glMatrix.ARRAY_TYPE(4);\n    out[0] = m00;\n    out[1] = m01;\n    out[2] = m10;\n    out[3] = m11;\n    return out;\n};\n\n/**\n * Set the components of a mat2 to the given values\n *\n * @param {mat2} out the receiving matrix\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m10 Component in column 1, row 0 position (index 2)\n * @param {Number} m11 Component in column 1, row 1 position (index 3)\n * @returns {mat2} out\n */\nmat2.set = function(out, m00, m01, m10, m11) {\n    out[0] = m00;\n    out[1] = m01;\n    out[2] = m10;\n    out[3] = m11;\n    return out;\n};\n\n\n/**\n * Transpose the values of a mat2\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the source matrix\n * @returns {mat2} out\n */\nmat2.transpose = function(out, a) {\n    // If we are transposing ourselves we can skip a few steps but have to cache some values\n    if (out === a) {\n        var a1 = a[1];\n        out[1] = a[2];\n        out[2] = a1;\n    } else {\n        out[0] = a[0];\n        out[1] = a[2];\n        out[2] = a[1];\n        out[3] = a[3];\n    }\n    \n    return out;\n};\n\n/**\n * Inverts a mat2\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the source matrix\n * @returns {mat2} out\n */\nmat2.invert = function(out, a) {\n    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3],\n\n        // Calculate the determinant\n        det = a0 * a3 - a2 * a1;\n\n    if (!det) {\n        return null;\n    }\n    det = 1.0 / det;\n    \n    out[0] =  a3 * det;\n    out[1] = -a1 * det;\n    out[2] = -a2 * det;\n    out[3] =  a0 * det;\n\n    return out;\n};\n\n/**\n * Calculates the adjugate of a mat2\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the source matrix\n * @returns {mat2} out\n */\nmat2.adjoint = function(out, a) {\n    // Caching this value is nessecary if out == a\n    var a0 = a[0];\n    out[0] =  a[3];\n    out[1] = -a[1];\n    out[2] = -a[2];\n    out[3] =  a0;\n\n    return out;\n};\n\n/**\n * Calculates the determinant of a mat2\n *\n * @param {mat2} a the source matrix\n * @returns {Number} determinant of a\n */\nmat2.determinant = function (a) {\n    return a[0] * a[3] - a[2] * a[1];\n};\n\n/**\n * Multiplies two mat2's\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the first operand\n * @param {mat2} b the second operand\n * @returns {mat2} out\n */\nmat2.multiply = function (out, a, b) {\n    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];\n    var b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3];\n    out[0] = a0 * b0 + a2 * b1;\n    out[1] = a1 * b0 + a3 * b1;\n    out[2] = a0 * b2 + a2 * b3;\n    out[3] = a1 * b2 + a3 * b3;\n    return out;\n};\n\n/**\n * Alias for {@link mat2.multiply}\n * @function\n */\nmat2.mul = mat2.multiply;\n\n/**\n * Rotates a mat2 by the given angle\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat2} out\n */\nmat2.rotate = function (out, a, rad) {\n    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3],\n        s = Math.sin(rad),\n        c = Math.cos(rad);\n    out[0] = a0 *  c + a2 * s;\n    out[1] = a1 *  c + a3 * s;\n    out[2] = a0 * -s + a2 * c;\n    out[3] = a1 * -s + a3 * c;\n    return out;\n};\n\n/**\n * Scales the mat2 by the dimensions in the given vec2\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the matrix to rotate\n * @param {vec2} v the vec2 to scale the matrix by\n * @returns {mat2} out\n **/\nmat2.scale = function(out, a, v) {\n    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3],\n        v0 = v[0], v1 = v[1];\n    out[0] = a0 * v0;\n    out[1] = a1 * v0;\n    out[2] = a2 * v1;\n    out[3] = a3 * v1;\n    return out;\n};\n\n/**\n * Creates a matrix from a given angle\n * This is equivalent to (but much faster than):\n *\n *     mat2.identity(dest);\n *     mat2.rotate(dest, dest, rad);\n *\n * @param {mat2} out mat2 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat2} out\n */\nmat2.fromRotation = function(out, rad) {\n    var s = Math.sin(rad),\n        c = Math.cos(rad);\n    out[0] = c;\n    out[1] = s;\n    out[2] = -s;\n    out[3] = c;\n    return out;\n}\n\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat2.identity(dest);\n *     mat2.scale(dest, dest, vec);\n *\n * @param {mat2} out mat2 receiving operation result\n * @param {vec2} v Scaling vector\n * @returns {mat2} out\n */\nmat2.fromScaling = function(out, v) {\n    out[0] = v[0];\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = v[1];\n    return out;\n}\n\n/**\n * Returns a string representation of a mat2\n *\n * @param {mat2} mat matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\nmat2.str = function (a) {\n    return 'mat2(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';\n};\n\n/**\n * Returns Frobenius norm of a mat2\n *\n * @param {mat2} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\nmat2.frob = function (a) {\n    return(Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2)))\n};\n\n/**\n * Returns L, D and U matrices (Lower triangular, Diagonal and Upper triangular) by factorizing the input matrix\n * @param {mat2} L the lower triangular matrix \n * @param {mat2} D the diagonal matrix \n * @param {mat2} U the upper triangular matrix \n * @param {mat2} a the input matrix to factorize\n */\n\nmat2.LDU = function (L, D, U, a) { \n    L[2] = a[2]/a[0]; \n    U[0] = a[0]; \n    U[1] = a[1]; \n    U[3] = a[3] - L[2] * U[1]; \n    return [L, D, U];       \n}; \n\n/**\n * Adds two mat2's\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the first operand\n * @param {mat2} b the second operand\n * @returns {mat2} out\n */\nmat2.add = function(out, a, b) {\n    out[0] = a[0] + b[0];\n    out[1] = a[1] + b[1];\n    out[2] = a[2] + b[2];\n    out[3] = a[3] + b[3];\n    return out;\n};\n\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the first operand\n * @param {mat2} b the second operand\n * @returns {mat2} out\n */\nmat2.subtract = function(out, a, b) {\n    out[0] = a[0] - b[0];\n    out[1] = a[1] - b[1];\n    out[2] = a[2] - b[2];\n    out[3] = a[3] - b[3];\n    return out;\n};\n\n/**\n * Alias for {@link mat2.subtract}\n * @function\n */\nmat2.sub = mat2.subtract;\n\n/**\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {mat2} a The first matrix.\n * @param {mat2} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nmat2.exactEquals = function (a, b) {\n    return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\n};\n\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {mat2} a The first matrix.\n * @param {mat2} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nmat2.equals = function (a, b) {\n    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];\n    var b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3];\n    return (Math.abs(a0 - b0) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n            Math.abs(a1 - b1) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\n            Math.abs(a2 - b2) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&\n            Math.abs(a3 - b3) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a3), Math.abs(b3)));\n};\n\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat2} out\n */\nmat2.multiplyScalar = function(out, a, b) {\n    out[0] = a[0] * b;\n    out[1] = a[1] * b;\n    out[2] = a[2] * b;\n    out[3] = a[3] * b;\n    return out;\n};\n\n/**\n * Adds two mat2's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat2} out the receiving vector\n * @param {mat2} a the first operand\n * @param {mat2} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat2} out\n */\nmat2.multiplyScalarAndAdd = function(out, a, b, scale) {\n    out[0] = a[0] + (b[0] * scale);\n    out[1] = a[1] + (b[1] * scale);\n    out[2] = a[2] + (b[2] * scale);\n    out[3] = a[3] + (b[3] * scale);\n    return out;\n};\n\nmodule.exports = mat2;\n","/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE. */\n\nvar glMatrix = require(\"./common.js\");\n\n/**\n * @class 2x3 Matrix\n * @name mat2d\n * \n * @description \n * A mat2d contains six elements defined as:\n * <pre>\n * [a, c, tx,\n *  b, d, ty]\n * </pre>\n * This is a short form for the 3x3 matrix:\n * <pre>\n * [a, c, tx,\n *  b, d, ty,\n *  0, 0, 1]\n * </pre>\n * The last row is ignored so the array is shorter and operations are faster.\n */\nvar mat2d = {};\n\n/**\n * Creates a new identity mat2d\n *\n * @returns {mat2d} a new 2x3 matrix\n */\nmat2d.create = function() {\n    var out = new glMatrix.ARRAY_TYPE(6);\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 1;\n    out[4] = 0;\n    out[5] = 0;\n    return out;\n};\n\n/**\n * Creates a new mat2d initialized with values from an existing matrix\n *\n * @param {mat2d} a matrix to clone\n * @returns {mat2d} a new 2x3 matrix\n */\nmat2d.clone = function(a) {\n    var out = new glMatrix.ARRAY_TYPE(6);\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[4] = a[4];\n    out[5] = a[5];\n    return out;\n};\n\n/**\n * Copy the values from one mat2d to another\n *\n * @param {mat2d} out the receiving matrix\n * @param {mat2d} a the source matrix\n * @returns {mat2d} out\n */\nmat2d.copy = function(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[4] = a[4];\n    out[5] = a[5];\n    return out;\n};\n\n/**\n * Set a mat2d to the identity matrix\n *\n * @param {mat2d} out the receiving matrix\n * @returns {mat2d} out\n */\nmat2d.identity = function(out) {\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 1;\n    out[4] = 0;\n    out[5] = 0;\n    return out;\n};\n\n/**\n * Create a new mat2d with the given values\n *\n * @param {Number} a Component A (index 0)\n * @param {Number} b Component B (index 1)\n * @param {Number} c Component C (index 2)\n * @param {Number} d Component D (index 3)\n * @param {Number} tx Component TX (index 4)\n * @param {Number} ty Component TY (index 5)\n * @returns {mat2d} A new mat2d\n */\nmat2d.fromValues = function(a, b, c, d, tx, ty) {\n    var out = new glMatrix.ARRAY_TYPE(6);\n    out[0] = a;\n    out[1] = b;\n    out[2] = c;\n    out[3] = d;\n    out[4] = tx;\n    out[5] = ty;\n    return out;\n};\n\n/**\n * Set the components of a mat2d to the given values\n *\n * @param {mat2d} out the receiving matrix\n * @param {Number} a Component A (index 0)\n * @param {Number} b Component B (index 1)\n * @param {Number} c Component C (index 2)\n * @param {Number} d Component D (index 3)\n * @param {Number} tx Component TX (index 4)\n * @param {Number} ty Component TY (index 5)\n * @returns {mat2d} out\n */\nmat2d.set = function(out, a, b, c, d, tx, ty) {\n    out[0] = a;\n    out[1] = b;\n    out[2] = c;\n    out[3] = d;\n    out[4] = tx;\n    out[5] = ty;\n    return out;\n};\n\n/**\n * Inverts a mat2d\n *\n * @param {mat2d} out the receiving matrix\n * @param {mat2d} a the source matrix\n * @returns {mat2d} out\n */\nmat2d.invert = function(out, a) {\n    var aa = a[0], ab = a[1], ac = a[2], ad = a[3],\n        atx = a[4], aty = a[5];\n\n    var det = aa * ad - ab * ac;\n    if(!det){\n        return null;\n    }\n    det = 1.0 / det;\n\n    out[0] = ad * det;\n    out[1] = -ab * det;\n    out[2] = -ac * det;\n    out[3] = aa * det;\n    out[4] = (ac * aty - ad * atx) * det;\n    out[5] = (ab * atx - aa * aty) * det;\n    return out;\n};\n\n/**\n * Calculates the determinant of a mat2d\n *\n * @param {mat2d} a the source matrix\n * @returns {Number} determinant of a\n */\nmat2d.determinant = function (a) {\n    return a[0] * a[3] - a[1] * a[2];\n};\n\n/**\n * Multiplies two mat2d's\n *\n * @param {mat2d} out the receiving matrix\n * @param {mat2d} a the first operand\n * @param {mat2d} b the second operand\n * @returns {mat2d} out\n */\nmat2d.multiply = function (out, a, b) {\n    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5],\n        b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3], b4 = b[4], b5 = b[5];\n    out[0] = a0 * b0 + a2 * b1;\n    out[1] = a1 * b0 + a3 * b1;\n    out[2] = a0 * b2 + a2 * b3;\n    out[3] = a1 * b2 + a3 * b3;\n    out[4] = a0 * b4 + a2 * b5 + a4;\n    out[5] = a1 * b4 + a3 * b5 + a5;\n    return out;\n};\n\n/**\n * Alias for {@link mat2d.multiply}\n * @function\n */\nmat2d.mul = mat2d.multiply;\n\n/**\n * Rotates a mat2d by the given angle\n *\n * @param {mat2d} out the receiving matrix\n * @param {mat2d} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat2d} out\n */\nmat2d.rotate = function (out, a, rad) {\n    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5],\n        s = Math.sin(rad),\n        c = Math.cos(rad);\n    out[0] = a0 *  c + a2 * s;\n    out[1] = a1 *  c + a3 * s;\n    out[2] = a0 * -s + a2 * c;\n    out[3] = a1 * -s + a3 * c;\n    out[4] = a4;\n    out[5] = a5;\n    return out;\n};\n\n/**\n * Scales the mat2d by the dimensions in the given vec2\n *\n * @param {mat2d} out the receiving matrix\n * @param {mat2d} a the matrix to translate\n * @param {vec2} v the vec2 to scale the matrix by\n * @returns {mat2d} out\n **/\nmat2d.scale = function(out, a, v) {\n    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5],\n        v0 = v[0], v1 = v[1];\n    out[0] = a0 * v0;\n    out[1] = a1 * v0;\n    out[2] = a2 * v1;\n    out[3] = a3 * v1;\n    out[4] = a4;\n    out[5] = a5;\n    return out;\n};\n\n/**\n * Translates the mat2d by the dimensions in the given vec2\n *\n * @param {mat2d} out the receiving matrix\n * @param {mat2d} a the matrix to translate\n * @param {vec2} v the vec2 to translate the matrix by\n * @returns {mat2d} out\n **/\nmat2d.translate = function(out, a, v) {\n    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5],\n        v0 = v[0], v1 = v[1];\n    out[0] = a0;\n    out[1] = a1;\n    out[2] = a2;\n    out[3] = a3;\n    out[4] = a0 * v0 + a2 * v1 + a4;\n    out[5] = a1 * v0 + a3 * v1 + a5;\n    return out;\n};\n\n/**\n * Creates a matrix from a given angle\n * This is equivalent to (but much faster than):\n *\n *     mat2d.identity(dest);\n *     mat2d.rotate(dest, dest, rad);\n *\n * @param {mat2d} out mat2d receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat2d} out\n */\nmat2d.fromRotation = function(out, rad) {\n    var s = Math.sin(rad), c = Math.cos(rad);\n    out[0] = c;\n    out[1] = s;\n    out[2] = -s;\n    out[3] = c;\n    out[4] = 0;\n    out[5] = 0;\n    return out;\n}\n\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat2d.identity(dest);\n *     mat2d.scale(dest, dest, vec);\n *\n * @param {mat2d} out mat2d receiving operation result\n * @param {vec2} v Scaling vector\n * @returns {mat2d} out\n */\nmat2d.fromScaling = function(out, v) {\n    out[0] = v[0];\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = v[1];\n    out[4] = 0;\n    out[5] = 0;\n    return out;\n}\n\n/**\n * Creates a matrix from a vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat2d.identity(dest);\n *     mat2d.translate(dest, dest, vec);\n *\n * @param {mat2d} out mat2d receiving operation result\n * @param {vec2} v Translation vector\n * @returns {mat2d} out\n */\nmat2d.fromTranslation = function(out, v) {\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 1;\n    out[4] = v[0];\n    out[5] = v[1];\n    return out;\n}\n\n/**\n * Returns a string representation of a mat2d\n *\n * @param {mat2d} a matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\nmat2d.str = function (a) {\n    return 'mat2d(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + \n                    a[3] + ', ' + a[4] + ', ' + a[5] + ')';\n};\n\n/**\n * Returns Frobenius norm of a mat2d\n *\n * @param {mat2d} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\nmat2d.frob = function (a) { \n    return(Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + 1))\n}; \n\n/**\n * Adds two mat2d's\n *\n * @param {mat2d} out the receiving matrix\n * @param {mat2d} a the first operand\n * @param {mat2d} b the second operand\n * @returns {mat2d} out\n */\nmat2d.add = function(out, a, b) {\n    out[0] = a[0] + b[0];\n    out[1] = a[1] + b[1];\n    out[2] = a[2] + b[2];\n    out[3] = a[3] + b[3];\n    out[4] = a[4] + b[4];\n    out[5] = a[5] + b[5];\n    return out;\n};\n\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat2d} out the receiving matrix\n * @param {mat2d} a the first operand\n * @param {mat2d} b the second operand\n * @returns {mat2d} out\n */\nmat2d.subtract = function(out, a, b) {\n    out[0] = a[0] - b[0];\n    out[1] = a[1] - b[1];\n    out[2] = a[2] - b[2];\n    out[3] = a[3] - b[3];\n    out[4] = a[4] - b[4];\n    out[5] = a[5] - b[5];\n    return out;\n};\n\n/**\n * Alias for {@link mat2d.subtract}\n * @function\n */\nmat2d.sub = mat2d.subtract;\n\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat2d} out the receiving matrix\n * @param {mat2d} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat2d} out\n */\nmat2d.multiplyScalar = function(out, a, b) {\n    out[0] = a[0] * b;\n    out[1] = a[1] * b;\n    out[2] = a[2] * b;\n    out[3] = a[3] * b;\n    out[4] = a[4] * b;\n    out[5] = a[5] * b;\n    return out;\n};\n\n/**\n * Adds two mat2d's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat2d} out the receiving vector\n * @param {mat2d} a the first operand\n * @param {mat2d} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat2d} out\n */\nmat2d.multiplyScalarAndAdd = function(out, a, b, scale) {\n    out[0] = a[0] + (b[0] * scale);\n    out[1] = a[1] + (b[1] * scale);\n    out[2] = a[2] + (b[2] * scale);\n    out[3] = a[3] + (b[3] * scale);\n    out[4] = a[4] + (b[4] * scale);\n    out[5] = a[5] + (b[5] * scale);\n    return out;\n};\n\n/**\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {mat2d} a The first matrix.\n * @param {mat2d} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nmat2d.exactEquals = function (a, b) {\n    return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5];\n};\n\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {mat2d} a The first matrix.\n * @param {mat2d} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nmat2d.equals = function (a, b) {\n    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5];\n    var b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3], b4 = b[4], b5 = b[5];\n    return (Math.abs(a0 - b0) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n            Math.abs(a1 - b1) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\n            Math.abs(a2 - b2) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&\n            Math.abs(a3 - b3) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a3), Math.abs(b3)) &&\n            Math.abs(a4 - b4) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a4), Math.abs(b4)) &&\n            Math.abs(a5 - b5) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a5), Math.abs(b5)));\n};\n\nmodule.exports = mat2d;\n","/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE. */\n\nvar glMatrix = require(\"./common.js\");\n\n/**\n * @class 3x3 Matrix\n * @name mat3\n */\nvar mat3 = {};\n\n/**\n * Creates a new identity mat3\n *\n * @returns {mat3} a new 3x3 matrix\n */\nmat3.create = function() {\n    var out = new glMatrix.ARRAY_TYPE(9);\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 1;\n    out[5] = 0;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 1;\n    return out;\n};\n\n/**\n * Copies the upper-left 3x3 values into the given mat3.\n *\n * @param {mat3} out the receiving 3x3 matrix\n * @param {mat4} a   the source 4x4 matrix\n * @returns {mat3} out\n */\nmat3.fromMat4 = function(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[4];\n    out[4] = a[5];\n    out[5] = a[6];\n    out[6] = a[8];\n    out[7] = a[9];\n    out[8] = a[10];\n    return out;\n};\n\n/**\n * Creates a new mat3 initialized with values from an existing matrix\n *\n * @param {mat3} a matrix to clone\n * @returns {mat3} a new 3x3 matrix\n */\nmat3.clone = function(a) {\n    var out = new glMatrix.ARRAY_TYPE(9);\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[8] = a[8];\n    return out;\n};\n\n/**\n * Copy the values from one mat3 to another\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the source matrix\n * @returns {mat3} out\n */\nmat3.copy = function(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[8] = a[8];\n    return out;\n};\n\n/**\n * Create a new mat3 with the given values\n *\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\n * @returns {mat3} A new mat3\n */\nmat3.fromValues = function(m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n    var out = new glMatrix.ARRAY_TYPE(9);\n    out[0] = m00;\n    out[1] = m01;\n    out[2] = m02;\n    out[3] = m10;\n    out[4] = m11;\n    out[5] = m12;\n    out[6] = m20;\n    out[7] = m21;\n    out[8] = m22;\n    return out;\n};\n\n/**\n * Set the components of a mat3 to the given values\n *\n * @param {mat3} out the receiving matrix\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\n * @returns {mat3} out\n */\nmat3.set = function(out, m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n    out[0] = m00;\n    out[1] = m01;\n    out[2] = m02;\n    out[3] = m10;\n    out[4] = m11;\n    out[5] = m12;\n    out[6] = m20;\n    out[7] = m21;\n    out[8] = m22;\n    return out;\n};\n\n/**\n * Set a mat3 to the identity matrix\n *\n * @param {mat3} out the receiving matrix\n * @returns {mat3} out\n */\nmat3.identity = function(out) {\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 1;\n    out[5] = 0;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 1;\n    return out;\n};\n\n/**\n * Transpose the values of a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the source matrix\n * @returns {mat3} out\n */\nmat3.transpose = function(out, a) {\n    // If we are transposing ourselves we can skip a few steps but have to cache some values\n    if (out === a) {\n        var a01 = a[1], a02 = a[2], a12 = a[5];\n        out[1] = a[3];\n        out[2] = a[6];\n        out[3] = a01;\n        out[5] = a[7];\n        out[6] = a02;\n        out[7] = a12;\n    } else {\n        out[0] = a[0];\n        out[1] = a[3];\n        out[2] = a[6];\n        out[3] = a[1];\n        out[4] = a[4];\n        out[5] = a[7];\n        out[6] = a[2];\n        out[7] = a[5];\n        out[8] = a[8];\n    }\n    \n    return out;\n};\n\n/**\n * Inverts a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the source matrix\n * @returns {mat3} out\n */\nmat3.invert = function(out, a) {\n    var a00 = a[0], a01 = a[1], a02 = a[2],\n        a10 = a[3], a11 = a[4], a12 = a[5],\n        a20 = a[6], a21 = a[7], a22 = a[8],\n\n        b01 = a22 * a11 - a12 * a21,\n        b11 = -a22 * a10 + a12 * a20,\n        b21 = a21 * a10 - a11 * a20,\n\n        // Calculate the determinant\n        det = a00 * b01 + a01 * b11 + a02 * b21;\n\n    if (!det) { \n        return null; \n    }\n    det = 1.0 / det;\n\n    out[0] = b01 * det;\n    out[1] = (-a22 * a01 + a02 * a21) * det;\n    out[2] = (a12 * a01 - a02 * a11) * det;\n    out[3] = b11 * det;\n    out[4] = (a22 * a00 - a02 * a20) * det;\n    out[5] = (-a12 * a00 + a02 * a10) * det;\n    out[6] = b21 * det;\n    out[7] = (-a21 * a00 + a01 * a20) * det;\n    out[8] = (a11 * a00 - a01 * a10) * det;\n    return out;\n};\n\n/**\n * Calculates the adjugate of a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the source matrix\n * @returns {mat3} out\n */\nmat3.adjoint = function(out, a) {\n    var a00 = a[0], a01 = a[1], a02 = a[2],\n        a10 = a[3], a11 = a[4], a12 = a[5],\n        a20 = a[6], a21 = a[7], a22 = a[8];\n\n    out[0] = (a11 * a22 - a12 * a21);\n    out[1] = (a02 * a21 - a01 * a22);\n    out[2] = (a01 * a12 - a02 * a11);\n    out[3] = (a12 * a20 - a10 * a22);\n    out[4] = (a00 * a22 - a02 * a20);\n    out[5] = (a02 * a10 - a00 * a12);\n    out[6] = (a10 * a21 - a11 * a20);\n    out[7] = (a01 * a20 - a00 * a21);\n    out[8] = (a00 * a11 - a01 * a10);\n    return out;\n};\n\n/**\n * Calculates the determinant of a mat3\n *\n * @param {mat3} a the source matrix\n * @returns {Number} determinant of a\n */\nmat3.determinant = function (a) {\n    var a00 = a[0], a01 = a[1], a02 = a[2],\n        a10 = a[3], a11 = a[4], a12 = a[5],\n        a20 = a[6], a21 = a[7], a22 = a[8];\n\n    return a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20);\n};\n\n/**\n * Multiplies two mat3's\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the first operand\n * @param {mat3} b the second operand\n * @returns {mat3} out\n */\nmat3.multiply = function (out, a, b) {\n    var a00 = a[0], a01 = a[1], a02 = a[2],\n        a10 = a[3], a11 = a[4], a12 = a[5],\n        a20 = a[6], a21 = a[7], a22 = a[8],\n\n        b00 = b[0], b01 = b[1], b02 = b[2],\n        b10 = b[3], b11 = b[4], b12 = b[5],\n        b20 = b[6], b21 = b[7], b22 = b[8];\n\n    out[0] = b00 * a00 + b01 * a10 + b02 * a20;\n    out[1] = b00 * a01 + b01 * a11 + b02 * a21;\n    out[2] = b00 * a02 + b01 * a12 + b02 * a22;\n\n    out[3] = b10 * a00 + b11 * a10 + b12 * a20;\n    out[4] = b10 * a01 + b11 * a11 + b12 * a21;\n    out[5] = b10 * a02 + b11 * a12 + b12 * a22;\n\n    out[6] = b20 * a00 + b21 * a10 + b22 * a20;\n    out[7] = b20 * a01 + b21 * a11 + b22 * a21;\n    out[8] = b20 * a02 + b21 * a12 + b22 * a22;\n    return out;\n};\n\n/**\n * Alias for {@link mat3.multiply}\n * @function\n */\nmat3.mul = mat3.multiply;\n\n/**\n * Translate a mat3 by the given vector\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the matrix to translate\n * @param {vec2} v vector to translate by\n * @returns {mat3} out\n */\nmat3.translate = function(out, a, v) {\n    var a00 = a[0], a01 = a[1], a02 = a[2],\n        a10 = a[3], a11 = a[4], a12 = a[5],\n        a20 = a[6], a21 = a[7], a22 = a[8],\n        x = v[0], y = v[1];\n\n    out[0] = a00;\n    out[1] = a01;\n    out[2] = a02;\n\n    out[3] = a10;\n    out[4] = a11;\n    out[5] = a12;\n\n    out[6] = x * a00 + y * a10 + a20;\n    out[7] = x * a01 + y * a11 + a21;\n    out[8] = x * a02 + y * a12 + a22;\n    return out;\n};\n\n/**\n * Rotates a mat3 by the given angle\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat3} out\n */\nmat3.rotate = function (out, a, rad) {\n    var a00 = a[0], a01 = a[1], a02 = a[2],\n        a10 = a[3], a11 = a[4], a12 = a[5],\n        a20 = a[6], a21 = a[7], a22 = a[8],\n\n        s = Math.sin(rad),\n        c = Math.cos(rad);\n\n    out[0] = c * a00 + s * a10;\n    out[1] = c * a01 + s * a11;\n    out[2] = c * a02 + s * a12;\n\n    out[3] = c * a10 - s * a00;\n    out[4] = c * a11 - s * a01;\n    out[5] = c * a12 - s * a02;\n\n    out[6] = a20;\n    out[7] = a21;\n    out[8] = a22;\n    return out;\n};\n\n/**\n * Scales the mat3 by the dimensions in the given vec2\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the matrix to rotate\n * @param {vec2} v the vec2 to scale the matrix by\n * @returns {mat3} out\n **/\nmat3.scale = function(out, a, v) {\n    var x = v[0], y = v[1];\n\n    out[0] = x * a[0];\n    out[1] = x * a[1];\n    out[2] = x * a[2];\n\n    out[3] = y * a[3];\n    out[4] = y * a[4];\n    out[5] = y * a[5];\n\n    out[6] = a[6];\n    out[7] = a[7];\n    out[8] = a[8];\n    return out;\n};\n\n/**\n * Creates a matrix from a vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat3.identity(dest);\n *     mat3.translate(dest, dest, vec);\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {vec2} v Translation vector\n * @returns {mat3} out\n */\nmat3.fromTranslation = function(out, v) {\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 1;\n    out[5] = 0;\n    out[6] = v[0];\n    out[7] = v[1];\n    out[8] = 1;\n    return out;\n}\n\n/**\n * Creates a matrix from a given angle\n * This is equivalent to (but much faster than):\n *\n *     mat3.identity(dest);\n *     mat3.rotate(dest, dest, rad);\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat3} out\n */\nmat3.fromRotation = function(out, rad) {\n    var s = Math.sin(rad), c = Math.cos(rad);\n\n    out[0] = c;\n    out[1] = s;\n    out[2] = 0;\n\n    out[3] = -s;\n    out[4] = c;\n    out[5] = 0;\n\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 1;\n    return out;\n}\n\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat3.identity(dest);\n *     mat3.scale(dest, dest, vec);\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {vec2} v Scaling vector\n * @returns {mat3} out\n */\nmat3.fromScaling = function(out, v) {\n    out[0] = v[0];\n    out[1] = 0;\n    out[2] = 0;\n\n    out[3] = 0;\n    out[4] = v[1];\n    out[5] = 0;\n\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 1;\n    return out;\n}\n\n/**\n * Copies the values from a mat2d into a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {mat2d} a the matrix to copy\n * @returns {mat3} out\n **/\nmat3.fromMat2d = function(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = 0;\n\n    out[3] = a[2];\n    out[4] = a[3];\n    out[5] = 0;\n\n    out[6] = a[4];\n    out[7] = a[5];\n    out[8] = 1;\n    return out;\n};\n\n/**\n* Calculates a 3x3 matrix from the given quaternion\n*\n* @param {mat3} out mat3 receiving operation result\n* @param {quat} q Quaternion to create matrix from\n*\n* @returns {mat3} out\n*/\nmat3.fromQuat = function (out, q) {\n    var x = q[0], y = q[1], z = q[2], w = q[3],\n        x2 = x + x,\n        y2 = y + y,\n        z2 = z + z,\n\n        xx = x * x2,\n        yx = y * x2,\n        yy = y * y2,\n        zx = z * x2,\n        zy = z * y2,\n        zz = z * z2,\n        wx = w * x2,\n        wy = w * y2,\n        wz = w * z2;\n\n    out[0] = 1 - yy - zz;\n    out[3] = yx - wz;\n    out[6] = zx + wy;\n\n    out[1] = yx + wz;\n    out[4] = 1 - xx - zz;\n    out[7] = zy - wx;\n\n    out[2] = zx - wy;\n    out[5] = zy + wx;\n    out[8] = 1 - xx - yy;\n\n    return out;\n};\n\n/**\n* Calculates a 3x3 normal matrix (transpose inverse) from the 4x4 matrix\n*\n* @param {mat3} out mat3 receiving operation result\n* @param {mat4} a Mat4 to derive the normal matrix from\n*\n* @returns {mat3} out\n*/\nmat3.normalFromMat4 = function (out, a) {\n    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3],\n        a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7],\n        a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11],\n        a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15],\n\n        b00 = a00 * a11 - a01 * a10,\n        b01 = a00 * a12 - a02 * a10,\n        b02 = a00 * a13 - a03 * a10,\n        b03 = a01 * a12 - a02 * a11,\n        b04 = a01 * a13 - a03 * a11,\n        b05 = a02 * a13 - a03 * a12,\n        b06 = a20 * a31 - a21 * a30,\n        b07 = a20 * a32 - a22 * a30,\n        b08 = a20 * a33 - a23 * a30,\n        b09 = a21 * a32 - a22 * a31,\n        b10 = a21 * a33 - a23 * a31,\n        b11 = a22 * a33 - a23 * a32,\n\n        // Calculate the determinant\n        det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n    if (!det) { \n        return null; \n    }\n    det = 1.0 / det;\n\n    out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n    out[1] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n    out[2] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n\n    out[3] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n    out[4] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n    out[5] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n\n    out[6] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n    out[7] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n    out[8] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n\n    return out;\n};\n\n/**\n * Returns a string representation of a mat3\n *\n * @param {mat3} mat matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\nmat3.str = function (a) {\n    return 'mat3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + \n                    a[3] + ', ' + a[4] + ', ' + a[5] + ', ' + \n                    a[6] + ', ' + a[7] + ', ' + a[8] + ')';\n};\n\n/**\n * Returns Frobenius norm of a mat3\n *\n * @param {mat3} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\nmat3.frob = function (a) {\n    return(Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + Math.pow(a[6], 2) + Math.pow(a[7], 2) + Math.pow(a[8], 2)))\n};\n\n/**\n * Adds two mat3's\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the first operand\n * @param {mat3} b the second operand\n * @returns {mat3} out\n */\nmat3.add = function(out, a, b) {\n    out[0] = a[0] + b[0];\n    out[1] = a[1] + b[1];\n    out[2] = a[2] + b[2];\n    out[3] = a[3] + b[3];\n    out[4] = a[4] + b[4];\n    out[5] = a[5] + b[5];\n    out[6] = a[6] + b[6];\n    out[7] = a[7] + b[7];\n    out[8] = a[8] + b[8];\n    return out;\n};\n\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the first operand\n * @param {mat3} b the second operand\n * @returns {mat3} out\n */\nmat3.subtract = function(out, a, b) {\n    out[0] = a[0] - b[0];\n    out[1] = a[1] - b[1];\n    out[2] = a[2] - b[2];\n    out[3] = a[3] - b[3];\n    out[4] = a[4] - b[4];\n    out[5] = a[5] - b[5];\n    out[6] = a[6] - b[6];\n    out[7] = a[7] - b[7];\n    out[8] = a[8] - b[8];\n    return out;\n};\n\n/**\n * Alias for {@link mat3.subtract}\n * @function\n */\nmat3.sub = mat3.subtract;\n\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat3} out\n */\nmat3.multiplyScalar = function(out, a, b) {\n    out[0] = a[0] * b;\n    out[1] = a[1] * b;\n    out[2] = a[2] * b;\n    out[3] = a[3] * b;\n    out[4] = a[4] * b;\n    out[5] = a[5] * b;\n    out[6] = a[6] * b;\n    out[7] = a[7] * b;\n    out[8] = a[8] * b;\n    return out;\n};\n\n/**\n * Adds two mat3's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat3} out the receiving vector\n * @param {mat3} a the first operand\n * @param {mat3} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat3} out\n */\nmat3.multiplyScalarAndAdd = function(out, a, b, scale) {\n    out[0] = a[0] + (b[0] * scale);\n    out[1] = a[1] + (b[1] * scale);\n    out[2] = a[2] + (b[2] * scale);\n    out[3] = a[3] + (b[3] * scale);\n    out[4] = a[4] + (b[4] * scale);\n    out[5] = a[5] + (b[5] * scale);\n    out[6] = a[6] + (b[6] * scale);\n    out[7] = a[7] + (b[7] * scale);\n    out[8] = a[8] + (b[8] * scale);\n    return out;\n};\n\n/*\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {mat3} a The first matrix.\n * @param {mat3} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nmat3.exactEquals = function (a, b) {\n    return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && \n           a[3] === b[3] && a[4] === b[4] && a[5] === b[5] &&\n           a[6] === b[6] && a[7] === b[7] && a[8] === b[8];\n};\n\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {mat3} a The first matrix.\n * @param {mat3} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nmat3.equals = function (a, b) {\n    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5], a6 = a[6], a7 = a[7], a8 = a[8];\n    var b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3], b4 = b[4], b5 = b[5], b6 = a[6], b7 = b[7], b8 = b[8];\n    return (Math.abs(a0 - b0) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n            Math.abs(a1 - b1) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\n            Math.abs(a2 - b2) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&\n            Math.abs(a3 - b3) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a3), Math.abs(b3)) &&\n            Math.abs(a4 - b4) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a4), Math.abs(b4)) &&\n            Math.abs(a5 - b5) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a5), Math.abs(b5)) &&\n            Math.abs(a6 - b6) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a6), Math.abs(b6)) &&\n            Math.abs(a7 - b7) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a7), Math.abs(b7)) &&\n            Math.abs(a8 - b8) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a8), Math.abs(b8)));\n};\n\n\nmodule.exports = mat3;\n","/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE. */\n\nvar glMatrix = require(\"./common.js\");\n\n/**\n * @class 4x4 Matrix\n * @name mat4\n */\nvar mat4 = {\n  scalar: {},\n  SIMD: {},\n};\n\n/**\n * Creates a new identity mat4\n *\n * @returns {mat4} a new 4x4 matrix\n */\nmat4.create = function() {\n    var out = new glMatrix.ARRAY_TYPE(16);\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = 1;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[10] = 1;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n    out[15] = 1;\n    return out;\n};\n\n/**\n * Creates a new mat4 initialized with values from an existing matrix\n *\n * @param {mat4} a matrix to clone\n * @returns {mat4} a new 4x4 matrix\n */\nmat4.clone = function(a) {\n    var out = new glMatrix.ARRAY_TYPE(16);\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[8] = a[8];\n    out[9] = a[9];\n    out[10] = a[10];\n    out[11] = a[11];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n    return out;\n};\n\n/**\n * Copy the values from one mat4 to another\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nmat4.copy = function(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[8] = a[8];\n    out[9] = a[9];\n    out[10] = a[10];\n    out[11] = a[11];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n    return out;\n};\n\n/**\n * Create a new mat4 with the given values\n *\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\n * @returns {mat4} A new mat4\n */\nmat4.fromValues = function(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n    var out = new glMatrix.ARRAY_TYPE(16);\n    out[0] = m00;\n    out[1] = m01;\n    out[2] = m02;\n    out[3] = m03;\n    out[4] = m10;\n    out[5] = m11;\n    out[6] = m12;\n    out[7] = m13;\n    out[8] = m20;\n    out[9] = m21;\n    out[10] = m22;\n    out[11] = m23;\n    out[12] = m30;\n    out[13] = m31;\n    out[14] = m32;\n    out[15] = m33;\n    return out;\n};\n\n/**\n * Set the components of a mat4 to the given values\n *\n * @param {mat4} out the receiving matrix\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\n * @returns {mat4} out\n */\nmat4.set = function(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n    out[0] = m00;\n    out[1] = m01;\n    out[2] = m02;\n    out[3] = m03;\n    out[4] = m10;\n    out[5] = m11;\n    out[6] = m12;\n    out[7] = m13;\n    out[8] = m20;\n    out[9] = m21;\n    out[10] = m22;\n    out[11] = m23;\n    out[12] = m30;\n    out[13] = m31;\n    out[14] = m32;\n    out[15] = m33;\n    return out;\n};\n\n\n/**\n * Set a mat4 to the identity matrix\n *\n * @param {mat4} out the receiving matrix\n * @returns {mat4} out\n */\nmat4.identity = function(out) {\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = 1;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[10] = 1;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n    out[15] = 1;\n    return out;\n};\n\n/**\n * Transpose the values of a mat4 not using SIMD\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nmat4.scalar.transpose = function(out, a) {\n    // If we are transposing ourselves we can skip a few steps but have to cache some values\n    if (out === a) {\n        var a01 = a[1], a02 = a[2], a03 = a[3],\n            a12 = a[6], a13 = a[7],\n            a23 = a[11];\n\n        out[1] = a[4];\n        out[2] = a[8];\n        out[3] = a[12];\n        out[4] = a01;\n        out[6] = a[9];\n        out[7] = a[13];\n        out[8] = a02;\n        out[9] = a12;\n        out[11] = a[14];\n        out[12] = a03;\n        out[13] = a13;\n        out[14] = a23;\n    } else {\n        out[0] = a[0];\n        out[1] = a[4];\n        out[2] = a[8];\n        out[3] = a[12];\n        out[4] = a[1];\n        out[5] = a[5];\n        out[6] = a[9];\n        out[7] = a[13];\n        out[8] = a[2];\n        out[9] = a[6];\n        out[10] = a[10];\n        out[11] = a[14];\n        out[12] = a[3];\n        out[13] = a[7];\n        out[14] = a[11];\n        out[15] = a[15];\n    }\n\n    return out;\n};\n\n/**\n * Transpose the values of a mat4 using SIMD\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nmat4.SIMD.transpose = function(out, a) {\n    var a0, a1, a2, a3,\n        tmp01, tmp23,\n        out0, out1, out2, out3;\n\n    a0 = SIMD.Float32x4.load(a, 0);\n    a1 = SIMD.Float32x4.load(a, 4);\n    a2 = SIMD.Float32x4.load(a, 8);\n    a3 = SIMD.Float32x4.load(a, 12);\n\n    tmp01 = SIMD.Float32x4.shuffle(a0, a1, 0, 1, 4, 5);\n    tmp23 = SIMD.Float32x4.shuffle(a2, a3, 0, 1, 4, 5);\n    out0  = SIMD.Float32x4.shuffle(tmp01, tmp23, 0, 2, 4, 6);\n    out1  = SIMD.Float32x4.shuffle(tmp01, tmp23, 1, 3, 5, 7);\n    SIMD.Float32x4.store(out, 0,  out0);\n    SIMD.Float32x4.store(out, 4,  out1);\n\n    tmp01 = SIMD.Float32x4.shuffle(a0, a1, 2, 3, 6, 7);\n    tmp23 = SIMD.Float32x4.shuffle(a2, a3, 2, 3, 6, 7);\n    out2  = SIMD.Float32x4.shuffle(tmp01, tmp23, 0, 2, 4, 6);\n    out3  = SIMD.Float32x4.shuffle(tmp01, tmp23, 1, 3, 5, 7);\n    SIMD.Float32x4.store(out, 8,  out2);\n    SIMD.Float32x4.store(out, 12, out3);\n\n    return out;\n};\n\n/**\n * Transpse a mat4 using SIMD if available and enabled\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nmat4.transpose = glMatrix.USE_SIMD ? mat4.SIMD.transpose : mat4.scalar.transpose;\n\n/**\n * Inverts a mat4 not using SIMD\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nmat4.scalar.invert = function(out, a) {\n    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3],\n        a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7],\n        a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11],\n        a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15],\n\n        b00 = a00 * a11 - a01 * a10,\n        b01 = a00 * a12 - a02 * a10,\n        b02 = a00 * a13 - a03 * a10,\n        b03 = a01 * a12 - a02 * a11,\n        b04 = a01 * a13 - a03 * a11,\n        b05 = a02 * a13 - a03 * a12,\n        b06 = a20 * a31 - a21 * a30,\n        b07 = a20 * a32 - a22 * a30,\n        b08 = a20 * a33 - a23 * a30,\n        b09 = a21 * a32 - a22 * a31,\n        b10 = a21 * a33 - a23 * a31,\n        b11 = a22 * a33 - a23 * a32,\n\n        // Calculate the determinant\n        det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n    if (!det) {\n        return null;\n    }\n    det = 1.0 / det;\n\n    out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n    out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n    out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n    out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\n    out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n    out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n    out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n    out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\n    out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n    out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n    out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n    out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\n    out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\n    out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\n    out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\n    out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\n\n    return out;\n};\n\n/**\n * Inverts a mat4 using SIMD\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nmat4.SIMD.invert = function(out, a) {\n  var row0, row1, row2, row3,\n      tmp1,\n      minor0, minor1, minor2, minor3,\n      det,\n      a0 = SIMD.Float32x4.load(a, 0),\n      a1 = SIMD.Float32x4.load(a, 4),\n      a2 = SIMD.Float32x4.load(a, 8),\n      a3 = SIMD.Float32x4.load(a, 12);\n\n  // Compute matrix adjugate\n  tmp1 = SIMD.Float32x4.shuffle(a0, a1, 0, 1, 4, 5);\n  row1 = SIMD.Float32x4.shuffle(a2, a3, 0, 1, 4, 5);\n  row0 = SIMD.Float32x4.shuffle(tmp1, row1, 0, 2, 4, 6);\n  row1 = SIMD.Float32x4.shuffle(row1, tmp1, 1, 3, 5, 7);\n  tmp1 = SIMD.Float32x4.shuffle(a0, a1, 2, 3, 6, 7);\n  row3 = SIMD.Float32x4.shuffle(a2, a3, 2, 3, 6, 7);\n  row2 = SIMD.Float32x4.shuffle(tmp1, row3, 0, 2, 4, 6);\n  row3 = SIMD.Float32x4.shuffle(row3, tmp1, 1, 3, 5, 7);\n\n  tmp1   = SIMD.Float32x4.mul(row2, row3);\n  tmp1   = SIMD.Float32x4.swizzle(tmp1, 1, 0, 3, 2);\n  minor0 = SIMD.Float32x4.mul(row1, tmp1);\n  minor1 = SIMD.Float32x4.mul(row0, tmp1);\n  tmp1   = SIMD.Float32x4.swizzle(tmp1, 2, 3, 0, 1);\n  minor0 = SIMD.Float32x4.sub(SIMD.Float32x4.mul(row1, tmp1), minor0);\n  minor1 = SIMD.Float32x4.sub(SIMD.Float32x4.mul(row0, tmp1), minor1);\n  minor1 = SIMD.Float32x4.swizzle(minor1, 2, 3, 0, 1);\n\n  tmp1   = SIMD.Float32x4.mul(row1, row2);\n  tmp1   = SIMD.Float32x4.swizzle(tmp1, 1, 0, 3, 2);\n  minor0 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row3, tmp1), minor0);\n  minor3 = SIMD.Float32x4.mul(row0, tmp1);\n  tmp1   = SIMD.Float32x4.swizzle(tmp1, 2, 3, 0, 1);\n  minor0 = SIMD.Float32x4.sub(minor0, SIMD.Float32x4.mul(row3, tmp1));\n  minor3 = SIMD.Float32x4.sub(SIMD.Float32x4.mul(row0, tmp1), minor3);\n  minor3 = SIMD.Float32x4.swizzle(minor3, 2, 3, 0, 1);\n\n  tmp1   = SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(row1, 2, 3, 0, 1), row3);\n  tmp1   = SIMD.Float32x4.swizzle(tmp1, 1, 0, 3, 2);\n  row2   = SIMD.Float32x4.swizzle(row2, 2, 3, 0, 1);\n  minor0 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row2, tmp1), minor0);\n  minor2 = SIMD.Float32x4.mul(row0, tmp1);\n  tmp1   = SIMD.Float32x4.swizzle(tmp1, 2, 3, 0, 1);\n  minor0 = SIMD.Float32x4.sub(minor0, SIMD.Float32x4.mul(row2, tmp1));\n  minor2 = SIMD.Float32x4.sub(SIMD.Float32x4.mul(row0, tmp1), minor2);\n  minor2 = SIMD.Float32x4.swizzle(minor2, 2, 3, 0, 1);\n\n  tmp1   = SIMD.Float32x4.mul(row0, row1);\n  tmp1   = SIMD.Float32x4.swizzle(tmp1, 1, 0, 3, 2);\n  minor2 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row3, tmp1), minor2);\n  minor3 = SIMD.Float32x4.sub(SIMD.Float32x4.mul(row2, tmp1), minor3);\n  tmp1   = SIMD.Float32x4.swizzle(tmp1, 2, 3, 0, 1);\n  minor2 = SIMD.Float32x4.sub(SIMD.Float32x4.mul(row3, tmp1), minor2);\n  minor3 = SIMD.Float32x4.sub(minor3, SIMD.Float32x4.mul(row2, tmp1));\n\n  tmp1   = SIMD.Float32x4.mul(row0, row3);\n  tmp1   = SIMD.Float32x4.swizzle(tmp1, 1, 0, 3, 2);\n  minor1 = SIMD.Float32x4.sub(minor1, SIMD.Float32x4.mul(row2, tmp1));\n  minor2 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row1, tmp1), minor2);\n  tmp1   = SIMD.Float32x4.swizzle(tmp1, 2, 3, 0, 1);\n  minor1 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row2, tmp1), minor1);\n  minor2 = SIMD.Float32x4.sub(minor2, SIMD.Float32x4.mul(row1, tmp1));\n\n  tmp1   = SIMD.Float32x4.mul(row0, row2);\n  tmp1   = SIMD.Float32x4.swizzle(tmp1, 1, 0, 3, 2);\n  minor1 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row3, tmp1), minor1);\n  minor3 = SIMD.Float32x4.sub(minor3, SIMD.Float32x4.mul(row1, tmp1));\n  tmp1   = SIMD.Float32x4.swizzle(tmp1, 2, 3, 0, 1);\n  minor1 = SIMD.Float32x4.sub(minor1, SIMD.Float32x4.mul(row3, tmp1));\n  minor3 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row1, tmp1), minor3);\n\n  // Compute matrix determinant\n  det   = SIMD.Float32x4.mul(row0, minor0);\n  det   = SIMD.Float32x4.add(SIMD.Float32x4.swizzle(det, 2, 3, 0, 1), det);\n  det   = SIMD.Float32x4.add(SIMD.Float32x4.swizzle(det, 1, 0, 3, 2), det);\n  tmp1  = SIMD.Float32x4.reciprocalApproximation(det);\n  det   = SIMD.Float32x4.sub(\n               SIMD.Float32x4.add(tmp1, tmp1),\n               SIMD.Float32x4.mul(det, SIMD.Float32x4.mul(tmp1, tmp1)));\n  det   = SIMD.Float32x4.swizzle(det, 0, 0, 0, 0);\n  if (!det) {\n      return null;\n  }\n\n  // Compute matrix inverse\n  SIMD.Float32x4.store(out, 0,  SIMD.Float32x4.mul(det, minor0));\n  SIMD.Float32x4.store(out, 4,  SIMD.Float32x4.mul(det, minor1));\n  SIMD.Float32x4.store(out, 8,  SIMD.Float32x4.mul(det, minor2));\n  SIMD.Float32x4.store(out, 12, SIMD.Float32x4.mul(det, minor3));\n  return out;\n}\n\n/**\n * Inverts a mat4 using SIMD if available and enabled\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nmat4.invert = glMatrix.USE_SIMD ? mat4.SIMD.invert : mat4.scalar.invert;\n\n/**\n * Calculates the adjugate of a mat4 not using SIMD\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nmat4.scalar.adjoint = function(out, a) {\n    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3],\n        a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7],\n        a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11],\n        a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];\n\n    out[0]  =  (a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22));\n    out[1]  = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));\n    out[2]  =  (a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12));\n    out[3]  = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));\n    out[4]  = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));\n    out[5]  =  (a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22));\n    out[6]  = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));\n    out[7]  =  (a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12));\n    out[8]  =  (a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21));\n    out[9]  = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));\n    out[10] =  (a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11));\n    out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));\n    out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));\n    out[13] =  (a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21));\n    out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));\n    out[15] =  (a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11));\n    return out;\n};\n\n/**\n * Calculates the adjugate of a mat4 using SIMD\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nmat4.SIMD.adjoint = function(out, a) {\n  var a0, a1, a2, a3;\n  var row0, row1, row2, row3;\n  var tmp1;\n  var minor0, minor1, minor2, minor3;\n\n  var a0 = SIMD.Float32x4.load(a, 0);\n  var a1 = SIMD.Float32x4.load(a, 4);\n  var a2 = SIMD.Float32x4.load(a, 8);\n  var a3 = SIMD.Float32x4.load(a, 12);\n\n  // Transpose the source matrix.  Sort of.  Not a true transpose operation\n  tmp1 = SIMD.Float32x4.shuffle(a0, a1, 0, 1, 4, 5);\n  row1 = SIMD.Float32x4.shuffle(a2, a3, 0, 1, 4, 5);\n  row0 = SIMD.Float32x4.shuffle(tmp1, row1, 0, 2, 4, 6);\n  row1 = SIMD.Float32x4.shuffle(row1, tmp1, 1, 3, 5, 7);\n\n  tmp1 = SIMD.Float32x4.shuffle(a0, a1, 2, 3, 6, 7);\n  row3 = SIMD.Float32x4.shuffle(a2, a3, 2, 3, 6, 7);\n  row2 = SIMD.Float32x4.shuffle(tmp1, row3, 0, 2, 4, 6);\n  row3 = SIMD.Float32x4.shuffle(row3, tmp1, 1, 3, 5, 7);\n\n  tmp1   = SIMD.Float32x4.mul(row2, row3);\n  tmp1   = SIMD.Float32x4.swizzle(tmp1, 1, 0, 3, 2);\n  minor0 = SIMD.Float32x4.mul(row1, tmp1);\n  minor1 = SIMD.Float32x4.mul(row0, tmp1);\n  tmp1   = SIMD.Float32x4.swizzle(tmp1, 2, 3, 0, 1);\n  minor0 = SIMD.Float32x4.sub(SIMD.Float32x4.mul(row1, tmp1), minor0);\n  minor1 = SIMD.Float32x4.sub(SIMD.Float32x4.mul(row0, tmp1), minor1);\n  minor1 = SIMD.Float32x4.swizzle(minor1, 2, 3, 0, 1);\n\n  tmp1   = SIMD.Float32x4.mul(row1, row2);\n  tmp1   = SIMD.Float32x4.swizzle(tmp1, 1, 0, 3, 2);\n  minor0 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row3, tmp1), minor0);\n  minor3 = SIMD.Float32x4.mul(row0, tmp1);\n  tmp1   = SIMD.Float32x4.swizzle(tmp1, 2, 3, 0, 1);\n  minor0 = SIMD.Float32x4.sub(minor0, SIMD.Float32x4.mul(row3, tmp1));\n  minor3 = SIMD.Float32x4.sub(SIMD.Float32x4.mul(row0, tmp1), minor3);\n  minor3 = SIMD.Float32x4.swizzle(minor3, 2, 3, 0, 1);\n\n  tmp1   = SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(row1, 2, 3, 0, 1), row3);\n  tmp1   = SIMD.Float32x4.swizzle(tmp1, 1, 0, 3, 2);\n  row2   = SIMD.Float32x4.swizzle(row2, 2, 3, 0, 1);\n  minor0 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row2, tmp1), minor0);\n  minor2 = SIMD.Float32x4.mul(row0, tmp1);\n  tmp1   = SIMD.Float32x4.swizzle(tmp1, 2, 3, 0, 1);\n  minor0 = SIMD.Float32x4.sub(minor0, SIMD.Float32x4.mul(row2, tmp1));\n  minor2 = SIMD.Float32x4.sub(SIMD.Float32x4.mul(row0, tmp1), minor2);\n  minor2 = SIMD.Float32x4.swizzle(minor2, 2, 3, 0, 1);\n\n  tmp1   = SIMD.Float32x4.mul(row0, row1);\n  tmp1   = SIMD.Float32x4.swizzle(tmp1, 1, 0, 3, 2);\n  minor2 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row3, tmp1), minor2);\n  minor3 = SIMD.Float32x4.sub(SIMD.Float32x4.mul(row2, tmp1), minor3);\n  tmp1   = SIMD.Float32x4.swizzle(tmp1, 2, 3, 0, 1);\n  minor2 = SIMD.Float32x4.sub(SIMD.Float32x4.mul(row3, tmp1), minor2);\n  minor3 = SIMD.Float32x4.sub(minor3, SIMD.Float32x4.mul(row2, tmp1));\n\n  tmp1   = SIMD.Float32x4.mul(row0, row3);\n  tmp1   = SIMD.Float32x4.swizzle(tmp1, 1, 0, 3, 2);\n  minor1 = SIMD.Float32x4.sub(minor1, SIMD.Float32x4.mul(row2, tmp1));\n  minor2 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row1, tmp1), minor2);\n  tmp1   = SIMD.Float32x4.swizzle(tmp1, 2, 3, 0, 1);\n  minor1 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row2, tmp1), minor1);\n  minor2 = SIMD.Float32x4.sub(minor2, SIMD.Float32x4.mul(row1, tmp1));\n\n  tmp1   = SIMD.Float32x4.mul(row0, row2);\n  tmp1   = SIMD.Float32x4.swizzle(tmp1, 1, 0, 3, 2);\n  minor1 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row3, tmp1), minor1);\n  minor3 = SIMD.Float32x4.sub(minor3, SIMD.Float32x4.mul(row1, tmp1));\n  tmp1   = SIMD.Float32x4.swizzle(tmp1, 2, 3, 0, 1);\n  minor1 = SIMD.Float32x4.sub(minor1, SIMD.Float32x4.mul(row3, tmp1));\n  minor3 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row1, tmp1), minor3);\n\n  SIMD.Float32x4.store(out, 0,  minor0);\n  SIMD.Float32x4.store(out, 4,  minor1);\n  SIMD.Float32x4.store(out, 8,  minor2);\n  SIMD.Float32x4.store(out, 12, minor3);\n  return out;\n};\n\n/**\n * Calculates the adjugate of a mat4 using SIMD if available and enabled\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\n mat4.adjoint = glMatrix.USE_SIMD ? mat4.SIMD.adjoint : mat4.scalar.adjoint;\n\n/**\n * Calculates the determinant of a mat4\n *\n * @param {mat4} a the source matrix\n * @returns {Number} determinant of a\n */\nmat4.determinant = function (a) {\n    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3],\n        a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7],\n        a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11],\n        a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15],\n\n        b00 = a00 * a11 - a01 * a10,\n        b01 = a00 * a12 - a02 * a10,\n        b02 = a00 * a13 - a03 * a10,\n        b03 = a01 * a12 - a02 * a11,\n        b04 = a01 * a13 - a03 * a11,\n        b05 = a02 * a13 - a03 * a12,\n        b06 = a20 * a31 - a21 * a30,\n        b07 = a20 * a32 - a22 * a30,\n        b08 = a20 * a33 - a23 * a30,\n        b09 = a21 * a32 - a22 * a31,\n        b10 = a21 * a33 - a23 * a31,\n        b11 = a22 * a33 - a23 * a32;\n\n    // Calculate the determinant\n    return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n};\n\n/**\n * Multiplies two mat4's explicitly using SIMD\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the first operand, must be a Float32Array\n * @param {mat4} b the second operand, must be a Float32Array\n * @returns {mat4} out\n */\nmat4.SIMD.multiply = function (out, a, b) {\n    var a0 = SIMD.Float32x4.load(a, 0);\n    var a1 = SIMD.Float32x4.load(a, 4);\n    var a2 = SIMD.Float32x4.load(a, 8);\n    var a3 = SIMD.Float32x4.load(a, 12);\n\n    var b0 = SIMD.Float32x4.load(b, 0);\n    var out0 = SIMD.Float32x4.add(\n                   SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b0, 0, 0, 0, 0), a0),\n                   SIMD.Float32x4.add(\n                       SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b0, 1, 1, 1, 1), a1),\n                       SIMD.Float32x4.add(\n                           SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b0, 2, 2, 2, 2), a2),\n                           SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b0, 3, 3, 3, 3), a3))));\n    SIMD.Float32x4.store(out, 0, out0);\n\n    var b1 = SIMD.Float32x4.load(b, 4);\n    var out1 = SIMD.Float32x4.add(\n                   SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b1, 0, 0, 0, 0), a0),\n                   SIMD.Float32x4.add(\n                       SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b1, 1, 1, 1, 1), a1),\n                       SIMD.Float32x4.add(\n                           SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b1, 2, 2, 2, 2), a2),\n                           SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b1, 3, 3, 3, 3), a3))));\n    SIMD.Float32x4.store(out, 4, out1);\n\n    var b2 = SIMD.Float32x4.load(b, 8);\n    var out2 = SIMD.Float32x4.add(\n                   SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b2, 0, 0, 0, 0), a0),\n                   SIMD.Float32x4.add(\n                       SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b2, 1, 1, 1, 1), a1),\n                       SIMD.Float32x4.add(\n                               SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b2, 2, 2, 2, 2), a2),\n                               SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b2, 3, 3, 3, 3), a3))));\n    SIMD.Float32x4.store(out, 8, out2);\n\n    var b3 = SIMD.Float32x4.load(b, 12);\n    var out3 = SIMD.Float32x4.add(\n                   SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b3, 0, 0, 0, 0), a0),\n                   SIMD.Float32x4.add(\n                        SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b3, 1, 1, 1, 1), a1),\n                        SIMD.Float32x4.add(\n                            SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b3, 2, 2, 2, 2), a2),\n                            SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b3, 3, 3, 3, 3), a3))));\n    SIMD.Float32x4.store(out, 12, out3);\n\n    return out;\n};\n\n/**\n * Multiplies two mat4's explicitly not using SIMD\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the first operand\n * @param {mat4} b the second operand\n * @returns {mat4} out\n */\nmat4.scalar.multiply = function (out, a, b) {\n    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3],\n        a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7],\n        a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11],\n        a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];\n\n    // Cache only the current line of the second matrix\n    var b0  = b[0], b1 = b[1], b2 = b[2], b3 = b[3];\n    out[0] = b0*a00 + b1*a10 + b2*a20 + b3*a30;\n    out[1] = b0*a01 + b1*a11 + b2*a21 + b3*a31;\n    out[2] = b0*a02 + b1*a12 + b2*a22 + b3*a32;\n    out[3] = b0*a03 + b1*a13 + b2*a23 + b3*a33;\n\n    b0 = b[4]; b1 = b[5]; b2 = b[6]; b3 = b[7];\n    out[4] = b0*a00 + b1*a10 + b2*a20 + b3*a30;\n    out[5] = b0*a01 + b1*a11 + b2*a21 + b3*a31;\n    out[6] = b0*a02 + b1*a12 + b2*a22 + b3*a32;\n    out[7] = b0*a03 + b1*a13 + b2*a23 + b3*a33;\n\n    b0 = b[8]; b1 = b[9]; b2 = b[10]; b3 = b[11];\n    out[8] = b0*a00 + b1*a10 + b2*a20 + b3*a30;\n    out[9] = b0*a01 + b1*a11 + b2*a21 + b3*a31;\n    out[10] = b0*a02 + b1*a12 + b2*a22 + b3*a32;\n    out[11] = b0*a03 + b1*a13 + b2*a23 + b3*a33;\n\n    b0 = b[12]; b1 = b[13]; b2 = b[14]; b3 = b[15];\n    out[12] = b0*a00 + b1*a10 + b2*a20 + b3*a30;\n    out[13] = b0*a01 + b1*a11 + b2*a21 + b3*a31;\n    out[14] = b0*a02 + b1*a12 + b2*a22 + b3*a32;\n    out[15] = b0*a03 + b1*a13 + b2*a23 + b3*a33;\n    return out;\n};\n\n/**\n * Multiplies two mat4's using SIMD if available and enabled\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the first operand\n * @param {mat4} b the second operand\n * @returns {mat4} out\n */\nmat4.multiply = glMatrix.USE_SIMD ? mat4.SIMD.multiply : mat4.scalar.multiply;\n\n/**\n * Alias for {@link mat4.multiply}\n * @function\n */\nmat4.mul = mat4.multiply;\n\n/**\n * Translate a mat4 by the given vector not using SIMD\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to translate\n * @param {vec3} v vector to translate by\n * @returns {mat4} out\n */\nmat4.scalar.translate = function (out, a, v) {\n    var x = v[0], y = v[1], z = v[2],\n        a00, a01, a02, a03,\n        a10, a11, a12, a13,\n        a20, a21, a22, a23;\n\n    if (a === out) {\n        out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];\n        out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];\n        out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];\n        out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];\n    } else {\n        a00 = a[0]; a01 = a[1]; a02 = a[2]; a03 = a[3];\n        a10 = a[4]; a11 = a[5]; a12 = a[6]; a13 = a[7];\n        a20 = a[8]; a21 = a[9]; a22 = a[10]; a23 = a[11];\n\n        out[0] = a00; out[1] = a01; out[2] = a02; out[3] = a03;\n        out[4] = a10; out[5] = a11; out[6] = a12; out[7] = a13;\n        out[8] = a20; out[9] = a21; out[10] = a22; out[11] = a23;\n\n        out[12] = a00 * x + a10 * y + a20 * z + a[12];\n        out[13] = a01 * x + a11 * y + a21 * z + a[13];\n        out[14] = a02 * x + a12 * y + a22 * z + a[14];\n        out[15] = a03 * x + a13 * y + a23 * z + a[15];\n    }\n\n    return out;\n};\n\n/**\n * Translates a mat4 by the given vector using SIMD\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to translate\n * @param {vec3} v vector to translate by\n * @returns {mat4} out\n */\nmat4.SIMD.translate = function (out, a, v) {\n    var a0 = SIMD.Float32x4.load(a, 0),\n        a1 = SIMD.Float32x4.load(a, 4),\n        a2 = SIMD.Float32x4.load(a, 8),\n        a3 = SIMD.Float32x4.load(a, 12),\n        vec = SIMD.Float32x4(v[0], v[1], v[2] , 0);\n\n    if (a !== out) {\n        out[0] = a[0]; out[1] = a[1]; out[2] = a[2]; out[3] = a[3];\n        out[4] = a[4]; out[5] = a[5]; out[6] = a[6]; out[7] = a[7];\n        out[8] = a[8]; out[9] = a[9]; out[10] = a[10]; out[11] = a[11];\n    }\n\n    a0 = SIMD.Float32x4.mul(a0, SIMD.Float32x4.swizzle(vec, 0, 0, 0, 0));\n    a1 = SIMD.Float32x4.mul(a1, SIMD.Float32x4.swizzle(vec, 1, 1, 1, 1));\n    a2 = SIMD.Float32x4.mul(a2, SIMD.Float32x4.swizzle(vec, 2, 2, 2, 2));\n\n    var t0 = SIMD.Float32x4.add(a0, SIMD.Float32x4.add(a1, SIMD.Float32x4.add(a2, a3)));\n    SIMD.Float32x4.store(out, 12, t0);\n\n    return out;\n};\n\n/**\n * Translates a mat4 by the given vector using SIMD if available and enabled\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to translate\n * @param {vec3} v vector to translate by\n * @returns {mat4} out\n */\nmat4.translate = glMatrix.USE_SIMD ? mat4.SIMD.translate : mat4.scalar.translate;\n\n/**\n * Scales the mat4 by the dimensions in the given vec3 not using vectorization\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to scale\n * @param {vec3} v the vec3 to scale the matrix by\n * @returns {mat4} out\n **/\nmat4.scalar.scale = function(out, a, v) {\n    var x = v[0], y = v[1], z = v[2];\n\n    out[0] = a[0] * x;\n    out[1] = a[1] * x;\n    out[2] = a[2] * x;\n    out[3] = a[3] * x;\n    out[4] = a[4] * y;\n    out[5] = a[5] * y;\n    out[6] = a[6] * y;\n    out[7] = a[7] * y;\n    out[8] = a[8] * z;\n    out[9] = a[9] * z;\n    out[10] = a[10] * z;\n    out[11] = a[11] * z;\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n    return out;\n};\n\n/**\n * Scales the mat4 by the dimensions in the given vec3 using vectorization\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to scale\n * @param {vec3} v the vec3 to scale the matrix by\n * @returns {mat4} out\n **/\nmat4.SIMD.scale = function(out, a, v) {\n    var a0, a1, a2;\n    var vec = SIMD.Float32x4(v[0], v[1], v[2], 0);\n\n    a0 = SIMD.Float32x4.load(a, 0);\n    SIMD.Float32x4.store(\n        out, 0, SIMD.Float32x4.mul(a0, SIMD.Float32x4.swizzle(vec, 0, 0, 0, 0)));\n\n    a1 = SIMD.Float32x4.load(a, 4);\n    SIMD.Float32x4.store(\n        out, 4, SIMD.Float32x4.mul(a1, SIMD.Float32x4.swizzle(vec, 1, 1, 1, 1)));\n\n    a2 = SIMD.Float32x4.load(a, 8);\n    SIMD.Float32x4.store(\n        out, 8, SIMD.Float32x4.mul(a2, SIMD.Float32x4.swizzle(vec, 2, 2, 2, 2)));\n\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n    return out;\n};\n\n/**\n * Scales the mat4 by the dimensions in the given vec3 using SIMD if available and enabled\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to scale\n * @param {vec3} v the vec3 to scale the matrix by\n * @returns {mat4} out\n */\nmat4.scale = glMatrix.USE_SIMD ? mat4.SIMD.scale : mat4.scalar.scale;\n\n/**\n * Rotates a mat4 by the given angle around the given axis\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @param {vec3} axis the axis to rotate around\n * @returns {mat4} out\n */\nmat4.rotate = function (out, a, rad, axis) {\n    var x = axis[0], y = axis[1], z = axis[2],\n        len = Math.sqrt(x * x + y * y + z * z),\n        s, c, t,\n        a00, a01, a02, a03,\n        a10, a11, a12, a13,\n        a20, a21, a22, a23,\n        b00, b01, b02,\n        b10, b11, b12,\n        b20, b21, b22;\n\n    if (Math.abs(len) < glMatrix.EPSILON) { return null; }\n\n    len = 1 / len;\n    x *= len;\n    y *= len;\n    z *= len;\n\n    s = Math.sin(rad);\n    c = Math.cos(rad);\n    t = 1 - c;\n\n    a00 = a[0]; a01 = a[1]; a02 = a[2]; a03 = a[3];\n    a10 = a[4]; a11 = a[5]; a12 = a[6]; a13 = a[7];\n    a20 = a[8]; a21 = a[9]; a22 = a[10]; a23 = a[11];\n\n    // Construct the elements of the rotation matrix\n    b00 = x * x * t + c; b01 = y * x * t + z * s; b02 = z * x * t - y * s;\n    b10 = x * y * t - z * s; b11 = y * y * t + c; b12 = z * y * t + x * s;\n    b20 = x * z * t + y * s; b21 = y * z * t - x * s; b22 = z * z * t + c;\n\n    // Perform rotation-specific matrix multiplication\n    out[0] = a00 * b00 + a10 * b01 + a20 * b02;\n    out[1] = a01 * b00 + a11 * b01 + a21 * b02;\n    out[2] = a02 * b00 + a12 * b01 + a22 * b02;\n    out[3] = a03 * b00 + a13 * b01 + a23 * b02;\n    out[4] = a00 * b10 + a10 * b11 + a20 * b12;\n    out[5] = a01 * b10 + a11 * b11 + a21 * b12;\n    out[6] = a02 * b10 + a12 * b11 + a22 * b12;\n    out[7] = a03 * b10 + a13 * b11 + a23 * b12;\n    out[8] = a00 * b20 + a10 * b21 + a20 * b22;\n    out[9] = a01 * b20 + a11 * b21 + a21 * b22;\n    out[10] = a02 * b20 + a12 * b21 + a22 * b22;\n    out[11] = a03 * b20 + a13 * b21 + a23 * b22;\n\n    if (a !== out) { // If the source and destination differ, copy the unchanged last row\n        out[12] = a[12];\n        out[13] = a[13];\n        out[14] = a[14];\n        out[15] = a[15];\n    }\n    return out;\n};\n\n/**\n * Rotates a matrix by the given angle around the X axis not using SIMD\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nmat4.scalar.rotateX = function (out, a, rad) {\n    var s = Math.sin(rad),\n        c = Math.cos(rad),\n        a10 = a[4],\n        a11 = a[5],\n        a12 = a[6],\n        a13 = a[7],\n        a20 = a[8],\n        a21 = a[9],\n        a22 = a[10],\n        a23 = a[11];\n\n    if (a !== out) { // If the source and destination differ, copy the unchanged rows\n        out[0]  = a[0];\n        out[1]  = a[1];\n        out[2]  = a[2];\n        out[3]  = a[3];\n        out[12] = a[12];\n        out[13] = a[13];\n        out[14] = a[14];\n        out[15] = a[15];\n    }\n\n    // Perform axis-specific matrix multiplication\n    out[4] = a10 * c + a20 * s;\n    out[5] = a11 * c + a21 * s;\n    out[6] = a12 * c + a22 * s;\n    out[7] = a13 * c + a23 * s;\n    out[8] = a20 * c - a10 * s;\n    out[9] = a21 * c - a11 * s;\n    out[10] = a22 * c - a12 * s;\n    out[11] = a23 * c - a13 * s;\n    return out;\n};\n\n/**\n * Rotates a matrix by the given angle around the X axis using SIMD\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nmat4.SIMD.rotateX = function (out, a, rad) {\n    var s = SIMD.Float32x4.splat(Math.sin(rad)),\n        c = SIMD.Float32x4.splat(Math.cos(rad));\n\n    if (a !== out) { // If the source and destination differ, copy the unchanged rows\n      out[0]  = a[0];\n      out[1]  = a[1];\n      out[2]  = a[2];\n      out[3]  = a[3];\n      out[12] = a[12];\n      out[13] = a[13];\n      out[14] = a[14];\n      out[15] = a[15];\n    }\n\n    // Perform axis-specific matrix multiplication\n    var a_1 = SIMD.Float32x4.load(a, 4);\n    var a_2 = SIMD.Float32x4.load(a, 8);\n    SIMD.Float32x4.store(out, 4,\n                         SIMD.Float32x4.add(SIMD.Float32x4.mul(a_1, c), SIMD.Float32x4.mul(a_2, s)));\n    SIMD.Float32x4.store(out, 8,\n                         SIMD.Float32x4.sub(SIMD.Float32x4.mul(a_2, c), SIMD.Float32x4.mul(a_1, s)));\n    return out;\n};\n\n/**\n * Rotates a matrix by the given angle around the X axis using SIMD if availabe and enabled\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nmat4.rotateX = glMatrix.USE_SIMD ? mat4.SIMD.rotateX : mat4.scalar.rotateX;\n\n/**\n * Rotates a matrix by the given angle around the Y axis not using SIMD\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nmat4.scalar.rotateY = function (out, a, rad) {\n    var s = Math.sin(rad),\n        c = Math.cos(rad),\n        a00 = a[0],\n        a01 = a[1],\n        a02 = a[2],\n        a03 = a[3],\n        a20 = a[8],\n        a21 = a[9],\n        a22 = a[10],\n        a23 = a[11];\n\n    if (a !== out) { // If the source and destination differ, copy the unchanged rows\n        out[4]  = a[4];\n        out[5]  = a[5];\n        out[6]  = a[6];\n        out[7]  = a[7];\n        out[12] = a[12];\n        out[13] = a[13];\n        out[14] = a[14];\n        out[15] = a[15];\n    }\n\n    // Perform axis-specific matrix multiplication\n    out[0] = a00 * c - a20 * s;\n    out[1] = a01 * c - a21 * s;\n    out[2] = a02 * c - a22 * s;\n    out[3] = a03 * c - a23 * s;\n    out[8] = a00 * s + a20 * c;\n    out[9] = a01 * s + a21 * c;\n    out[10] = a02 * s + a22 * c;\n    out[11] = a03 * s + a23 * c;\n    return out;\n};\n\n/**\n * Rotates a matrix by the given angle around the Y axis using SIMD\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nmat4.SIMD.rotateY = function (out, a, rad) {\n    var s = SIMD.Float32x4.splat(Math.sin(rad)),\n        c = SIMD.Float32x4.splat(Math.cos(rad));\n\n    if (a !== out) { // If the source and destination differ, copy the unchanged rows\n        out[4]  = a[4];\n        out[5]  = a[5];\n        out[6]  = a[6];\n        out[7]  = a[7];\n        out[12] = a[12];\n        out[13] = a[13];\n        out[14] = a[14];\n        out[15] = a[15];\n    }\n\n    // Perform axis-specific matrix multiplication\n    var a_0 = SIMD.Float32x4.load(a, 0);\n    var a_2 = SIMD.Float32x4.load(a, 8);\n    SIMD.Float32x4.store(out, 0,\n                         SIMD.Float32x4.sub(SIMD.Float32x4.mul(a_0, c), SIMD.Float32x4.mul(a_2, s)));\n    SIMD.Float32x4.store(out, 8,\n                         SIMD.Float32x4.add(SIMD.Float32x4.mul(a_0, s), SIMD.Float32x4.mul(a_2, c)));\n    return out;\n};\n\n/**\n * Rotates a matrix by the given angle around the Y axis if SIMD available and enabled\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n mat4.rotateY = glMatrix.USE_SIMD ? mat4.SIMD.rotateY : mat4.scalar.rotateY;\n\n/**\n * Rotates a matrix by the given angle around the Z axis not using SIMD\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nmat4.scalar.rotateZ = function (out, a, rad) {\n    var s = Math.sin(rad),\n        c = Math.cos(rad),\n        a00 = a[0],\n        a01 = a[1],\n        a02 = a[2],\n        a03 = a[3],\n        a10 = a[4],\n        a11 = a[5],\n        a12 = a[6],\n        a13 = a[7];\n\n    if (a !== out) { // If the source and destination differ, copy the unchanged last row\n        out[8]  = a[8];\n        out[9]  = a[9];\n        out[10] = a[10];\n        out[11] = a[11];\n        out[12] = a[12];\n        out[13] = a[13];\n        out[14] = a[14];\n        out[15] = a[15];\n    }\n\n    // Perform axis-specific matrix multiplication\n    out[0] = a00 * c + a10 * s;\n    out[1] = a01 * c + a11 * s;\n    out[2] = a02 * c + a12 * s;\n    out[3] = a03 * c + a13 * s;\n    out[4] = a10 * c - a00 * s;\n    out[5] = a11 * c - a01 * s;\n    out[6] = a12 * c - a02 * s;\n    out[7] = a13 * c - a03 * s;\n    return out;\n};\n\n/**\n * Rotates a matrix by the given angle around the Z axis using SIMD\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nmat4.SIMD.rotateZ = function (out, a, rad) {\n    var s = SIMD.Float32x4.splat(Math.sin(rad)),\n        c = SIMD.Float32x4.splat(Math.cos(rad));\n\n    if (a !== out) { // If the source and destination differ, copy the unchanged last row\n        out[8]  = a[8];\n        out[9]  = a[9];\n        out[10] = a[10];\n        out[11] = a[11];\n        out[12] = a[12];\n        out[13] = a[13];\n        out[14] = a[14];\n        out[15] = a[15];\n    }\n\n    // Perform axis-specific matrix multiplication\n    var a_0 = SIMD.Float32x4.load(a, 0);\n    var a_1 = SIMD.Float32x4.load(a, 4);\n    SIMD.Float32x4.store(out, 0,\n                         SIMD.Float32x4.add(SIMD.Float32x4.mul(a_0, c), SIMD.Float32x4.mul(a_1, s)));\n    SIMD.Float32x4.store(out, 4,\n                         SIMD.Float32x4.sub(SIMD.Float32x4.mul(a_1, c), SIMD.Float32x4.mul(a_0, s)));\n    return out;\n};\n\n/**\n * Rotates a matrix by the given angle around the Z axis if SIMD available and enabled\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n mat4.rotateZ = glMatrix.USE_SIMD ? mat4.SIMD.rotateZ : mat4.scalar.rotateZ;\n\n/**\n * Creates a matrix from a vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, dest, vec);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {vec3} v Translation vector\n * @returns {mat4} out\n */\nmat4.fromTranslation = function(out, v) {\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = 1;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[10] = 1;\n    out[11] = 0;\n    out[12] = v[0];\n    out[13] = v[1];\n    out[14] = v[2];\n    out[15] = 1;\n    return out;\n}\n\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.scale(dest, dest, vec);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {vec3} v Scaling vector\n * @returns {mat4} out\n */\nmat4.fromScaling = function(out, v) {\n    out[0] = v[0];\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = v[1];\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[10] = v[2];\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n    out[15] = 1;\n    return out;\n}\n\n/**\n * Creates a matrix from a given angle around a given axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotate(dest, dest, rad, axis);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @param {vec3} axis the axis to rotate around\n * @returns {mat4} out\n */\nmat4.fromRotation = function(out, rad, axis) {\n    var x = axis[0], y = axis[1], z = axis[2],\n        len = Math.sqrt(x * x + y * y + z * z),\n        s, c, t;\n\n    if (Math.abs(len) < glMatrix.EPSILON) { return null; }\n\n    len = 1 / len;\n    x *= len;\n    y *= len;\n    z *= len;\n\n    s = Math.sin(rad);\n    c = Math.cos(rad);\n    t = 1 - c;\n\n    // Perform rotation-specific matrix multiplication\n    out[0] = x * x * t + c;\n    out[1] = y * x * t + z * s;\n    out[2] = z * x * t - y * s;\n    out[3] = 0;\n    out[4] = x * y * t - z * s;\n    out[5] = y * y * t + c;\n    out[6] = z * y * t + x * s;\n    out[7] = 0;\n    out[8] = x * z * t + y * s;\n    out[9] = y * z * t - x * s;\n    out[10] = z * z * t + c;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n    out[15] = 1;\n    return out;\n}\n\n/**\n * Creates a matrix from the given angle around the X axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateX(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nmat4.fromXRotation = function(out, rad) {\n    var s = Math.sin(rad),\n        c = Math.cos(rad);\n\n    // Perform axis-specific matrix multiplication\n    out[0]  = 1;\n    out[1]  = 0;\n    out[2]  = 0;\n    out[3]  = 0;\n    out[4] = 0;\n    out[5] = c;\n    out[6] = s;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = -s;\n    out[10] = c;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n    out[15] = 1;\n    return out;\n}\n\n/**\n * Creates a matrix from the given angle around the Y axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateY(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nmat4.fromYRotation = function(out, rad) {\n    var s = Math.sin(rad),\n        c = Math.cos(rad);\n\n    // Perform axis-specific matrix multiplication\n    out[0]  = c;\n    out[1]  = 0;\n    out[2]  = -s;\n    out[3]  = 0;\n    out[4] = 0;\n    out[5] = 1;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = s;\n    out[9] = 0;\n    out[10] = c;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n    out[15] = 1;\n    return out;\n}\n\n/**\n * Creates a matrix from the given angle around the Z axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateZ(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nmat4.fromZRotation = function(out, rad) {\n    var s = Math.sin(rad),\n        c = Math.cos(rad);\n\n    // Perform axis-specific matrix multiplication\n    out[0]  = c;\n    out[1]  = s;\n    out[2]  = 0;\n    out[3]  = 0;\n    out[4] = -s;\n    out[5] = c;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[10] = 1;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n    out[15] = 1;\n    return out;\n}\n\n/**\n * Creates a matrix from a quaternion rotation and vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     var quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {vec3} v Translation vector\n * @returns {mat4} out\n */\nmat4.fromRotationTranslation = function (out, q, v) {\n    // Quaternion math\n    var x = q[0], y = q[1], z = q[2], w = q[3],\n        x2 = x + x,\n        y2 = y + y,\n        z2 = z + z,\n\n        xx = x * x2,\n        xy = x * y2,\n        xz = x * z2,\n        yy = y * y2,\n        yz = y * z2,\n        zz = z * z2,\n        wx = w * x2,\n        wy = w * y2,\n        wz = w * z2;\n\n    out[0] = 1 - (yy + zz);\n    out[1] = xy + wz;\n    out[2] = xz - wy;\n    out[3] = 0;\n    out[4] = xy - wz;\n    out[5] = 1 - (xx + zz);\n    out[6] = yz + wx;\n    out[7] = 0;\n    out[8] = xz + wy;\n    out[9] = yz - wx;\n    out[10] = 1 - (xx + yy);\n    out[11] = 0;\n    out[12] = v[0];\n    out[13] = v[1];\n    out[14] = v[2];\n    out[15] = 1;\n\n    return out;\n};\n\n/**\n * Returns the translation vector component of a transformation\n *  matrix. If a matrix is built with fromRotationTranslation,\n *  the returned vector will be the same as the translation vector\n *  originally supplied.\n * @param  {vec3} out Vector to receive translation component\n * @param  {mat4} mat Matrix to be decomposed (input)\n * @return {vec3} out\n */\nmat4.getTranslation = function (out, mat) {\n  out[0] = mat[12];\n  out[1] = mat[13];\n  out[2] = mat[14];\n\n  return out;\n};\n\n/**\n * Returns a quaternion representing the rotational component\n *  of a transformation matrix. If a matrix is built with\n *  fromRotationTranslation, the returned quaternion will be the\n *  same as the quaternion originally supplied.\n * @param {quat} out Quaternion to receive the rotation component\n * @param {mat4} mat Matrix to be decomposed (input)\n * @return {quat} out\n */\nmat4.getRotation = function (out, mat) {\n  // Algorithm taken from http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm\n  var trace = mat[0] + mat[5] + mat[10];\n  var S = 0;\n\n  if (trace > 0) { \n    S = Math.sqrt(trace + 1.0) * 2;\n    out[3] = 0.25 * S;\n    out[0] = (mat[6] - mat[9]) / S;\n    out[1] = (mat[8] - mat[2]) / S; \n    out[2] = (mat[1] - mat[4]) / S; \n  } else if ((mat[0] > mat[5])&(mat[0] > mat[10])) { \n    S = Math.sqrt(1.0 + mat[0] - mat[5] - mat[10]) * 2;\n    out[3] = (mat[6] - mat[9]) / S;\n    out[0] = 0.25 * S;\n    out[1] = (mat[1] + mat[4]) / S; \n    out[2] = (mat[8] + mat[2]) / S; \n  } else if (mat[5] > mat[10]) { \n    S = Math.sqrt(1.0 + mat[5] - mat[0] - mat[10]) * 2;\n    out[3] = (mat[8] - mat[2]) / S;\n    out[0] = (mat[1] + mat[4]) / S; \n    out[1] = 0.25 * S;\n    out[2] = (mat[6] + mat[9]) / S; \n  } else { \n    S = Math.sqrt(1.0 + mat[10] - mat[0] - mat[5]) * 2;\n    out[3] = (mat[1] - mat[4]) / S;\n    out[0] = (mat[8] + mat[2]) / S;\n    out[1] = (mat[6] + mat[9]) / S;\n    out[2] = 0.25 * S;\n  }\n\n  return out;\n};\n\n/**\n * Creates a matrix from a quaternion rotation, vector translation and vector scale\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     var quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *     mat4.scale(dest, scale)\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {vec3} v Translation vector\n * @param {vec3} s Scaling vector\n * @returns {mat4} out\n */\nmat4.fromRotationTranslationScale = function (out, q, v, s) {\n    // Quaternion math\n    var x = q[0], y = q[1], z = q[2], w = q[3],\n        x2 = x + x,\n        y2 = y + y,\n        z2 = z + z,\n\n        xx = x * x2,\n        xy = x * y2,\n        xz = x * z2,\n        yy = y * y2,\n        yz = y * z2,\n        zz = z * z2,\n        wx = w * x2,\n        wy = w * y2,\n        wz = w * z2,\n        sx = s[0],\n        sy = s[1],\n        sz = s[2];\n\n    out[0] = (1 - (yy + zz)) * sx;\n    out[1] = (xy + wz) * sx;\n    out[2] = (xz - wy) * sx;\n    out[3] = 0;\n    out[4] = (xy - wz) * sy;\n    out[5] = (1 - (xx + zz)) * sy;\n    out[6] = (yz + wx) * sy;\n    out[7] = 0;\n    out[8] = (xz + wy) * sz;\n    out[9] = (yz - wx) * sz;\n    out[10] = (1 - (xx + yy)) * sz;\n    out[11] = 0;\n    out[12] = v[0];\n    out[13] = v[1];\n    out[14] = v[2];\n    out[15] = 1;\n\n    return out;\n};\n\n/**\n * Creates a matrix from a quaternion rotation, vector translation and vector scale, rotating and scaling around the given origin\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     mat4.translate(dest, origin);\n *     var quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *     mat4.scale(dest, scale)\n *     mat4.translate(dest, negativeOrigin);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {vec3} v Translation vector\n * @param {vec3} s Scaling vector\n * @param {vec3} o The origin vector around which to scale and rotate\n * @returns {mat4} out\n */\nmat4.fromRotationTranslationScaleOrigin = function (out, q, v, s, o) {\n  // Quaternion math\n  var x = q[0], y = q[1], z = q[2], w = q[3],\n      x2 = x + x,\n      y2 = y + y,\n      z2 = z + z,\n\n      xx = x * x2,\n      xy = x * y2,\n      xz = x * z2,\n      yy = y * y2,\n      yz = y * z2,\n      zz = z * z2,\n      wx = w * x2,\n      wy = w * y2,\n      wz = w * z2,\n\n      sx = s[0],\n      sy = s[1],\n      sz = s[2],\n\n      ox = o[0],\n      oy = o[1],\n      oz = o[2];\n\n  out[0] = (1 - (yy + zz)) * sx;\n  out[1] = (xy + wz) * sx;\n  out[2] = (xz - wy) * sx;\n  out[3] = 0;\n  out[4] = (xy - wz) * sy;\n  out[5] = (1 - (xx + zz)) * sy;\n  out[6] = (yz + wx) * sy;\n  out[7] = 0;\n  out[8] = (xz + wy) * sz;\n  out[9] = (yz - wx) * sz;\n  out[10] = (1 - (xx + yy)) * sz;\n  out[11] = 0;\n  out[12] = v[0] + ox - (out[0] * ox + out[4] * oy + out[8] * oz);\n  out[13] = v[1] + oy - (out[1] * ox + out[5] * oy + out[9] * oz);\n  out[14] = v[2] + oz - (out[2] * ox + out[6] * oy + out[10] * oz);\n  out[15] = 1;\n\n  return out;\n};\n\n/**\n * Calculates a 4x4 matrix from the given quaternion\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat} q Quaternion to create matrix from\n *\n * @returns {mat4} out\n */\nmat4.fromQuat = function (out, q) {\n    var x = q[0], y = q[1], z = q[2], w = q[3],\n        x2 = x + x,\n        y2 = y + y,\n        z2 = z + z,\n\n        xx = x * x2,\n        yx = y * x2,\n        yy = y * y2,\n        zx = z * x2,\n        zy = z * y2,\n        zz = z * z2,\n        wx = w * x2,\n        wy = w * y2,\n        wz = w * z2;\n\n    out[0] = 1 - yy - zz;\n    out[1] = yx + wz;\n    out[2] = zx - wy;\n    out[3] = 0;\n\n    out[4] = yx - wz;\n    out[5] = 1 - xx - zz;\n    out[6] = zy + wx;\n    out[7] = 0;\n\n    out[8] = zx + wy;\n    out[9] = zy - wx;\n    out[10] = 1 - xx - yy;\n    out[11] = 0;\n\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n    out[15] = 1;\n\n    return out;\n};\n\n/**\n * Generates a frustum matrix with the given bounds\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {Number} left Left bound of the frustum\n * @param {Number} right Right bound of the frustum\n * @param {Number} bottom Bottom bound of the frustum\n * @param {Number} top Top bound of the frustum\n * @param {Number} near Near bound of the frustum\n * @param {Number} far Far bound of the frustum\n * @returns {mat4} out\n */\nmat4.frustum = function (out, left, right, bottom, top, near, far) {\n    var rl = 1 / (right - left),\n        tb = 1 / (top - bottom),\n        nf = 1 / (near - far);\n    out[0] = (near * 2) * rl;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = (near * 2) * tb;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = (right + left) * rl;\n    out[9] = (top + bottom) * tb;\n    out[10] = (far + near) * nf;\n    out[11] = -1;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = (far * near * 2) * nf;\n    out[15] = 0;\n    return out;\n};\n\n/**\n * Generates a perspective projection matrix with the given bounds\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} fovy Vertical field of view in radians\n * @param {number} aspect Aspect ratio. typically viewport width/height\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\nmat4.perspective = function (out, fovy, aspect, near, far) {\n    var f = 1.0 / Math.tan(fovy / 2),\n        nf = 1 / (near - far);\n    out[0] = f / aspect;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = f;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[10] = (far + near) * nf;\n    out[11] = -1;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = (2 * far * near) * nf;\n    out[15] = 0;\n    return out;\n};\n\n/**\n * Generates a perspective projection matrix with the given field of view.\n * This is primarily useful for generating projection matrices to be used\n * with the still experiemental WebVR API.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {Object} fov Object containing the following values: upDegrees, downDegrees, leftDegrees, rightDegrees\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\nmat4.perspectiveFromFieldOfView = function (out, fov, near, far) {\n    var upTan = Math.tan(fov.upDegrees * Math.PI/180.0),\n        downTan = Math.tan(fov.downDegrees * Math.PI/180.0),\n        leftTan = Math.tan(fov.leftDegrees * Math.PI/180.0),\n        rightTan = Math.tan(fov.rightDegrees * Math.PI/180.0),\n        xScale = 2.0 / (leftTan + rightTan),\n        yScale = 2.0 / (upTan + downTan);\n\n    out[0] = xScale;\n    out[1] = 0.0;\n    out[2] = 0.0;\n    out[3] = 0.0;\n    out[4] = 0.0;\n    out[5] = yScale;\n    out[6] = 0.0;\n    out[7] = 0.0;\n    out[8] = -((leftTan - rightTan) * xScale * 0.5);\n    out[9] = ((upTan - downTan) * yScale * 0.5);\n    out[10] = far / (near - far);\n    out[11] = -1.0;\n    out[12] = 0.0;\n    out[13] = 0.0;\n    out[14] = (far * near) / (near - far);\n    out[15] = 0.0;\n    return out;\n}\n\n/**\n * Generates a orthogonal projection matrix with the given bounds\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} left Left bound of the frustum\n * @param {number} right Right bound of the frustum\n * @param {number} bottom Bottom bound of the frustum\n * @param {number} top Top bound of the frustum\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\nmat4.ortho = function (out, left, right, bottom, top, near, far) {\n    var lr = 1 / (left - right),\n        bt = 1 / (bottom - top),\n        nf = 1 / (near - far);\n    out[0] = -2 * lr;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = -2 * bt;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[10] = 2 * nf;\n    out[11] = 0;\n    out[12] = (left + right) * lr;\n    out[13] = (top + bottom) * bt;\n    out[14] = (far + near) * nf;\n    out[15] = 1;\n    return out;\n};\n\n/**\n * Generates a look-at matrix with the given eye position, focal point, and up axis\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {vec3} eye Position of the viewer\n * @param {vec3} center Point the viewer is looking at\n * @param {vec3} up vec3 pointing up\n * @returns {mat4} out\n */\nmat4.lookAt = function (out, eye, center, up) {\n    var x0, x1, x2, y0, y1, y2, z0, z1, z2, len,\n        eyex = eye[0],\n        eyey = eye[1],\n        eyez = eye[2],\n        upx = up[0],\n        upy = up[1],\n        upz = up[2],\n        centerx = center[0],\n        centery = center[1],\n        centerz = center[2];\n\n    if (Math.abs(eyex - centerx) < glMatrix.EPSILON &&\n        Math.abs(eyey - centery) < glMatrix.EPSILON &&\n        Math.abs(eyez - centerz) < glMatrix.EPSILON) {\n        return mat4.identity(out);\n    }\n\n    z0 = eyex - centerx;\n    z1 = eyey - centery;\n    z2 = eyez - centerz;\n\n    len = 1 / Math.sqrt(z0 * z0 + z1 * z1 + z2 * z2);\n    z0 *= len;\n    z1 *= len;\n    z2 *= len;\n\n    x0 = upy * z2 - upz * z1;\n    x1 = upz * z0 - upx * z2;\n    x2 = upx * z1 - upy * z0;\n    len = Math.sqrt(x0 * x0 + x1 * x1 + x2 * x2);\n    if (!len) {\n        x0 = 0;\n        x1 = 0;\n        x2 = 0;\n    } else {\n        len = 1 / len;\n        x0 *= len;\n        x1 *= len;\n        x2 *= len;\n    }\n\n    y0 = z1 * x2 - z2 * x1;\n    y1 = z2 * x0 - z0 * x2;\n    y2 = z0 * x1 - z1 * x0;\n\n    len = Math.sqrt(y0 * y0 + y1 * y1 + y2 * y2);\n    if (!len) {\n        y0 = 0;\n        y1 = 0;\n        y2 = 0;\n    } else {\n        len = 1 / len;\n        y0 *= len;\n        y1 *= len;\n        y2 *= len;\n    }\n\n    out[0] = x0;\n    out[1] = y0;\n    out[2] = z0;\n    out[3] = 0;\n    out[4] = x1;\n    out[5] = y1;\n    out[6] = z1;\n    out[7] = 0;\n    out[8] = x2;\n    out[9] = y2;\n    out[10] = z2;\n    out[11] = 0;\n    out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);\n    out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);\n    out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);\n    out[15] = 1;\n\n    return out;\n};\n\n/**\n * Returns a string representation of a mat4\n *\n * @param {mat4} mat matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\nmat4.str = function (a) {\n    return 'mat4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' +\n                    a[4] + ', ' + a[5] + ', ' + a[6] + ', ' + a[7] + ', ' +\n                    a[8] + ', ' + a[9] + ', ' + a[10] + ', ' + a[11] + ', ' +\n                    a[12] + ', ' + a[13] + ', ' + a[14] + ', ' + a[15] + ')';\n};\n\n/**\n * Returns Frobenius norm of a mat4\n *\n * @param {mat4} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\nmat4.frob = function (a) {\n    return(Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + Math.pow(a[6], 2) + Math.pow(a[7], 2) + Math.pow(a[8], 2) + Math.pow(a[9], 2) + Math.pow(a[10], 2) + Math.pow(a[11], 2) + Math.pow(a[12], 2) + Math.pow(a[13], 2) + Math.pow(a[14], 2) + Math.pow(a[15], 2) ))\n};\n\n/**\n * Adds two mat4's\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the first operand\n * @param {mat4} b the second operand\n * @returns {mat4} out\n */\nmat4.add = function(out, a, b) {\n    out[0] = a[0] + b[0];\n    out[1] = a[1] + b[1];\n    out[2] = a[2] + b[2];\n    out[3] = a[3] + b[3];\n    out[4] = a[4] + b[4];\n    out[5] = a[5] + b[5];\n    out[6] = a[6] + b[6];\n    out[7] = a[7] + b[7];\n    out[8] = a[8] + b[8];\n    out[9] = a[9] + b[9];\n    out[10] = a[10] + b[10];\n    out[11] = a[11] + b[11];\n    out[12] = a[12] + b[12];\n    out[13] = a[13] + b[13];\n    out[14] = a[14] + b[14];\n    out[15] = a[15] + b[15];\n    return out;\n};\n\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the first operand\n * @param {mat4} b the second operand\n * @returns {mat4} out\n */\nmat4.subtract = function(out, a, b) {\n    out[0] = a[0] - b[0];\n    out[1] = a[1] - b[1];\n    out[2] = a[2] - b[2];\n    out[3] = a[3] - b[3];\n    out[4] = a[4] - b[4];\n    out[5] = a[5] - b[5];\n    out[6] = a[6] - b[6];\n    out[7] = a[7] - b[7];\n    out[8] = a[8] - b[8];\n    out[9] = a[9] - b[9];\n    out[10] = a[10] - b[10];\n    out[11] = a[11] - b[11];\n    out[12] = a[12] - b[12];\n    out[13] = a[13] - b[13];\n    out[14] = a[14] - b[14];\n    out[15] = a[15] - b[15];\n    return out;\n};\n\n/**\n * Alias for {@link mat4.subtract}\n * @function\n */\nmat4.sub = mat4.subtract;\n\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat4} out\n */\nmat4.multiplyScalar = function(out, a, b) {\n    out[0] = a[0] * b;\n    out[1] = a[1] * b;\n    out[2] = a[2] * b;\n    out[3] = a[3] * b;\n    out[4] = a[4] * b;\n    out[5] = a[5] * b;\n    out[6] = a[6] * b;\n    out[7] = a[7] * b;\n    out[8] = a[8] * b;\n    out[9] = a[9] * b;\n    out[10] = a[10] * b;\n    out[11] = a[11] * b;\n    out[12] = a[12] * b;\n    out[13] = a[13] * b;\n    out[14] = a[14] * b;\n    out[15] = a[15] * b;\n    return out;\n};\n\n/**\n * Adds two mat4's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat4} out the receiving vector\n * @param {mat4} a the first operand\n * @param {mat4} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat4} out\n */\nmat4.multiplyScalarAndAdd = function(out, a, b, scale) {\n    out[0] = a[0] + (b[0] * scale);\n    out[1] = a[1] + (b[1] * scale);\n    out[2] = a[2] + (b[2] * scale);\n    out[3] = a[3] + (b[3] * scale);\n    out[4] = a[4] + (b[4] * scale);\n    out[5] = a[5] + (b[5] * scale);\n    out[6] = a[6] + (b[6] * scale);\n    out[7] = a[7] + (b[7] * scale);\n    out[8] = a[8] + (b[8] * scale);\n    out[9] = a[9] + (b[9] * scale);\n    out[10] = a[10] + (b[10] * scale);\n    out[11] = a[11] + (b[11] * scale);\n    out[12] = a[12] + (b[12] * scale);\n    out[13] = a[13] + (b[13] * scale);\n    out[14] = a[14] + (b[14] * scale);\n    out[15] = a[15] + (b[15] * scale);\n    return out;\n};\n\n/**\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {mat4} a The first matrix.\n * @param {mat4} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nmat4.exactEquals = function (a, b) {\n    return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && \n           a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && \n           a[8] === b[8] && a[9] === b[9] && a[10] === b[10] && a[11] === b[11] &&\n           a[12] === b[12] && a[13] === b[13] && a[14] === b[14] && a[15] === b[15];\n};\n\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {mat4} a The first matrix.\n * @param {mat4} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nmat4.equals = function (a, b) {\n    var a0  = a[0],  a1  = a[1],  a2  = a[2],  a3  = a[3],\n        a4  = a[4],  a5  = a[5],  a6  = a[6],  a7  = a[7], \n        a8  = a[8],  a9  = a[9],  a10 = a[10], a11 = a[11], \n        a12 = a[12], a13 = a[13], a14 = a[14], a15 = a[15];\n\n    var b0  = b[0],  b1  = b[1],  b2  = b[2],  b3  = b[3],\n        b4  = b[4],  b5  = b[5],  b6  = b[6],  b7  = b[7], \n        b8  = b[8],  b9  = b[9],  b10 = b[10], b11 = b[11], \n        b12 = b[12], b13 = b[13], b14 = b[14], b15 = b[15];\n\n    return (Math.abs(a0 - b0) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n            Math.abs(a1 - b1) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\n            Math.abs(a2 - b2) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&\n            Math.abs(a3 - b3) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a3), Math.abs(b3)) &&\n            Math.abs(a4 - b4) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a4), Math.abs(b4)) &&\n            Math.abs(a5 - b5) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a5), Math.abs(b5)) &&\n            Math.abs(a6 - b6) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a6), Math.abs(b6)) &&\n            Math.abs(a7 - b7) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a7), Math.abs(b7)) &&\n            Math.abs(a8 - b8) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a8), Math.abs(b8)) &&\n            Math.abs(a9 - b9) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a9), Math.abs(b9)) &&\n            Math.abs(a10 - b10) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a10), Math.abs(b10)) &&\n            Math.abs(a11 - b11) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a11), Math.abs(b11)) &&\n            Math.abs(a12 - b12) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a12), Math.abs(b12)) &&\n            Math.abs(a13 - b13) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a13), Math.abs(b13)) &&\n            Math.abs(a14 - b14) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a14), Math.abs(b14)) &&\n            Math.abs(a15 - b15) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a15), Math.abs(b15)));\n};\n\n\n\nmodule.exports = mat4;\n","/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE. */\n\nvar glMatrix = require(\"./common.js\");\nvar mat3 = require(\"./mat3.js\");\nvar vec3 = require(\"./vec3.js\");\nvar vec4 = require(\"./vec4.js\");\n\n/**\n * @class Quaternion\n * @name quat\n */\nvar quat = {};\n\n/**\n * Creates a new identity quat\n *\n * @returns {quat} a new quaternion\n */\nquat.create = function() {\n    var out = new glMatrix.ARRAY_TYPE(4);\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 1;\n    return out;\n};\n\n/**\n * Sets a quaternion to represent the shortest rotation from one\n * vector to another.\n *\n * Both vectors are assumed to be unit length.\n *\n * @param {quat} out the receiving quaternion.\n * @param {vec3} a the initial vector\n * @param {vec3} b the destination vector\n * @returns {quat} out\n */\nquat.rotationTo = (function() {\n    var tmpvec3 = vec3.create();\n    var xUnitVec3 = vec3.fromValues(1,0,0);\n    var yUnitVec3 = vec3.fromValues(0,1,0);\n\n    return function(out, a, b) {\n        var dot = vec3.dot(a, b);\n        if (dot < -0.999999) {\n            vec3.cross(tmpvec3, xUnitVec3, a);\n            if (vec3.length(tmpvec3) < 0.000001)\n                vec3.cross(tmpvec3, yUnitVec3, a);\n            vec3.normalize(tmpvec3, tmpvec3);\n            quat.setAxisAngle(out, tmpvec3, Math.PI);\n            return out;\n        } else if (dot > 0.999999) {\n            out[0] = 0;\n            out[1] = 0;\n            out[2] = 0;\n            out[3] = 1;\n            return out;\n        } else {\n            vec3.cross(tmpvec3, a, b);\n            out[0] = tmpvec3[0];\n            out[1] = tmpvec3[1];\n            out[2] = tmpvec3[2];\n            out[3] = 1 + dot;\n            return quat.normalize(out, out);\n        }\n    };\n})();\n\n/**\n * Sets the specified quaternion with values corresponding to the given\n * axes. Each axis is a vec3 and is expected to be unit length and\n * perpendicular to all other specified axes.\n *\n * @param {vec3} view  the vector representing the viewing direction\n * @param {vec3} right the vector representing the local \"right\" direction\n * @param {vec3} up    the vector representing the local \"up\" direction\n * @returns {quat} out\n */\nquat.setAxes = (function() {\n    var matr = mat3.create();\n\n    return function(out, view, right, up) {\n        matr[0] = right[0];\n        matr[3] = right[1];\n        matr[6] = right[2];\n\n        matr[1] = up[0];\n        matr[4] = up[1];\n        matr[7] = up[2];\n\n        matr[2] = -view[0];\n        matr[5] = -view[1];\n        matr[8] = -view[2];\n\n        return quat.normalize(out, quat.fromMat3(out, matr));\n    };\n})();\n\n/**\n * Creates a new quat initialized with values from an existing quaternion\n *\n * @param {quat} a quaternion to clone\n * @returns {quat} a new quaternion\n * @function\n */\nquat.clone = vec4.clone;\n\n/**\n * Creates a new quat initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {quat} a new quaternion\n * @function\n */\nquat.fromValues = vec4.fromValues;\n\n/**\n * Copy the values from one quat to another\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the source quaternion\n * @returns {quat} out\n * @function\n */\nquat.copy = vec4.copy;\n\n/**\n * Set the components of a quat to the given values\n *\n * @param {quat} out the receiving quaternion\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {quat} out\n * @function\n */\nquat.set = vec4.set;\n\n/**\n * Set a quat to the identity quaternion\n *\n * @param {quat} out the receiving quaternion\n * @returns {quat} out\n */\nquat.identity = function(out) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 1;\n    return out;\n};\n\n/**\n * Sets a quat from the given angle and rotation axis,\n * then returns it.\n *\n * @param {quat} out the receiving quaternion\n * @param {vec3} axis the axis around which to rotate\n * @param {Number} rad the angle in radians\n * @returns {quat} out\n **/\nquat.setAxisAngle = function(out, axis, rad) {\n    rad = rad * 0.5;\n    var s = Math.sin(rad);\n    out[0] = s * axis[0];\n    out[1] = s * axis[1];\n    out[2] = s * axis[2];\n    out[3] = Math.cos(rad);\n    return out;\n};\n\n/**\n * Gets the rotation axis and angle for a given\n *  quaternion. If a quaternion is created with\n *  setAxisAngle, this method will return the same\n *  values as providied in the original parameter list\n *  OR functionally equivalent values.\n * Example: The quaternion formed by axis [0, 0, 1] and\n *  angle -90 is the same as the quaternion formed by\n *  [0, 0, 1] and 270. This method favors the latter.\n * @param  {vec3} out_axis  Vector receiving the axis of rotation\n * @param  {quat} q     Quaternion to be decomposed\n * @return {Number}     Angle, in radians, of the rotation\n */\nquat.getAxisAngle = function(out_axis, q) {\n    var rad = Math.acos(q[3]) * 2.0;\n    var s = Math.sin(rad / 2.0);\n    if (s != 0.0) {\n        out_axis[0] = q[0] / s;\n        out_axis[1] = q[1] / s;\n        out_axis[2] = q[2] / s;\n    } else {\n        // If s is zero, return any axis (no rotation - axis does not matter)\n        out_axis[0] = 1;\n        out_axis[1] = 0;\n        out_axis[2] = 0;\n    }\n    return rad;\n};\n\n/**\n * Adds two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @returns {quat} out\n * @function\n */\nquat.add = vec4.add;\n\n/**\n * Multiplies two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @returns {quat} out\n */\nquat.multiply = function(out, a, b) {\n    var ax = a[0], ay = a[1], az = a[2], aw = a[3],\n        bx = b[0], by = b[1], bz = b[2], bw = b[3];\n\n    out[0] = ax * bw + aw * bx + ay * bz - az * by;\n    out[1] = ay * bw + aw * by + az * bx - ax * bz;\n    out[2] = az * bw + aw * bz + ax * by - ay * bx;\n    out[3] = aw * bw - ax * bx - ay * by - az * bz;\n    return out;\n};\n\n/**\n * Alias for {@link quat.multiply}\n * @function\n */\nquat.mul = quat.multiply;\n\n/**\n * Scales a quat by a scalar number\n *\n * @param {quat} out the receiving vector\n * @param {quat} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {quat} out\n * @function\n */\nquat.scale = vec4.scale;\n\n/**\n * Rotates a quaternion by the given angle about the X axis\n *\n * @param {quat} out quat receiving operation result\n * @param {quat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\nquat.rotateX = function (out, a, rad) {\n    rad *= 0.5; \n\n    var ax = a[0], ay = a[1], az = a[2], aw = a[3],\n        bx = Math.sin(rad), bw = Math.cos(rad);\n\n    out[0] = ax * bw + aw * bx;\n    out[1] = ay * bw + az * bx;\n    out[2] = az * bw - ay * bx;\n    out[3] = aw * bw - ax * bx;\n    return out;\n};\n\n/**\n * Rotates a quaternion by the given angle about the Y axis\n *\n * @param {quat} out quat receiving operation result\n * @param {quat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\nquat.rotateY = function (out, a, rad) {\n    rad *= 0.5; \n\n    var ax = a[0], ay = a[1], az = a[2], aw = a[3],\n        by = Math.sin(rad), bw = Math.cos(rad);\n\n    out[0] = ax * bw - az * by;\n    out[1] = ay * bw + aw * by;\n    out[2] = az * bw + ax * by;\n    out[3] = aw * bw - ay * by;\n    return out;\n};\n\n/**\n * Rotates a quaternion by the given angle about the Z axis\n *\n * @param {quat} out quat receiving operation result\n * @param {quat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\nquat.rotateZ = function (out, a, rad) {\n    rad *= 0.5; \n\n    var ax = a[0], ay = a[1], az = a[2], aw = a[3],\n        bz = Math.sin(rad), bw = Math.cos(rad);\n\n    out[0] = ax * bw + ay * bz;\n    out[1] = ay * bw - ax * bz;\n    out[2] = az * bw + aw * bz;\n    out[3] = aw * bw - az * bz;\n    return out;\n};\n\n/**\n * Calculates the W component of a quat from the X, Y, and Z components.\n * Assumes that quaternion is 1 unit in length.\n * Any existing W component will be ignored.\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a quat to calculate W component of\n * @returns {quat} out\n */\nquat.calculateW = function (out, a) {\n    var x = a[0], y = a[1], z = a[2];\n\n    out[0] = x;\n    out[1] = y;\n    out[2] = z;\n    out[3] = Math.sqrt(Math.abs(1.0 - x * x - y * y - z * z));\n    return out;\n};\n\n/**\n * Calculates the dot product of two quat's\n *\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @returns {Number} dot product of a and b\n * @function\n */\nquat.dot = vec4.dot;\n\n/**\n * Performs a linear interpolation between two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @param {Number} t interpolation amount between the two inputs\n * @returns {quat} out\n * @function\n */\nquat.lerp = vec4.lerp;\n\n/**\n * Performs a spherical linear interpolation between two quat\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @param {Number} t interpolation amount between the two inputs\n * @returns {quat} out\n */\nquat.slerp = function (out, a, b, t) {\n    // benchmarks:\n    //    http://jsperf.com/quaternion-slerp-implementations\n\n    var ax = a[0], ay = a[1], az = a[2], aw = a[3],\n        bx = b[0], by = b[1], bz = b[2], bw = b[3];\n\n    var        omega, cosom, sinom, scale0, scale1;\n\n    // calc cosine\n    cosom = ax * bx + ay * by + az * bz + aw * bw;\n    // adjust signs (if necessary)\n    if ( cosom < 0.0 ) {\n        cosom = -cosom;\n        bx = - bx;\n        by = - by;\n        bz = - bz;\n        bw = - bw;\n    }\n    // calculate coefficients\n    if ( (1.0 - cosom) > 0.000001 ) {\n        // standard case (slerp)\n        omega  = Math.acos(cosom);\n        sinom  = Math.sin(omega);\n        scale0 = Math.sin((1.0 - t) * omega) / sinom;\n        scale1 = Math.sin(t * omega) / sinom;\n    } else {        \n        // \"from\" and \"to\" quaternions are very close \n        //  ... so we can do a linear interpolation\n        scale0 = 1.0 - t;\n        scale1 = t;\n    }\n    // calculate final values\n    out[0] = scale0 * ax + scale1 * bx;\n    out[1] = scale0 * ay + scale1 * by;\n    out[2] = scale0 * az + scale1 * bz;\n    out[3] = scale0 * aw + scale1 * bw;\n    \n    return out;\n};\n\n/**\n * Performs a spherical linear interpolation with two control points\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @param {quat} c the third operand\n * @param {quat} d the fourth operand\n * @param {Number} t interpolation amount\n * @returns {quat} out\n */\nquat.sqlerp = (function () {\n  var temp1 = quat.create();\n  var temp2 = quat.create();\n  \n  return function (out, a, b, c, d, t) {\n    quat.slerp(temp1, a, d, t);\n    quat.slerp(temp2, b, c, t);\n    quat.slerp(out, temp1, temp2, 2 * t * (1 - t));\n    \n    return out;\n  };\n}());\n\n/**\n * Calculates the inverse of a quat\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a quat to calculate inverse of\n * @returns {quat} out\n */\nquat.invert = function(out, a) {\n    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3],\n        dot = a0*a0 + a1*a1 + a2*a2 + a3*a3,\n        invDot = dot ? 1.0/dot : 0;\n    \n    // TODO: Would be faster to return [0,0,0,0] immediately if dot == 0\n\n    out[0] = -a0*invDot;\n    out[1] = -a1*invDot;\n    out[2] = -a2*invDot;\n    out[3] = a3*invDot;\n    return out;\n};\n\n/**\n * Calculates the conjugate of a quat\n * If the quaternion is normalized, this function is faster than quat.inverse and produces the same result.\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a quat to calculate conjugate of\n * @returns {quat} out\n */\nquat.conjugate = function (out, a) {\n    out[0] = -a[0];\n    out[1] = -a[1];\n    out[2] = -a[2];\n    out[3] = a[3];\n    return out;\n};\n\n/**\n * Calculates the length of a quat\n *\n * @param {quat} a vector to calculate length of\n * @returns {Number} length of a\n * @function\n */\nquat.length = vec4.length;\n\n/**\n * Alias for {@link quat.length}\n * @function\n */\nquat.len = quat.length;\n\n/**\n * Calculates the squared length of a quat\n *\n * @param {quat} a vector to calculate squared length of\n * @returns {Number} squared length of a\n * @function\n */\nquat.squaredLength = vec4.squaredLength;\n\n/**\n * Alias for {@link quat.squaredLength}\n * @function\n */\nquat.sqrLen = quat.squaredLength;\n\n/**\n * Normalize a quat\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a quaternion to normalize\n * @returns {quat} out\n * @function\n */\nquat.normalize = vec4.normalize;\n\n/**\n * Creates a quaternion from the given 3x3 rotation matrix.\n *\n * NOTE: The resultant quaternion is not normalized, so you should be sure\n * to renormalize the quaternion yourself where necessary.\n *\n * @param {quat} out the receiving quaternion\n * @param {mat3} m rotation matrix\n * @returns {quat} out\n * @function\n */\nquat.fromMat3 = function(out, m) {\n    // Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes\n    // article \"Quaternion Calculus and Fast Animation\".\n    var fTrace = m[0] + m[4] + m[8];\n    var fRoot;\n\n    if ( fTrace > 0.0 ) {\n        // |w| > 1/2, may as well choose w > 1/2\n        fRoot = Math.sqrt(fTrace + 1.0);  // 2w\n        out[3] = 0.5 * fRoot;\n        fRoot = 0.5/fRoot;  // 1/(4w)\n        out[0] = (m[5]-m[7])*fRoot;\n        out[1] = (m[6]-m[2])*fRoot;\n        out[2] = (m[1]-m[3])*fRoot;\n    } else {\n        // |w| <= 1/2\n        var i = 0;\n        if ( m[4] > m[0] )\n          i = 1;\n        if ( m[8] > m[i*3+i] )\n          i = 2;\n        var j = (i+1)%3;\n        var k = (i+2)%3;\n        \n        fRoot = Math.sqrt(m[i*3+i]-m[j*3+j]-m[k*3+k] + 1.0);\n        out[i] = 0.5 * fRoot;\n        fRoot = 0.5 / fRoot;\n        out[3] = (m[j*3+k] - m[k*3+j]) * fRoot;\n        out[j] = (m[j*3+i] + m[i*3+j]) * fRoot;\n        out[k] = (m[k*3+i] + m[i*3+k]) * fRoot;\n    }\n    \n    return out;\n};\n\n/**\n * Returns a string representation of a quatenion\n *\n * @param {quat} vec vector to represent as a string\n * @returns {String} string representation of the vector\n */\nquat.str = function (a) {\n    return 'quat(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';\n};\n\n/**\n * Returns whether or not the quaternions have exactly the same elements in the same position (when compared with ===)\n *\n * @param {quat} a The first quaternion.\n * @param {quat} b The second quaternion.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nquat.exactEquals = vec4.exactEquals;\n\n/**\n * Returns whether or not the quaternions have approximately the same elements in the same position.\n *\n * @param {quat} a The first vector.\n * @param {quat} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nquat.equals = vec4.equals;\n\nmodule.exports = quat;\n","/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE. */\n\nvar glMatrix = require(\"./common.js\");\n\n/**\n * @class 2 Dimensional Vector\n * @name vec2\n */\nvar vec2 = {};\n\n/**\n * Creates a new, empty vec2\n *\n * @returns {vec2} a new 2D vector\n */\nvec2.create = function() {\n    var out = new glMatrix.ARRAY_TYPE(2);\n    out[0] = 0;\n    out[1] = 0;\n    return out;\n};\n\n/**\n * Creates a new vec2 initialized with values from an existing vector\n *\n * @param {vec2} a vector to clone\n * @returns {vec2} a new 2D vector\n */\nvec2.clone = function(a) {\n    var out = new glMatrix.ARRAY_TYPE(2);\n    out[0] = a[0];\n    out[1] = a[1];\n    return out;\n};\n\n/**\n * Creates a new vec2 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @returns {vec2} a new 2D vector\n */\nvec2.fromValues = function(x, y) {\n    var out = new glMatrix.ARRAY_TYPE(2);\n    out[0] = x;\n    out[1] = y;\n    return out;\n};\n\n/**\n * Copy the values from one vec2 to another\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the source vector\n * @returns {vec2} out\n */\nvec2.copy = function(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    return out;\n};\n\n/**\n * Set the components of a vec2 to the given values\n *\n * @param {vec2} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @returns {vec2} out\n */\nvec2.set = function(out, x, y) {\n    out[0] = x;\n    out[1] = y;\n    return out;\n};\n\n/**\n * Adds two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nvec2.add = function(out, a, b) {\n    out[0] = a[0] + b[0];\n    out[1] = a[1] + b[1];\n    return out;\n};\n\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nvec2.subtract = function(out, a, b) {\n    out[0] = a[0] - b[0];\n    out[1] = a[1] - b[1];\n    return out;\n};\n\n/**\n * Alias for {@link vec2.subtract}\n * @function\n */\nvec2.sub = vec2.subtract;\n\n/**\n * Multiplies two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nvec2.multiply = function(out, a, b) {\n    out[0] = a[0] * b[0];\n    out[1] = a[1] * b[1];\n    return out;\n};\n\n/**\n * Alias for {@link vec2.multiply}\n * @function\n */\nvec2.mul = vec2.multiply;\n\n/**\n * Divides two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nvec2.divide = function(out, a, b) {\n    out[0] = a[0] / b[0];\n    out[1] = a[1] / b[1];\n    return out;\n};\n\n/**\n * Alias for {@link vec2.divide}\n * @function\n */\nvec2.div = vec2.divide;\n\n/**\n * Math.ceil the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to ceil\n * @returns {vec2} out\n */\nvec2.ceil = function (out, a) {\n    out[0] = Math.ceil(a[0]);\n    out[1] = Math.ceil(a[1]);\n    return out;\n};\n\n/**\n * Math.floor the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to floor\n * @returns {vec2} out\n */\nvec2.floor = function (out, a) {\n    out[0] = Math.floor(a[0]);\n    out[1] = Math.floor(a[1]);\n    return out;\n};\n\n/**\n * Returns the minimum of two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nvec2.min = function(out, a, b) {\n    out[0] = Math.min(a[0], b[0]);\n    out[1] = Math.min(a[1], b[1]);\n    return out;\n};\n\n/**\n * Returns the maximum of two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nvec2.max = function(out, a, b) {\n    out[0] = Math.max(a[0], b[0]);\n    out[1] = Math.max(a[1], b[1]);\n    return out;\n};\n\n/**\n * Math.round the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to round\n * @returns {vec2} out\n */\nvec2.round = function (out, a) {\n    out[0] = Math.round(a[0]);\n    out[1] = Math.round(a[1]);\n    return out;\n};\n\n/**\n * Scales a vec2 by a scalar number\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec2} out\n */\nvec2.scale = function(out, a, b) {\n    out[0] = a[0] * b;\n    out[1] = a[1] * b;\n    return out;\n};\n\n/**\n * Adds two vec2's after scaling the second operand by a scalar value\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec2} out\n */\nvec2.scaleAndAdd = function(out, a, b, scale) {\n    out[0] = a[0] + (b[0] * scale);\n    out[1] = a[1] + (b[1] * scale);\n    return out;\n};\n\n/**\n * Calculates the euclidian distance between two vec2's\n *\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {Number} distance between a and b\n */\nvec2.distance = function(a, b) {\n    var x = b[0] - a[0],\n        y = b[1] - a[1];\n    return Math.sqrt(x*x + y*y);\n};\n\n/**\n * Alias for {@link vec2.distance}\n * @function\n */\nvec2.dist = vec2.distance;\n\n/**\n * Calculates the squared euclidian distance between two vec2's\n *\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {Number} squared distance between a and b\n */\nvec2.squaredDistance = function(a, b) {\n    var x = b[0] - a[0],\n        y = b[1] - a[1];\n    return x*x + y*y;\n};\n\n/**\n * Alias for {@link vec2.squaredDistance}\n * @function\n */\nvec2.sqrDist = vec2.squaredDistance;\n\n/**\n * Calculates the length of a vec2\n *\n * @param {vec2} a vector to calculate length of\n * @returns {Number} length of a\n */\nvec2.length = function (a) {\n    var x = a[0],\n        y = a[1];\n    return Math.sqrt(x*x + y*y);\n};\n\n/**\n * Alias for {@link vec2.length}\n * @function\n */\nvec2.len = vec2.length;\n\n/**\n * Calculates the squared length of a vec2\n *\n * @param {vec2} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\nvec2.squaredLength = function (a) {\n    var x = a[0],\n        y = a[1];\n    return x*x + y*y;\n};\n\n/**\n * Alias for {@link vec2.squaredLength}\n * @function\n */\nvec2.sqrLen = vec2.squaredLength;\n\n/**\n * Negates the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to negate\n * @returns {vec2} out\n */\nvec2.negate = function(out, a) {\n    out[0] = -a[0];\n    out[1] = -a[1];\n    return out;\n};\n\n/**\n * Returns the inverse of the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to invert\n * @returns {vec2} out\n */\nvec2.inverse = function(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  return out;\n};\n\n/**\n * Normalize a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to normalize\n * @returns {vec2} out\n */\nvec2.normalize = function(out, a) {\n    var x = a[0],\n        y = a[1];\n    var len = x*x + y*y;\n    if (len > 0) {\n        //TODO: evaluate use of glm_invsqrt here?\n        len = 1 / Math.sqrt(len);\n        out[0] = a[0] * len;\n        out[1] = a[1] * len;\n    }\n    return out;\n};\n\n/**\n * Calculates the dot product of two vec2's\n *\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {Number} dot product of a and b\n */\nvec2.dot = function (a, b) {\n    return a[0] * b[0] + a[1] * b[1];\n};\n\n/**\n * Computes the cross product of two vec2's\n * Note that the cross product must by definition produce a 3D vector\n *\n * @param {vec3} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec3} out\n */\nvec2.cross = function(out, a, b) {\n    var z = a[0] * b[1] - a[1] * b[0];\n    out[0] = out[1] = 0;\n    out[2] = z;\n    return out;\n};\n\n/**\n * Performs a linear interpolation between two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @param {Number} t interpolation amount between the two inputs\n * @returns {vec2} out\n */\nvec2.lerp = function (out, a, b, t) {\n    var ax = a[0],\n        ay = a[1];\n    out[0] = ax + t * (b[0] - ax);\n    out[1] = ay + t * (b[1] - ay);\n    return out;\n};\n\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec2} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec2} out\n */\nvec2.random = function (out, scale) {\n    scale = scale || 1.0;\n    var r = glMatrix.RANDOM() * 2.0 * Math.PI;\n    out[0] = Math.cos(r) * scale;\n    out[1] = Math.sin(r) * scale;\n    return out;\n};\n\n/**\n * Transforms the vec2 with a mat2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to transform\n * @param {mat2} m matrix to transform with\n * @returns {vec2} out\n */\nvec2.transformMat2 = function(out, a, m) {\n    var x = a[0],\n        y = a[1];\n    out[0] = m[0] * x + m[2] * y;\n    out[1] = m[1] * x + m[3] * y;\n    return out;\n};\n\n/**\n * Transforms the vec2 with a mat2d\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to transform\n * @param {mat2d} m matrix to transform with\n * @returns {vec2} out\n */\nvec2.transformMat2d = function(out, a, m) {\n    var x = a[0],\n        y = a[1];\n    out[0] = m[0] * x + m[2] * y + m[4];\n    out[1] = m[1] * x + m[3] * y + m[5];\n    return out;\n};\n\n/**\n * Transforms the vec2 with a mat3\n * 3rd vector component is implicitly '1'\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to transform\n * @param {mat3} m matrix to transform with\n * @returns {vec2} out\n */\nvec2.transformMat3 = function(out, a, m) {\n    var x = a[0],\n        y = a[1];\n    out[0] = m[0] * x + m[3] * y + m[6];\n    out[1] = m[1] * x + m[4] * y + m[7];\n    return out;\n};\n\n/**\n * Transforms the vec2 with a mat4\n * 3rd vector component is implicitly '0'\n * 4th vector component is implicitly '1'\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to transform\n * @param {mat4} m matrix to transform with\n * @returns {vec2} out\n */\nvec2.transformMat4 = function(out, a, m) {\n    var x = a[0], \n        y = a[1];\n    out[0] = m[0] * x + m[4] * y + m[12];\n    out[1] = m[1] * x + m[5] * y + m[13];\n    return out;\n};\n\n/**\n * Perform some operation over an array of vec2s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec2. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec2s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\nvec2.forEach = (function() {\n    var vec = vec2.create();\n\n    return function(a, stride, offset, count, fn, arg) {\n        var i, l;\n        if(!stride) {\n            stride = 2;\n        }\n\n        if(!offset) {\n            offset = 0;\n        }\n        \n        if(count) {\n            l = Math.min((count * stride) + offset, a.length);\n        } else {\n            l = a.length;\n        }\n\n        for(i = offset; i < l; i += stride) {\n            vec[0] = a[i]; vec[1] = a[i+1];\n            fn(vec, vec, arg);\n            a[i] = vec[0]; a[i+1] = vec[1];\n        }\n        \n        return a;\n    };\n})();\n\n/**\n * Returns a string representation of a vector\n *\n * @param {vec2} vec vector to represent as a string\n * @returns {String} string representation of the vector\n */\nvec2.str = function (a) {\n    return 'vec2(' + a[0] + ', ' + a[1] + ')';\n};\n\n/**\n * Returns whether or not the vectors exactly have the same elements in the same position (when compared with ===)\n *\n * @param {vec2} a The first vector.\n * @param {vec2} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nvec2.exactEquals = function (a, b) {\n    return a[0] === b[0] && a[1] === b[1];\n};\n\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {vec2} a The first vector.\n * @param {vec2} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nvec2.equals = function (a, b) {\n    var a0 = a[0], a1 = a[1];\n    var b0 = b[0], b1 = b[1];\n    return (Math.abs(a0 - b0) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n            Math.abs(a1 - b1) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a1), Math.abs(b1)));\n};\n\nmodule.exports = vec2;\n","/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE. */\n\nvar glMatrix = require(\"./common.js\");\n\n/**\n * @class 3 Dimensional Vector\n * @name vec3\n */\nvar vec3 = {};\n\n/**\n * Creates a new, empty vec3\n *\n * @returns {vec3} a new 3D vector\n */\nvec3.create = function() {\n    var out = new glMatrix.ARRAY_TYPE(3);\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n    return out;\n};\n\n/**\n * Creates a new vec3 initialized with values from an existing vector\n *\n * @param {vec3} a vector to clone\n * @returns {vec3} a new 3D vector\n */\nvec3.clone = function(a) {\n    var out = new glMatrix.ARRAY_TYPE(3);\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    return out;\n};\n\n/**\n * Creates a new vec3 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} a new 3D vector\n */\nvec3.fromValues = function(x, y, z) {\n    var out = new glMatrix.ARRAY_TYPE(3);\n    out[0] = x;\n    out[1] = y;\n    out[2] = z;\n    return out;\n};\n\n/**\n * Copy the values from one vec3 to another\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the source vector\n * @returns {vec3} out\n */\nvec3.copy = function(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    return out;\n};\n\n/**\n * Set the components of a vec3 to the given values\n *\n * @param {vec3} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} out\n */\nvec3.set = function(out, x, y, z) {\n    out[0] = x;\n    out[1] = y;\n    out[2] = z;\n    return out;\n};\n\n/**\n * Adds two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nvec3.add = function(out, a, b) {\n    out[0] = a[0] + b[0];\n    out[1] = a[1] + b[1];\n    out[2] = a[2] + b[2];\n    return out;\n};\n\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nvec3.subtract = function(out, a, b) {\n    out[0] = a[0] - b[0];\n    out[1] = a[1] - b[1];\n    out[2] = a[2] - b[2];\n    return out;\n};\n\n/**\n * Alias for {@link vec3.subtract}\n * @function\n */\nvec3.sub = vec3.subtract;\n\n/**\n * Multiplies two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nvec3.multiply = function(out, a, b) {\n    out[0] = a[0] * b[0];\n    out[1] = a[1] * b[1];\n    out[2] = a[2] * b[2];\n    return out;\n};\n\n/**\n * Alias for {@link vec3.multiply}\n * @function\n */\nvec3.mul = vec3.multiply;\n\n/**\n * Divides two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nvec3.divide = function(out, a, b) {\n    out[0] = a[0] / b[0];\n    out[1] = a[1] / b[1];\n    out[2] = a[2] / b[2];\n    return out;\n};\n\n/**\n * Alias for {@link vec3.divide}\n * @function\n */\nvec3.div = vec3.divide;\n\n/**\n * Math.ceil the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to ceil\n * @returns {vec3} out\n */\nvec3.ceil = function (out, a) {\n    out[0] = Math.ceil(a[0]);\n    out[1] = Math.ceil(a[1]);\n    out[2] = Math.ceil(a[2]);\n    return out;\n};\n\n/**\n * Math.floor the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to floor\n * @returns {vec3} out\n */\nvec3.floor = function (out, a) {\n    out[0] = Math.floor(a[0]);\n    out[1] = Math.floor(a[1]);\n    out[2] = Math.floor(a[2]);\n    return out;\n};\n\n/**\n * Returns the minimum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nvec3.min = function(out, a, b) {\n    out[0] = Math.min(a[0], b[0]);\n    out[1] = Math.min(a[1], b[1]);\n    out[2] = Math.min(a[2], b[2]);\n    return out;\n};\n\n/**\n * Returns the maximum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nvec3.max = function(out, a, b) {\n    out[0] = Math.max(a[0], b[0]);\n    out[1] = Math.max(a[1], b[1]);\n    out[2] = Math.max(a[2], b[2]);\n    return out;\n};\n\n/**\n * Math.round the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to round\n * @returns {vec3} out\n */\nvec3.round = function (out, a) {\n    out[0] = Math.round(a[0]);\n    out[1] = Math.round(a[1]);\n    out[2] = Math.round(a[2]);\n    return out;\n};\n\n/**\n * Scales a vec3 by a scalar number\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec3} out\n */\nvec3.scale = function(out, a, b) {\n    out[0] = a[0] * b;\n    out[1] = a[1] * b;\n    out[2] = a[2] * b;\n    return out;\n};\n\n/**\n * Adds two vec3's after scaling the second operand by a scalar value\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec3} out\n */\nvec3.scaleAndAdd = function(out, a, b, scale) {\n    out[0] = a[0] + (b[0] * scale);\n    out[1] = a[1] + (b[1] * scale);\n    out[2] = a[2] + (b[2] * scale);\n    return out;\n};\n\n/**\n * Calculates the euclidian distance between two vec3's\n *\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {Number} distance between a and b\n */\nvec3.distance = function(a, b) {\n    var x = b[0] - a[0],\n        y = b[1] - a[1],\n        z = b[2] - a[2];\n    return Math.sqrt(x*x + y*y + z*z);\n};\n\n/**\n * Alias for {@link vec3.distance}\n * @function\n */\nvec3.dist = vec3.distance;\n\n/**\n * Calculates the squared euclidian distance between two vec3's\n *\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {Number} squared distance between a and b\n */\nvec3.squaredDistance = function(a, b) {\n    var x = b[0] - a[0],\n        y = b[1] - a[1],\n        z = b[2] - a[2];\n    return x*x + y*y + z*z;\n};\n\n/**\n * Alias for {@link vec3.squaredDistance}\n * @function\n */\nvec3.sqrDist = vec3.squaredDistance;\n\n/**\n * Calculates the length of a vec3\n *\n * @param {vec3} a vector to calculate length of\n * @returns {Number} length of a\n */\nvec3.length = function (a) {\n    var x = a[0],\n        y = a[1],\n        z = a[2];\n    return Math.sqrt(x*x + y*y + z*z);\n};\n\n/**\n * Alias for {@link vec3.length}\n * @function\n */\nvec3.len = vec3.length;\n\n/**\n * Calculates the squared length of a vec3\n *\n * @param {vec3} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\nvec3.squaredLength = function (a) {\n    var x = a[0],\n        y = a[1],\n        z = a[2];\n    return x*x + y*y + z*z;\n};\n\n/**\n * Alias for {@link vec3.squaredLength}\n * @function\n */\nvec3.sqrLen = vec3.squaredLength;\n\n/**\n * Negates the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to negate\n * @returns {vec3} out\n */\nvec3.negate = function(out, a) {\n    out[0] = -a[0];\n    out[1] = -a[1];\n    out[2] = -a[2];\n    return out;\n};\n\n/**\n * Returns the inverse of the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to invert\n * @returns {vec3} out\n */\nvec3.inverse = function(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  return out;\n};\n\n/**\n * Normalize a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to normalize\n * @returns {vec3} out\n */\nvec3.normalize = function(out, a) {\n    var x = a[0],\n        y = a[1],\n        z = a[2];\n    var len = x*x + y*y + z*z;\n    if (len > 0) {\n        //TODO: evaluate use of glm_invsqrt here?\n        len = 1 / Math.sqrt(len);\n        out[0] = a[0] * len;\n        out[1] = a[1] * len;\n        out[2] = a[2] * len;\n    }\n    return out;\n};\n\n/**\n * Calculates the dot product of two vec3's\n *\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {Number} dot product of a and b\n */\nvec3.dot = function (a, b) {\n    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n};\n\n/**\n * Computes the cross product of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nvec3.cross = function(out, a, b) {\n    var ax = a[0], ay = a[1], az = a[2],\n        bx = b[0], by = b[1], bz = b[2];\n\n    out[0] = ay * bz - az * by;\n    out[1] = az * bx - ax * bz;\n    out[2] = ax * by - ay * bx;\n    return out;\n};\n\n/**\n * Performs a linear interpolation between two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @param {Number} t interpolation amount between the two inputs\n * @returns {vec3} out\n */\nvec3.lerp = function (out, a, b, t) {\n    var ax = a[0],\n        ay = a[1],\n        az = a[2];\n    out[0] = ax + t * (b[0] - ax);\n    out[1] = ay + t * (b[1] - ay);\n    out[2] = az + t * (b[2] - az);\n    return out;\n};\n\n/**\n * Performs a hermite interpolation with two control points\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @param {vec3} c the third operand\n * @param {vec3} d the fourth operand\n * @param {Number} t interpolation amount between the two inputs\n * @returns {vec3} out\n */\nvec3.hermite = function (out, a, b, c, d, t) {\n  var factorTimes2 = t * t,\n      factor1 = factorTimes2 * (2 * t - 3) + 1,\n      factor2 = factorTimes2 * (t - 2) + t,\n      factor3 = factorTimes2 * (t - 1),\n      factor4 = factorTimes2 * (3 - 2 * t);\n  \n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  \n  return out;\n};\n\n/**\n * Performs a bezier interpolation with two control points\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @param {vec3} c the third operand\n * @param {vec3} d the fourth operand\n * @param {Number} t interpolation amount between the two inputs\n * @returns {vec3} out\n */\nvec3.bezier = function (out, a, b, c, d, t) {\n  var inverseFactor = 1 - t,\n      inverseFactorTimesTwo = inverseFactor * inverseFactor,\n      factorTimes2 = t * t,\n      factor1 = inverseFactorTimesTwo * inverseFactor,\n      factor2 = 3 * t * inverseFactorTimesTwo,\n      factor3 = 3 * factorTimes2 * inverseFactor,\n      factor4 = factorTimes2 * t;\n  \n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  \n  return out;\n};\n\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec3} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec3} out\n */\nvec3.random = function (out, scale) {\n    scale = scale || 1.0;\n\n    var r = glMatrix.RANDOM() * 2.0 * Math.PI;\n    var z = (glMatrix.RANDOM() * 2.0) - 1.0;\n    var zScale = Math.sqrt(1.0-z*z) * scale;\n\n    out[0] = Math.cos(r) * zScale;\n    out[1] = Math.sin(r) * zScale;\n    out[2] = z * scale;\n    return out;\n};\n\n/**\n * Transforms the vec3 with a mat4.\n * 4th vector component is implicitly '1'\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to transform\n * @param {mat4} m matrix to transform with\n * @returns {vec3} out\n */\nvec3.transformMat4 = function(out, a, m) {\n    var x = a[0], y = a[1], z = a[2],\n        w = m[3] * x + m[7] * y + m[11] * z + m[15];\n    w = w || 1.0;\n    out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\n    out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\n    out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\n    return out;\n};\n\n/**\n * Transforms the vec3 with a mat3.\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to transform\n * @param {mat4} m the 3x3 matrix to transform with\n * @returns {vec3} out\n */\nvec3.transformMat3 = function(out, a, m) {\n    var x = a[0], y = a[1], z = a[2];\n    out[0] = x * m[0] + y * m[3] + z * m[6];\n    out[1] = x * m[1] + y * m[4] + z * m[7];\n    out[2] = x * m[2] + y * m[5] + z * m[8];\n    return out;\n};\n\n/**\n * Transforms the vec3 with a quat\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to transform\n * @param {quat} q quaternion to transform with\n * @returns {vec3} out\n */\nvec3.transformQuat = function(out, a, q) {\n    // benchmarks: http://jsperf.com/quaternion-transform-vec3-implementations\n\n    var x = a[0], y = a[1], z = a[2],\n        qx = q[0], qy = q[1], qz = q[2], qw = q[3],\n\n        // calculate quat * vec\n        ix = qw * x + qy * z - qz * y,\n        iy = qw * y + qz * x - qx * z,\n        iz = qw * z + qx * y - qy * x,\n        iw = -qx * x - qy * y - qz * z;\n\n    // calculate result * inverse quat\n    out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n    out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n    out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n    return out;\n};\n\n/**\n * Rotate a 3D vector around the x-axis\n * @param {vec3} out The receiving vec3\n * @param {vec3} a The vec3 point to rotate\n * @param {vec3} b The origin of the rotation\n * @param {Number} c The angle of rotation\n * @returns {vec3} out\n */\nvec3.rotateX = function(out, a, b, c){\n   var p = [], r=[];\n\t  //Translate point to the origin\n\t  p[0] = a[0] - b[0];\n\t  p[1] = a[1] - b[1];\n  \tp[2] = a[2] - b[2];\n\n\t  //perform rotation\n\t  r[0] = p[0];\n\t  r[1] = p[1]*Math.cos(c) - p[2]*Math.sin(c);\n\t  r[2] = p[1]*Math.sin(c) + p[2]*Math.cos(c);\n\n\t  //translate to correct position\n\t  out[0] = r[0] + b[0];\n\t  out[1] = r[1] + b[1];\n\t  out[2] = r[2] + b[2];\n\n  \treturn out;\n};\n\n/**\n * Rotate a 3D vector around the y-axis\n * @param {vec3} out The receiving vec3\n * @param {vec3} a The vec3 point to rotate\n * @param {vec3} b The origin of the rotation\n * @param {Number} c The angle of rotation\n * @returns {vec3} out\n */\nvec3.rotateY = function(out, a, b, c){\n  \tvar p = [], r=[];\n  \t//Translate point to the origin\n  \tp[0] = a[0] - b[0];\n  \tp[1] = a[1] - b[1];\n  \tp[2] = a[2] - b[2];\n  \n  \t//perform rotation\n  \tr[0] = p[2]*Math.sin(c) + p[0]*Math.cos(c);\n  \tr[1] = p[1];\n  \tr[2] = p[2]*Math.cos(c) - p[0]*Math.sin(c);\n  \n  \t//translate to correct position\n  \tout[0] = r[0] + b[0];\n  \tout[1] = r[1] + b[1];\n  \tout[2] = r[2] + b[2];\n  \n  \treturn out;\n};\n\n/**\n * Rotate a 3D vector around the z-axis\n * @param {vec3} out The receiving vec3\n * @param {vec3} a The vec3 point to rotate\n * @param {vec3} b The origin of the rotation\n * @param {Number} c The angle of rotation\n * @returns {vec3} out\n */\nvec3.rotateZ = function(out, a, b, c){\n  \tvar p = [], r=[];\n  \t//Translate point to the origin\n  \tp[0] = a[0] - b[0];\n  \tp[1] = a[1] - b[1];\n  \tp[2] = a[2] - b[2];\n  \n  \t//perform rotation\n  \tr[0] = p[0]*Math.cos(c) - p[1]*Math.sin(c);\n  \tr[1] = p[0]*Math.sin(c) + p[1]*Math.cos(c);\n  \tr[2] = p[2];\n  \n  \t//translate to correct position\n  \tout[0] = r[0] + b[0];\n  \tout[1] = r[1] + b[1];\n  \tout[2] = r[2] + b[2];\n  \n  \treturn out;\n};\n\n/**\n * Perform some operation over an array of vec3s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\nvec3.forEach = (function() {\n    var vec = vec3.create();\n\n    return function(a, stride, offset, count, fn, arg) {\n        var i, l;\n        if(!stride) {\n            stride = 3;\n        }\n\n        if(!offset) {\n            offset = 0;\n        }\n        \n        if(count) {\n            l = Math.min((count * stride) + offset, a.length);\n        } else {\n            l = a.length;\n        }\n\n        for(i = offset; i < l; i += stride) {\n            vec[0] = a[i]; vec[1] = a[i+1]; vec[2] = a[i+2];\n            fn(vec, vec, arg);\n            a[i] = vec[0]; a[i+1] = vec[1]; a[i+2] = vec[2];\n        }\n        \n        return a;\n    };\n})();\n\n/**\n * Get the angle between two 3D vectors\n * @param {vec3} a The first operand\n * @param {vec3} b The second operand\n * @returns {Number} The angle in radians\n */\nvec3.angle = function(a, b) {\n   \n    var tempA = vec3.fromValues(a[0], a[1], a[2]);\n    var tempB = vec3.fromValues(b[0], b[1], b[2]);\n \n    vec3.normalize(tempA, tempA);\n    vec3.normalize(tempB, tempB);\n \n    var cosine = vec3.dot(tempA, tempB);\n\n    if(cosine > 1.0){\n        return 0;\n    } else {\n        return Math.acos(cosine);\n    }     \n};\n\n/**\n * Returns a string representation of a vector\n *\n * @param {vec3} vec vector to represent as a string\n * @returns {String} string representation of the vector\n */\nvec3.str = function (a) {\n    return 'vec3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ')';\n};\n\n/**\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\n *\n * @param {vec3} a The first vector.\n * @param {vec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nvec3.exactEquals = function (a, b) {\n    return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\n};\n\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {vec3} a The first vector.\n * @param {vec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nvec3.equals = function (a, b) {\n    var a0 = a[0], a1 = a[1], a2 = a[2];\n    var b0 = b[0], b1 = b[1], b2 = b[2];\n    return (Math.abs(a0 - b0) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n            Math.abs(a1 - b1) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\n            Math.abs(a2 - b2) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a2), Math.abs(b2)));\n};\n\nmodule.exports = vec3;\n","/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE. */\n\nvar glMatrix = require(\"./common.js\");\n\n/**\n * @class 4 Dimensional Vector\n * @name vec4\n */\nvar vec4 = {};\n\n/**\n * Creates a new, empty vec4\n *\n * @returns {vec4} a new 4D vector\n */\nvec4.create = function() {\n    var out = new glMatrix.ARRAY_TYPE(4);\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    return out;\n};\n\n/**\n * Creates a new vec4 initialized with values from an existing vector\n *\n * @param {vec4} a vector to clone\n * @returns {vec4} a new 4D vector\n */\nvec4.clone = function(a) {\n    var out = new glMatrix.ARRAY_TYPE(4);\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    return out;\n};\n\n/**\n * Creates a new vec4 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {vec4} a new 4D vector\n */\nvec4.fromValues = function(x, y, z, w) {\n    var out = new glMatrix.ARRAY_TYPE(4);\n    out[0] = x;\n    out[1] = y;\n    out[2] = z;\n    out[3] = w;\n    return out;\n};\n\n/**\n * Copy the values from one vec4 to another\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the source vector\n * @returns {vec4} out\n */\nvec4.copy = function(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    return out;\n};\n\n/**\n * Set the components of a vec4 to the given values\n *\n * @param {vec4} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {vec4} out\n */\nvec4.set = function(out, x, y, z, w) {\n    out[0] = x;\n    out[1] = y;\n    out[2] = z;\n    out[3] = w;\n    return out;\n};\n\n/**\n * Adds two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {vec4} out\n */\nvec4.add = function(out, a, b) {\n    out[0] = a[0] + b[0];\n    out[1] = a[1] + b[1];\n    out[2] = a[2] + b[2];\n    out[3] = a[3] + b[3];\n    return out;\n};\n\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {vec4} out\n */\nvec4.subtract = function(out, a, b) {\n    out[0] = a[0] - b[0];\n    out[1] = a[1] - b[1];\n    out[2] = a[2] - b[2];\n    out[3] = a[3] - b[3];\n    return out;\n};\n\n/**\n * Alias for {@link vec4.subtract}\n * @function\n */\nvec4.sub = vec4.subtract;\n\n/**\n * Multiplies two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {vec4} out\n */\nvec4.multiply = function(out, a, b) {\n    out[0] = a[0] * b[0];\n    out[1] = a[1] * b[1];\n    out[2] = a[2] * b[2];\n    out[3] = a[3] * b[3];\n    return out;\n};\n\n/**\n * Alias for {@link vec4.multiply}\n * @function\n */\nvec4.mul = vec4.multiply;\n\n/**\n * Divides two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {vec4} out\n */\nvec4.divide = function(out, a, b) {\n    out[0] = a[0] / b[0];\n    out[1] = a[1] / b[1];\n    out[2] = a[2] / b[2];\n    out[3] = a[3] / b[3];\n    return out;\n};\n\n/**\n * Alias for {@link vec4.divide}\n * @function\n */\nvec4.div = vec4.divide;\n\n/**\n * Math.ceil the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a vector to ceil\n * @returns {vec4} out\n */\nvec4.ceil = function (out, a) {\n    out[0] = Math.ceil(a[0]);\n    out[1] = Math.ceil(a[1]);\n    out[2] = Math.ceil(a[2]);\n    out[3] = Math.ceil(a[3]);\n    return out;\n};\n\n/**\n * Math.floor the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a vector to floor\n * @returns {vec4} out\n */\nvec4.floor = function (out, a) {\n    out[0] = Math.floor(a[0]);\n    out[1] = Math.floor(a[1]);\n    out[2] = Math.floor(a[2]);\n    out[3] = Math.floor(a[3]);\n    return out;\n};\n\n/**\n * Returns the minimum of two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {vec4} out\n */\nvec4.min = function(out, a, b) {\n    out[0] = Math.min(a[0], b[0]);\n    out[1] = Math.min(a[1], b[1]);\n    out[2] = Math.min(a[2], b[2]);\n    out[3] = Math.min(a[3], b[3]);\n    return out;\n};\n\n/**\n * Returns the maximum of two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {vec4} out\n */\nvec4.max = function(out, a, b) {\n    out[0] = Math.max(a[0], b[0]);\n    out[1] = Math.max(a[1], b[1]);\n    out[2] = Math.max(a[2], b[2]);\n    out[3] = Math.max(a[3], b[3]);\n    return out;\n};\n\n/**\n * Math.round the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a vector to round\n * @returns {vec4} out\n */\nvec4.round = function (out, a) {\n    out[0] = Math.round(a[0]);\n    out[1] = Math.round(a[1]);\n    out[2] = Math.round(a[2]);\n    out[3] = Math.round(a[3]);\n    return out;\n};\n\n/**\n * Scales a vec4 by a scalar number\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec4} out\n */\nvec4.scale = function(out, a, b) {\n    out[0] = a[0] * b;\n    out[1] = a[1] * b;\n    out[2] = a[2] * b;\n    out[3] = a[3] * b;\n    return out;\n};\n\n/**\n * Adds two vec4's after scaling the second operand by a scalar value\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec4} out\n */\nvec4.scaleAndAdd = function(out, a, b, scale) {\n    out[0] = a[0] + (b[0] * scale);\n    out[1] = a[1] + (b[1] * scale);\n    out[2] = a[2] + (b[2] * scale);\n    out[3] = a[3] + (b[3] * scale);\n    return out;\n};\n\n/**\n * Calculates the euclidian distance between two vec4's\n *\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {Number} distance between a and b\n */\nvec4.distance = function(a, b) {\n    var x = b[0] - a[0],\n        y = b[1] - a[1],\n        z = b[2] - a[2],\n        w = b[3] - a[3];\n    return Math.sqrt(x*x + y*y + z*z + w*w);\n};\n\n/**\n * Alias for {@link vec4.distance}\n * @function\n */\nvec4.dist = vec4.distance;\n\n/**\n * Calculates the squared euclidian distance between two vec4's\n *\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {Number} squared distance between a and b\n */\nvec4.squaredDistance = function(a, b) {\n    var x = b[0] - a[0],\n        y = b[1] - a[1],\n        z = b[2] - a[2],\n        w = b[3] - a[3];\n    return x*x + y*y + z*z + w*w;\n};\n\n/**\n * Alias for {@link vec4.squaredDistance}\n * @function\n */\nvec4.sqrDist = vec4.squaredDistance;\n\n/**\n * Calculates the length of a vec4\n *\n * @param {vec4} a vector to calculate length of\n * @returns {Number} length of a\n */\nvec4.length = function (a) {\n    var x = a[0],\n        y = a[1],\n        z = a[2],\n        w = a[3];\n    return Math.sqrt(x*x + y*y + z*z + w*w);\n};\n\n/**\n * Alias for {@link vec4.length}\n * @function\n */\nvec4.len = vec4.length;\n\n/**\n * Calculates the squared length of a vec4\n *\n * @param {vec4} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\nvec4.squaredLength = function (a) {\n    var x = a[0],\n        y = a[1],\n        z = a[2],\n        w = a[3];\n    return x*x + y*y + z*z + w*w;\n};\n\n/**\n * Alias for {@link vec4.squaredLength}\n * @function\n */\nvec4.sqrLen = vec4.squaredLength;\n\n/**\n * Negates the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a vector to negate\n * @returns {vec4} out\n */\nvec4.negate = function(out, a) {\n    out[0] = -a[0];\n    out[1] = -a[1];\n    out[2] = -a[2];\n    out[3] = -a[3];\n    return out;\n};\n\n/**\n * Returns the inverse of the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a vector to invert\n * @returns {vec4} out\n */\nvec4.inverse = function(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  out[3] = 1.0 / a[3];\n  return out;\n};\n\n/**\n * Normalize a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a vector to normalize\n * @returns {vec4} out\n */\nvec4.normalize = function(out, a) {\n    var x = a[0],\n        y = a[1],\n        z = a[2],\n        w = a[3];\n    var len = x*x + y*y + z*z + w*w;\n    if (len > 0) {\n        len = 1 / Math.sqrt(len);\n        out[0] = x * len;\n        out[1] = y * len;\n        out[2] = z * len;\n        out[3] = w * len;\n    }\n    return out;\n};\n\n/**\n * Calculates the dot product of two vec4's\n *\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {Number} dot product of a and b\n */\nvec4.dot = function (a, b) {\n    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];\n};\n\n/**\n * Performs a linear interpolation between two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @param {Number} t interpolation amount between the two inputs\n * @returns {vec4} out\n */\nvec4.lerp = function (out, a, b, t) {\n    var ax = a[0],\n        ay = a[1],\n        az = a[2],\n        aw = a[3];\n    out[0] = ax + t * (b[0] - ax);\n    out[1] = ay + t * (b[1] - ay);\n    out[2] = az + t * (b[2] - az);\n    out[3] = aw + t * (b[3] - aw);\n    return out;\n};\n\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec4} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec4} out\n */\nvec4.random = function (out, scale) {\n    scale = scale || 1.0;\n\n    //TODO: This is a pretty awful way of doing this. Find something better.\n    out[0] = glMatrix.RANDOM();\n    out[1] = glMatrix.RANDOM();\n    out[2] = glMatrix.RANDOM();\n    out[3] = glMatrix.RANDOM();\n    vec4.normalize(out, out);\n    vec4.scale(out, out, scale);\n    return out;\n};\n\n/**\n * Transforms the vec4 with a mat4.\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the vector to transform\n * @param {mat4} m matrix to transform with\n * @returns {vec4} out\n */\nvec4.transformMat4 = function(out, a, m) {\n    var x = a[0], y = a[1], z = a[2], w = a[3];\n    out[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;\n    out[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;\n    out[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;\n    out[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;\n    return out;\n};\n\n/**\n * Transforms the vec4 with a quat\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the vector to transform\n * @param {quat} q quaternion to transform with\n * @returns {vec4} out\n */\nvec4.transformQuat = function(out, a, q) {\n    var x = a[0], y = a[1], z = a[2],\n        qx = q[0], qy = q[1], qz = q[2], qw = q[3],\n\n        // calculate quat * vec\n        ix = qw * x + qy * z - qz * y,\n        iy = qw * y + qz * x - qx * z,\n        iz = qw * z + qx * y - qy * x,\n        iw = -qx * x - qy * y - qz * z;\n\n    // calculate result * inverse quat\n    out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n    out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n    out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n    out[3] = a[3];\n    return out;\n};\n\n/**\n * Perform some operation over an array of vec4s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec4. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec4s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\nvec4.forEach = (function() {\n    var vec = vec4.create();\n\n    return function(a, stride, offset, count, fn, arg) {\n        var i, l;\n        if(!stride) {\n            stride = 4;\n        }\n\n        if(!offset) {\n            offset = 0;\n        }\n        \n        if(count) {\n            l = Math.min((count * stride) + offset, a.length);\n        } else {\n            l = a.length;\n        }\n\n        for(i = offset; i < l; i += stride) {\n            vec[0] = a[i]; vec[1] = a[i+1]; vec[2] = a[i+2]; vec[3] = a[i+3];\n            fn(vec, vec, arg);\n            a[i] = vec[0]; a[i+1] = vec[1]; a[i+2] = vec[2]; a[i+3] = vec[3];\n        }\n        \n        return a;\n    };\n})();\n\n/**\n * Returns a string representation of a vector\n *\n * @param {vec4} vec vector to represent as a string\n * @returns {String} string representation of the vector\n */\nvec4.str = function (a) {\n    return 'vec4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';\n};\n\n/**\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\n *\n * @param {vec4} a The first vector.\n * @param {vec4} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nvec4.exactEquals = function (a, b) {\n    return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\n};\n\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {vec4} a The first vector.\n * @param {vec4} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nvec4.equals = function (a, b) {\n    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];\n    var b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3];\n    return (Math.abs(a0 - b0) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n            Math.abs(a1 - b1) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\n            Math.abs(a2 - b2) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&\n            Math.abs(a3 - b3) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a3), Math.abs(b3)));\n};\n\nmodule.exports = vec4;\n","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n// Scheduler.js\nvar FRAMERATE = 60;\n\nvar Scheduler = function () {\n\tfunction Scheduler() {\n\t\t_classCallCheck(this, Scheduler);\n\n\t\tthis._delayTasks = [];\n\t\tthis._nextTasks = [];\n\t\tthis._deferTasks = [];\n\t\tthis._highTasks = [];\n\t\tthis._usurpTask = [];\n\t\tthis._enterframeTasks = [];\n\t\tthis._idTable = 0;\n\n\t\tthis._loop();\n\t}\n\n\t//  PUBLIC METHODS\n\n\t_createClass(Scheduler, [{\n\t\tkey: \"addEF\",\n\t\tvalue: function addEF(func, params) {\n\t\t\tparams = params || [];\n\t\t\tvar id = this._idTable;\n\t\t\tthis._enterframeTasks[id] = { func: func, params: params };\n\t\t\tthis._idTable++;\n\t\t\treturn id;\n\t\t}\n\t}, {\n\t\tkey: \"removeEF\",\n\t\tvalue: function removeEF(id) {\n\t\t\tif (this._enterframeTasks[id] !== undefined) {\n\t\t\t\tthis._enterframeTasks[id] = null;\n\t\t\t}\n\t\t\treturn -1;\n\t\t}\n\t}, {\n\t\tkey: \"delay\",\n\t\tvalue: function delay(func, params, _delay) {\n\t\t\tvar time = new Date().getTime();\n\t\t\tvar t = { func: func, params: params, delay: _delay, time: time };\n\t\t\tthis._delayTasks.push(t);\n\t\t}\n\t}, {\n\t\tkey: \"defer\",\n\t\tvalue: function defer(func, params) {\n\t\t\tvar t = { func: func, params: params };\n\t\t\tthis._deferTasks.push(t);\n\t\t}\n\t}, {\n\t\tkey: \"next\",\n\t\tvalue: function next(func, params) {\n\t\t\tvar t = { func: func, params: params };\n\t\t\tthis._nextTasks.push(t);\n\t\t}\n\t}, {\n\t\tkey: \"usurp\",\n\t\tvalue: function usurp(func, params) {\n\t\t\tvar t = { func: func, params: params };\n\t\t\tthis._usurpTask.push(t);\n\t\t}\n\n\t\t//  PRIVATE METHODS\n\n\t}, {\n\t\tkey: \"_process\",\n\t\tvalue: function _process() {\n\t\t\tvar i = 0;\n\t\t\tvar task = void 0;\n\t\t\tvar interval = void 0;\n\t\t\tvar current = void 0;\n\t\t\tfor (i = 0; i < this._enterframeTasks.length; i++) {\n\t\t\t\ttask = this._enterframeTasks[i];\n\t\t\t\tif (task !== null && task !== undefined) {\n\t\t\t\t\ttask.func(task.params);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\twhile (this._highTasks.length > 0) {\n\t\t\t\ttask = this._highTasks.pop();\n\t\t\t\ttask.func(task.params);\n\t\t\t}\n\n\t\t\tvar startTime = new Date().getTime();\n\n\t\t\tfor (i = 0; i < this._delayTasks.length; i++) {\n\t\t\t\ttask = this._delayTasks[i];\n\t\t\t\tif (startTime - task.time > task.delay) {\n\t\t\t\t\ttask.func(task.params);\n\t\t\t\t\tthis._delayTasks.splice(i, 1);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tstartTime = new Date().getTime();\n\t\t\tinterval = 1000 / FRAMERATE;\n\t\t\twhile (this._deferTasks.length > 0) {\n\t\t\t\ttask = this._deferTasks.shift();\n\t\t\t\tcurrent = new Date().getTime();\n\t\t\t\tif (current - startTime < interval) {\n\t\t\t\t\ttask.func(task.params);\n\t\t\t\t} else {\n\t\t\t\t\tthis._deferTasks.unshift(task);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tstartTime = new Date().getTime();\n\t\t\tinterval = 1000 / FRAMERATE;\n\t\t\twhile (this._usurpTask.length > 0) {\n\t\t\t\ttask = this._usurpTask.shift();\n\t\t\t\tcurrent = new Date().getTime();\n\t\t\t\tif (current - startTime < interval) {\n\t\t\t\t\ttask.func(task.params);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis._highTasks = this._highTasks.concat(this._nextTasks);\n\t\t\tthis._nextTasks = [];\n\t\t\tthis._usurpTask = [];\n\t\t}\n\t}, {\n\t\tkey: \"_loop\",\n\t\tvalue: function _loop() {\n\t\t\tvar _this = this;\n\n\t\t\tthis._process();\n\t\t\twindow.requestAnimationFrame(function () {\n\t\t\t\treturn _this._loop();\n\t\t\t});\n\t\t}\n\t}]);\n\n\treturn Scheduler;\n}();\n\nvar scheduler = new Scheduler();\n\nexports.default = scheduler;","// alfrid.js\n\nimport GLM \t\t\t\t\tfrom 'gl-matrix';\nimport GLTool \t\t\t\tfrom './alfrid/GLTool';\nimport GLShader \t\t\tfrom './alfrid/GLShader';\nimport GLTexture \t\t\tfrom './alfrid/GLTexture';\nimport GLCubeTexture \t\tfrom './alfrid/GLCubeTexture';\nimport Mesh \t\t\t\tfrom './alfrid/Mesh';\nimport Geom\t\t\t\t\tfrom './alfrid/Geom';\nimport Batch\t\t\t\tfrom './alfrid/Batch';\nimport FrameBuffer\t\t\tfrom './alfrid/FrameBuffer';\nimport CubeFrameBuffer\t\tfrom './alfrid/CubeFrameBuffer';\n\n//\tTOOLS\nimport Scheduler \t\t\tfrom 'scheduling';\nimport EventDispatcher \t\tfrom './alfrid/tools/EventDispatcher';\nimport EaseNumber \t\t\tfrom './alfrid/tools/EaseNumber';\nimport OrbitalControl\t\tfrom './alfrid/tools/OrbitalControl';\nimport QuatRotation\t\t\tfrom './alfrid/tools/QuatRotation';\n\n//\tCAMERAS\nimport Camera \t\t\t\tfrom './alfrid/cameras/Camera';\nimport CameraOrtho \t\t\tfrom './alfrid/cameras/CameraOrtho';\nimport CameraPerspective\tfrom './alfrid/cameras/CameraPerspective';\nimport CameraCube\t\t\tfrom './alfrid/cameras/CameraCube';\n\n//\tLOADERS\nimport BinaryLoader\t\t\tfrom './alfrid/loaders/BinaryLoader';\nimport ObjLoader\t\t\tfrom './alfrid/loaders/ObjLoader';\nimport HDRLoader\t\t\tfrom './alfrid/loaders/HDRLoader';\n\n//\tHELPERS\nimport BatchCopy\t\t\tfrom './alfrid/helpers/BatchCopy';\nimport BatchAxis\t\t\tfrom './alfrid/helpers/BatchAxis';\nimport BatchBall\t\t\tfrom './alfrid/helpers/BatchBall';\nimport BatchDotsPlane\t\tfrom './alfrid/helpers/BatchDotsPlane';\nimport BatchSkybox\t\t\tfrom './alfrid/helpers/BatchSkybox';\nimport Scene\t\t\t\tfrom './alfrid/helpers/Scene';\nimport View\t\t\t\t\tfrom './alfrid/helpers/View';\nimport ShaderLibs\t\t\tfrom './alfrid/tools/ShaderLibs';\n\n//\tPOST\nimport EffectComposer\t\tfrom './alfrid/post/EffectComposer';\n\nconst VERSION = '0.0.1';\n\nclass alfrid {\n\n\tconstructor() {\n\t\t\n\t\tthis.glm               = GLM;\n\t\tthis.GL                = GLTool;\n\t\tthis.GLTool            = GLTool;\n\t\tthis.GLShader          = GLShader;\n\t\tthis.GLTexture         = GLTexture;\n\t\tthis.GLCubeTexture     = GLCubeTexture;\n\t\tthis.Mesh              = Mesh;\n\t\tthis.Geom              = Geom;\n\t\tthis.Batch             = Batch;\n\t\tthis.FrameBuffer       = FrameBuffer;\n\t\tthis.CubeFrameBuffer   = CubeFrameBuffer;\n\t\tthis.Scheduler         = Scheduler;\n\t\tthis.EventDispatcher   = EventDispatcher;\n\t\tthis.EaseNumber        = EaseNumber;\n\t\tthis.Camera            = Camera;\n\t\tthis.CameraOrtho       = CameraOrtho;\n\t\tthis.CameraPerspective = CameraPerspective;\n\t\tthis.CameraCube        = CameraCube;\n\t\tthis.OrbitalControl    = OrbitalControl;\n\t\tthis.QuatRotation      = QuatRotation;\n\t\tthis.BinaryLoader      = BinaryLoader;\n\t\tthis.ObjLoader         = ObjLoader;\n\t\tthis.HDRLoader         = HDRLoader;\n\t\tthis.BatchCopy         = BatchCopy;\n\t\tthis.BatchAxis         = BatchAxis;\n\t\tthis.BatchBall         = BatchBall;\n\t\tthis.BatchBall         = BatchBall;\n\t\tthis.BatchSkybox       = BatchSkybox;\n\t\tthis.BatchDotsPlane    = BatchDotsPlane;\n\t\tthis.Scene             = Scene;\n\t\tthis.View              = View;\n\t\tthis.EffectComposer    = EffectComposer;\n\t\tthis.ShaderLibs        = ShaderLibs;\n\n\n\t\t//\tNOT SUPER SURE I'VE DONE THIS IS A GOOD WAY\n\n\t\tfor( let s in GLM) {\n\t\t\tif(GLM[s]) {\n\t\t\t\twindow[s] = GLM[s];\n\t\t\t}\n\t\t}\n\n\t}\n\n\n\tlog() {\n\t\tif(navigator.userAgent.indexOf('Chrome') > -1) {\n            console.log('%clib alfrid : VERSION ' + VERSION, 'background: #193441; color: #FCFFF5');\n        } else {\n        \tconsole.log('lib alfrid : VERSION ', VERSION);\n        }\n\t\tconsole.log('%cClasses : ', 'color: #193441');\n\n\t\tfor(let s in this) {\n\t\t\tif(this[s]) {\n\t\t\t\tconsole.log('%c - '+s, 'color: #3E606F');\n\t\t\t}\n\t\t}\n\t}\n\n}\n\nlet b = new alfrid();\n\nmodule.exports = b;\n","// Batch.js\n\nimport GL from './GLTool';\n\nclass Batch {\n\n\tconstructor(mMesh, mShader) {\n\t\tthis._mesh = mMesh;\n\t\tthis._shader = mShader;\n\t}\n\n\n\t//\tPUBLIC METHODS\n\n\tdraw() {\n\t\tthis._shader.bind();\n\t\tGL.draw(this.mesh);\n\t}\n\n\n\t//\tGETTER AND SETTER\n\n\tget mesh() {\treturn this._mesh;\t}\n\n\tget shader() {\treturn this._shader;\t}\n}\n\nexport default Batch;","// CubeFrameBuffer.js\n\n'use strict';\n\nimport GL from './GLTool';\nimport GLCubeTexture from './GLCubeTexture';\n\nlet gl;\n\n\nclass CubeFrameBuffer {\n\n\tconstructor(size, mParameters={}) {\n\t\tgl = GL.gl;\n\t\tthis._size = size;\n\t\tthis.magFilter = mParameters.magFilter || gl.LINEAR;\n\t\tthis.minFilter = mParameters.minFilter || gl.LINEAR;\n\t\tthis.wrapS     = mParameters.wrapS || gl.CLAMP_TO_EDGE;\n\t\tthis.wrapT     = mParameters.wrapT || gl.CLAMP_TO_EDGE;\n\n\t\tthis._init();\n\t}\n\n\n\t_init() {\n\t\tthis.texture   = gl.createTexture();\n\t\tthis.glTexture = new GLCubeTexture(this.texture, {}, true);\n\n\t\tgl.bindTexture(gl.TEXTURE_CUBE_MAP, this.texture);\n\t\tgl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_MAG_FILTER, this.magFilter);\n\t\tgl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_MIN_FILTER, this.minFilter);\n\t\tgl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_WRAP_S, this.wrapS);\n\t\tgl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_WRAP_T, this.wrapT);\n\n\t\tconst targets = [\n\t\t\tgl.TEXTURE_CUBE_MAP_POSITIVE_X, gl.TEXTURE_CUBE_MAP_NEGATIVE_X, \n\t\t\tgl.TEXTURE_CUBE_MAP_POSITIVE_Y, gl.TEXTURE_CUBE_MAP_NEGATIVE_Y, \n\t\t\tgl.TEXTURE_CUBE_MAP_POSITIVE_Z, gl.TEXTURE_CUBE_MAP_NEGATIVE_Z \n\t\t];\n\n\t\tfor( let i=0; i<targets.length ;i++) {\n\t\t\tgl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, false);\n\t\t\tgl.texImage2D(targets[i], 0, gl.RGBA, this.width, this.height, 0, gl.RGBA, gl.FLOAT, null);\n\t\t}\n\n\n\t\tthis._frameBuffers = [];\n\t\tfor( let i=0; i<targets.length ;i++) {\n\t\t\tlet frameBuffer = gl.createFramebuffer();\n\t\t\tgl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer);\n\t\t\tgl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, targets[i], this.texture, 0);\n\n\t\t\tlet status = gl.checkFramebufferStatus(gl.FRAMEBUFFER);\n\t\t\tif (status !== gl.FRAMEBUFFER_COMPLETE) {\n\t\t\t\tconsole.log('gl.checkFramebufferStatus() returned ' + status);\n\t\t\t}\n\n\t\t\tthis._frameBuffers.push(frameBuffer);\n\t\t}\n\n\t\t// gl.generateMipmap(gl.TEXTURE_CUBE_MAP);\n\t\tgl.bindFramebuffer(gl.FRAMEBUFFER, null);\n\t\tgl.bindRenderbuffer(gl.RENDERBUFFER, null);\n\t\tgl.bindTexture(gl.TEXTURE_CUBE_MAP, null);\n\t}\n\n\n\tbind(mTargetIndex) {\n\n\t\t// if(Math.random() > .99) console.log('bind :', mTargetIndex, this._frameBuffers[mTargetIndex]);\n\t\tGL.viewport(0, 0, this.width, this.height);\n\t\tgl.bindFramebuffer(gl.FRAMEBUFFER, this._frameBuffers[mTargetIndex]);\n\t}\n\n\tunbind() {\n\t\tgl.bindFramebuffer(gl.FRAMEBUFFER, null);\n\t\tGL.viewport(0, 0, GL.width, GL.height);\n\t}\n\n\t//\tTEXTURES\n\n\tgetTexture() {\n\t\treturn this.glTexture;\n\t}\n\n\t//\tGETTERS AND SETTERS\n\n\tget width() {\n\t\treturn this._size;\n\t}\n\n\tget height() {\n\t\treturn this._size;\n\t}\n}\n\n\nexport default CubeFrameBuffer;","// FrameBuffer.js\n\n'use strict';\n\nimport GL from './GLTool';\nimport GLTexture from './GLTexture';\n\nconst isPowerOfTwo = function(x) {\t\n\treturn (x !== 0) && (!(x & (x - 1)));\n};\n\nlet gl;\nlet WEBGL_depth_texture;\n\nclass FrameBuffer {\n\n\tconstructor(mWidth, mHeight, mParameters={}) {\n\t\tgl = GL.gl;\n\t\tWEBGL_depth_texture = GL.checkExtension('WEBGL_depth_texture');\n\n\t\tthis.width      = mWidth;\n\t\tthis.height     = mHeight;\n\n\t\tthis.magFilter  = mParameters.magFilter \t|| gl.LINEAR;\n\t\tthis.minFilter  = mParameters.minFilter \t|| gl.LINEAR;\n\t\tthis.wrapS      = mParameters.wrapS \t\t|| gl.CLAMP_TO_EDGE;\n\t\tthis.wrapT      = mParameters.wrapT \t\t|| gl.CLAMP_TO_EDGE;\n\t\tthis.useDepth   = mParameters.useDepth \t\t|| true;\n\t\tthis.useStencil = mParameters.useStencil \t|| false;\n\n\t\tif(!isPowerOfTwo(this.width) || !isPowerOfTwo(this.height)) {\n\t\t\tthis.wrapS = this.wrapT = gl.CLAMP_TO_EDGE;\n\n\t\t\tif(this.minFilter === gl.LINEAR_MIPMAP_NEAREST) {\n\t\t\t\tthis.minFilter = gl.LINEAR;\n\t\t\t}\n\t\t} \n\n\t\tthis._init();\n\t}\n\n\n\t_init() {\n\t\tthis.texture            = gl.createTexture();\n\t\tthis.glTexture\t\t\t= new GLTexture(this.texture, true);\n\n\t\tthis.depthTexture       = gl.createTexture();\n\t\tthis.glDepthTexture\t\t= new GLTexture(this.depthTexture, true);\n\t\t\n\t\tthis.frameBuffer        = gl.createFramebuffer();\t\t\n\t\tgl.bindFramebuffer(gl.FRAMEBUFFER, this.frameBuffer);\n\n\n\t\t//\tSETUP TEXTURE MIPMAP, WRAP\n\n\t\tgl.bindTexture(gl.TEXTURE_2D, this.texture);\n\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, this.magFilter);\n\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, this.minFilter);\n\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, this.wrapS);\n\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, this.wrapT);\n\t\tgl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, this.width, this.height, 0, gl.RGBA, GL.isMobile ? gl.UNSIGNED_BYTE : gl.FLOAT, null);\n\n\t\tif(WEBGL_depth_texture) {\n\t\t\tgl.bindTexture(gl.TEXTURE_2D, this.depthTexture);\n\t\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, this.magFilter);\n\t\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, this.minFilter);\n\t\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, this.wrapS);\n\t\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, this.wrapT);\n\t\t\tgl.texImage2D(gl.TEXTURE_2D, 0, gl.DEPTH_COMPONENT, this.width, this.height, 0, gl.DEPTH_COMPONENT, gl.UNSIGNED_SHORT, null);\t\n\t\t}\n\t\t\n\n\t\t//\tGET COLOUR\n\n\t\tgl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, this.texture, 0);\n\n\t\t//\tGET DEPTH\n\n\t\tgl.framebufferTexture2D(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.TEXTURE_2D, this.depthTexture, 0);\n\n\n\t\tif(this.minFilter === gl.LINEAR_MIPMAP_NEAREST)\t{\n\t\t\tgl.bindTexture(gl.TEXTURE_2D, this.texture);\n\t\t\tgl.generateMipmap(gl.TEXTURE_2D);\n\t\t}\n\n\t\t//\tUNBIND\n\n\t\tgl.bindTexture(gl.TEXTURE_2D, null);\n\t\tgl.bindRenderbuffer(gl.RENDERBUFFER, null);\n\t\tgl.bindFramebuffer(gl.FRAMEBUFFER, null);\n\n\t\t\n\t\t//\tCLEAR FRAMEBUFFER \n\n\t\tthis.clear();\n\t}\n\n\n\t//\tPUBLIC METHODS\n\n\tbind() {\n\t\tGL.viewport(0, 0, this.width, this.height);\n\t\tgl.bindFramebuffer(gl.FRAMEBUFFER, this.frameBuffer);\n\t}\n\n\n\tunbind() {\n\t\tgl.bindFramebuffer(gl.FRAMEBUFFER, null);\n\t\tGL.viewport(0, 0, GL.width, GL.height);\n\t}\n\n\n\tclear(r=0, g=0, b=0, a=0) {\n\t\tthis.bind();\n\t\tGL.clear(r, g, b, a);\n\t\tthis.unbind();\n\t}\t\n\n\n\t//\tTEXTURES\n\n\tgetTexture() {\n\t\treturn this.glTexture;\n\t}\n\n\tgetDepthTexture() {\n\t\treturn this.glDepthTexture;\n\t}\n\n\n\t//\tMIPMAP FILTER\n\n\tminFilter(mValue) {\n\t\tif(mValue !== gl.LINEAR && mValue !== gl.NEAREST && mValue !== gl.LINEAR_MIPMAP_NEAREST) { return this; }\n\t\tthis.minFilter = mValue;\n\t\treturn this;\n\t}\n\n\tmagFilter(mValue) {\n\t\tif(mValue !== gl.LINEAR && mValue !== gl.NEAREST && mValue !== gl.LINEAR_MIPMAP_NEAREST) { return this; }\n\t\tthis.magFilter = mValue;\n\t\treturn this;\n\t}\n\n\n\t//\tWRAP\n\n\twrapS(mValue) {\n\t\tif(mValue !== gl.CLAMP_TO_EDGE && mValue !== gl.REPEAT && mValue !== gl.MIRRORED_REPEAT) { return this; }\n\t\tthis.wrapS = mValue;\n\t\treturn this;\n\t}\n\n\twrapT(mValue) {\n\t\tif(mValue !== gl.CLAMP_TO_EDGE && mValue !== gl.REPEAT && mValue !== gl.MIRRORED_REPEAT) { return this; }\n\t\tthis.wrapT = mValue;\n\t\treturn this;\n\t}\n\n\n}\n\n\nexport default FrameBuffer;","// GLCubeTexture.js\n\n'use strict';\n\nimport GL from './GLTool';\n\nlet gl;\n\n\nclass GLCubeTexture {\n\tconstructor(mSource, mParameters={}, isCubeTexture=false) {\n\t\t// console.log(typeof(mSource));\n\t\tgl = GL.gl;\n\n\t\tif(isCubeTexture) {\n\t\t\tthis.texture = mSource;\n\t\t\treturn;\n\t\t}\n\n\t\tthis.texture   = gl.createTexture();\n\t\tthis.magFilter = mParameters.magFilter || gl.LINEAR;\n\t\tthis.minFilter = mParameters.minFilter || gl.LINEAR_MIPMAP_NEAREST;\n\t\tthis.wrapS     = mParameters.wrapS || gl.CLAMP_TO_EDGE;\n\t\tthis.wrapT     = mParameters.wrapT || gl.CLAMP_TO_EDGE;\n\n\t\tgl.bindTexture(gl.TEXTURE_CUBE_MAP, this.texture);\n\t\tconst targets = [\n\t\t\tgl.TEXTURE_CUBE_MAP_POSITIVE_X, gl.TEXTURE_CUBE_MAP_NEGATIVE_X, \n\t\t\tgl.TEXTURE_CUBE_MAP_POSITIVE_Y, gl.TEXTURE_CUBE_MAP_NEGATIVE_Y, \n\t\t\tgl.TEXTURE_CUBE_MAP_POSITIVE_Z, gl.TEXTURE_CUBE_MAP_NEGATIVE_Z \n\t\t];\n\n\t\tfor (let j = 0; j < 6; j++) {\n\t\t\tgl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, false);\n\t\t\t// gl.texImage2D(targets[j], 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, mSource[j]);\t\n\t\t\tif(mSource[j].exposure) {\n\t\t\t\tgl.texImage2D(targets[j], 0, gl.RGBA, mSource[j].shape[0], mSource[j].shape[1], 0, gl.RGBA, gl.FLOAT, mSource[j].data);\n\t\t\t} else {\n\t\t\t\tgl.texImage2D(targets[j], 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, mSource[j]);\n\t\t\t}\n\t\t\tgl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_WRAP_S, this.wrapS);\n\t\t\tgl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_WRAP_T, this.wrapT);\n\t\t\tgl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_MAG_FILTER, this.magFilter);\n\t\t\tgl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_MIN_FILTER, this.minFilter);\n\t\t}\n\n\t\tgl.generateMipmap(gl.TEXTURE_CUBE_MAP);\n\t\tgl.bindTexture(gl.TEXTURE_CUBE_MAP, null);\n\t}\n\n\t\n\n\t//\tPUBLIC METHOD\n\n\tbind (index=0) {\n\t\tif(!GL.shader) {return;}\n\n\t\tgl.activeTexture(gl.TEXTURE0 + index);\n\t\tgl.bindTexture(gl.TEXTURE_CUBE_MAP, this.texture);\n\t\tgl.uniform1i(GL.shader.uniformTextures[index], index);\n\t\tthis._bindIndex = index;\n\t}\n\n\tunbind() {\n\t\tgl.bindTexture(gl.TEXTURE_CUBE_MAP, null);\t\n\t}\n}\n\n\nexport default GLCubeTexture;","// GLShader.js\n\n'use strict';\n\nimport GL from './GLTool';\nvar glslify = require('glslify');\n\nlet addLineNumbers = function ( string ) {\n\tlet lines = string.split( '\\n' );\n\tfor ( let i = 0; i < lines.length; i ++ ) {\n\t\tlines[ i ] = ( i + 1 ) + ': ' + lines[ i ];\n\t}\n\treturn lines.join( '\\n' );\n};\n\nlet gl;\nlet defaultVertexShader = glslify('./shaders/basic.vert');\nlet defaultFragmentShader = glslify('./shaders/basic.frag');\n\nconst uniform_mapping = {\n\t'float':'uniform1f',\n\t'vec2':'uniform2fv',\n\t'vec3':'uniform3fv',\n\t'vec4':'uniform4fv',\n\t'int':'uniform1i',\n\t'mat3':'uniformMatrix3fv',\n\t'mat4':'uniformMatrix4fv'\n};\n\nclass GLShader {\n\tconstructor(strVertexShader=defaultVertexShader, strFragmentShader=defaultFragmentShader) {\n\n\t\tgl                   = GL.gl;\n\t\tthis.parameters      = [];\n\t\tthis.uniformValues   = {};\n\t\tthis.uniformTextures = [];\n\n\t\tif(!strVertexShader) { strVertexShader = defaultVertexShader; }\n\t\tif(!strFragmentShader) { strFragmentShader = defaultVertexShader; }\n\n\t\tlet vsShader = this._createShaderProgram(strVertexShader, true);\n\t\tlet fsShader = this._createShaderProgram(strFragmentShader, false);\n\t\tthis._attachShaderProgram(vsShader, fsShader);\n\n\t}\n\n\n\tbind() {\n\n\t\tgl.useProgram(this.shaderProgram);\n\t\tGL.useShader(this);\n\t\tthis.uniformTextures = [];\n\n\t}\n\n\n\tuniform(mName, mType, mValue) {\n\t\tlet uniformType = uniform_mapping[mType] || mType;\n\t\tlet hasUniform = false;\n\t\tlet oUniform;\n\n\t\tfor(let i=0; i<this.parameters.length; i++) {\n\t\t\toUniform = this.parameters[i];\n\t\t\tif(oUniform.name === mName) {\n\t\t\t\toUniform.value = mValue;\n\t\t\t\thasUniform = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tif(!hasUniform) {\n\t\t\tthis.shaderProgram[mName] = gl.getUniformLocation(this.shaderProgram, mName);\n\t\t\tthis.parameters.push({name : mName, type: uniformType, value: mValue, uniformLoc: this.shaderProgram[mName]});\n\t\t} else {\n\t\t\tthis.shaderProgram[mName] = oUniform.uniformLoc;\n\t\t}\n\n\n\t\tif(uniformType.indexOf('Matrix') === -1) {\n\t\t\tgl[uniformType](this.shaderProgram[mName], mValue);\n\t\t} else {\n\t\t\tgl[uniformType](this.shaderProgram[mName], false, mValue);\n\t\t\tthis.uniformValues[mName] = mValue;\n\t\t}\n\n\t}\n\n\n\t_createShaderProgram(mShaderStr, isVertexShader) {\n\t\t\n\t\tlet shaderType = isVertexShader ? GL.VERTEX_SHADER : GL.FRAGMENT_SHADER;\n\t\tlet shader = gl.createShader(shaderType);\n\n\t\tgl.shaderSource(shader, mShaderStr);\n\t\tgl.compileShader(shader);\n\n\t\tif(!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\n\t\t\tconsole.warn('Error in Shader : ', gl.getShaderInfoLog(shader));\n\t\t\tconsole.log(addLineNumbers(mShaderStr));\n\t\t\treturn null;\n\t\t}\n\n\t\treturn shader;\n\t}\n\n\t_attachShaderProgram(mVertexShader, mFragmentShader) {\n\n\t\tthis.shaderProgram = gl.createProgram();\n\t\tgl.attachShader(this.shaderProgram, mVertexShader);\n\t\tgl.attachShader(this.shaderProgram, mFragmentShader);\n\t\tgl.linkProgram(this.shaderProgram);\n\n\t}\n\n}\n\n\nexport default GLShader;","// GLTexture.js\n\n'use strict';\n\nimport GL from './GLTool';\n\nconst isPowerOfTwo = function(x) {\t\n\treturn (x !== 0) && (!(x & (x - 1)));\n};\n\nconst isSourcePowerOfTwo = function(obj) {\t\n\tlet w = obj.width || obj.videoWidth;\n\tlet h = obj.height || obj.videoHeight;\n\n\tif(!w || !h) {return false;}\n\n\treturn isPowerOfTwo(w) && isPowerOfTwo(h);\n};\n\nlet gl;\n\nclass GLTexture {\n\n\tconstructor(mSource, isTexture=false, mParameters={}) {\n\t\tgl = GL.gl;\n\n\t\tif(isTexture) {\n\t\t\tthis.texture = mSource;\n\t\t} else {\n\t\t\tthis._mSource  = mSource;\n\t\t\tthis.texture   = gl.createTexture();\n\t\t\tthis._isVideo  = (mSource.tagName === 'VIDEO');\n\t\t\tthis.magFilter = mParameters.magFilter || gl.LINEAR;\n\t\t\tthis.minFilter = mParameters.minFilter || gl.LINEAR_MIPMAP_NEAREST;\n\t\t\t\n\t\t\tthis.wrapS     = mParameters.wrapS || gl.MIRRORED_REPEAT;\n\t\t\tthis.wrapT     = mParameters.wrapT || gl.MIRRORED_REPEAT;\n\t\t\tlet width      = mSource.width || mSource.videoWidth;\n\n\t\t\tif(width) {\n\t\t\t\tif(!isSourcePowerOfTwo(mSource)) {\n\t\t\t\t\tthis.wrapS = this.wrapT = gl.CLAMP_TO_EDGE;\n\t\t\t\t\tif(this.minFilter === gl.LINEAR_MIPMAP_NEAREST) {\n\t\t\t\t\t\tthis.minFilter = gl.LINEAR;\n\t\t\t\t\t}\n\t\t\t\t} \t\n\t\t\t} else {\n\t\t\t\tthis.wrapS = this.wrapT = gl.CLAMP_TO_EDGE;\n\t\t\t\tif(this.minFilter === gl.LINEAR_MIPMAP_NEAREST) {\n\t\t\t\t\tthis.minFilter = gl.LINEAR;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tgl.bindTexture(gl.TEXTURE_2D, this.texture);\n\t\t\tgl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, true);\n\n\t\t\tif(mSource.exposure) {\n\t\t\t\tgl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, mSource.shape[0], mSource.shape[1], 0, gl.RGBA, gl.FLOAT, mSource.data);\n\t\t\t} else {\n\t\t\t\tgl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, mSource);\t\n\t\t\t}\n\t\t\t\n\t\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, this.magFilter);\n\t\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, this.minFilter);\n\t\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, this.wrapS);\n\t\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, this.wrapT);\n\n\t\t\tconst ext = GL.getExtension('EXT_texture_filter_anisotropic');\n\t\t\tif(ext) {\n\t\t\t\tconst max = gl.getParameter(ext.MAX_TEXTURE_MAX_ANISOTROPY_EXT);\n\t\t\t\tgl.texParameterf(gl.TEXTURE_2D, ext.TEXTURE_MAX_ANISOTROPY_EXT, max);\n\t\t\t}\n\t\t\t\n\t\t\tif(this.minFilter === gl.LINEAR_MIPMAP_NEAREST)\t{\n\t\t\t\tgl.generateMipmap(gl.TEXTURE_2D);\n\t\t\t}\n\n\t\t\tgl.bindTexture(gl.TEXTURE_2D, null);\n\t\t}\n\t}\n\n\n\t//\tMIPMAP FILTER\n\n\tminFilter(mValue) {\n\t\tif(mValue !== gl.LINEAR && mValue !== gl.NEAREST && mValue !== gl.LINEAR_MIPMAP_NEAREST) { return this; }\n\t\tthis.minFilter = mValue;\n\t\treturn this;\n\t}\n\n\tmagFilter(mValue) {\n\t\tif(mValue !== gl.LINEAR && mValue !== gl.NEAREST && mValue !== gl.LINEAR_MIPMAP_NEAREST) { return this; }\n\t\tthis.magFilter = mValue;\n\t\treturn this;\n\t}\n\n\n\t//\tWRAP\n\n\twrapS(mValue) {\n\t\tif(mValue !== gl.CLAMP_TO_EDGE && mValue !== gl.REPEAT && mValue !== gl.MIRRORED_REPEAT) { return this; }\n\t\tthis.wrapS = mValue;\n\t\treturn this;\n\t}\n\n\twrapT(mValue) {\n\t\tif(mValue !== gl.CLAMP_TO_EDGE && mValue !== gl.REPEAT && mValue !== gl.MIRRORED_REPEAT) { return this; }\n\t\tthis.wrapT = mValue;\n\t\treturn this;\n\t}\n\n\n\t//\tUPDATE TEXTURE\n\n\tupdateTexture(mSource) {\n\t\tif(mSource){ this._mSource = mSource; }\n\t\tgl.bindTexture(gl.TEXTURE_2D, this.texture);\n\t\tgl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, true);\n\t\tgl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, this._mSource);\n\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, this.magFilter);\n\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, this.minFilter);\n\t\tif(this.minFilter === gl.LINEAR_MIPMAP_NEAREST)\t{\n\t\t\tgl.generateMipmap(gl.TEXTURE_2D);\n\t\t}\n\n\t\tgl.bindTexture(gl.TEXTURE_2D, null);\n\t}\n\n\n\tbind(index) {\n\t\tif(index === undefined) {index = 0;}\n\t\tif(!GL.shader) {return;}\n\n\t\tgl.activeTexture(gl.TEXTURE0 + index);\n\t\tgl.bindTexture(gl.TEXTURE_2D, this.texture);\n\t\tgl.uniform1i(GL.shader.uniformTextures[index], index);\n\t\tthis._bindIndex = index;\n\t}\n\n}\n\nexport default GLTexture;","// GLTool.js\n\nimport glm from 'gl-matrix';\n\nclass GLTool {\n\n\tconstructor() {\n\t\tthis.canvas;\n\t\tthis._viewport               = [0, 0, 0, 0];\n\t\tthis._enabledVertexAttribute = [];\n\t\tthis.identityMatrix          = glm.mat4.create();\n\t\tthis._normalMatrix           = glm.mat3.create();\n\t\tthis._inverseModelViewMatrix = glm.mat3.create();\n\t\tthis._modelMatrix            = glm.mat4.create();\n\t\tthis._matrix                 = glm.mat4.create();\n\t\tglm.mat4.identity(this.identityMatrix, this.identityMatrix);\n\n\t\tthis.isMobile = false;\n\t\tif( /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent) ) {\n\t\t\tthis.isMobile = true;\n\t\t}\n\t}\n\n\t//\tINITIALIZE\n\n\tinit(mCanvas, mParameters = {}) {\n\n\t\tif(mCanvas === null || mCanvas === undefined) {\n\t\t\tconsole.error('Canvas not exist');\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tif(this.canvas !== undefined && this.canvas !== null) {\n\t\t\tthis.destroy();\n\t\t}\n\t\t\n\t\tthis.canvas = mCanvas;\n\t\tthis.setSize(window.innerWidth, window.innerHeight);\n\t\tthis.gl          = this.canvas.getContext('webgl', mParameters) || this.canvas.getContext('experimental-webgl', mParameters);\n\t\t\n\n\t\t//\textensions\n\t\tconst extensions = ['EXT_shader_texture_lod', 'EXT_sRGB', 'EXT_frag_depth', 'OES_texture_float', 'OES_texture_half_float', 'OES_texture_float_linear', 'OES_texture_half_float_linear', 'OES_standard_derivatives', 'WEBGL_depth_texture', 'EXT_texture_filter_anisotropic', 'ANGLE_instanced_arrays'];\n\t\tthis.extensions = {};\n\t\tfor(let i=0; i<extensions.length; i++) {\n\t\t\tthis.extensions[extensions[i]] = this.gl.getExtension(extensions[i]);\n\t\t}\n\t\t\n\n\t\t//\tCopy gl Attributes\n\t\tlet gl                     = this.gl;\n\t\tthis.VERTEX_SHADER         = gl.VERTEX_SHADER;\n\t\tthis.FRAGMENT_SHADER       = gl.FRAGMENT_SHADER;\n\t\tthis.COMPILE_STATUS        = gl.COMPILE_STATUS;\n\t\tthis.DEPTH_TEST            = gl.DEPTH_TEST;\n\t\tthis.CULL_FACE             = gl.CULL_FACE;\n\t\tthis.BLEND                 = gl.BLEND;\n\t\tthis.POINTS                = gl.POINTS;\n\t\tthis.LINES                 = gl.LINES;\n\t\tthis.TRIANGLES             = gl.TRIANGLES;\n\t\t\n\t\tthis.LINEAR                = gl.LINEAR;\n\t\tthis.NEAREST               = gl.NEAREST;\n\t\tthis.LINEAR_MIPMAP_NEAREST = gl.LINEAR_MIPMAP_NEAREST;\n\t\tthis.MIRRORED_REPEAT       = gl.MIRRORED_REPEAT;\n\t\tthis.CLAMP_TO_EDGE         = gl.CLAMP_TO_EDGE;\n\t\tthis.SCISSOR_TEST\t\t   = gl.SCISSOR_TEST;\n\t\t\n\n\n\t\tthis.enable(this.DEPTH_TEST);\n\t\tthis.enable(this.CULL_FACE);\n\t\tthis.enable(this.BLEND);\n\t}\n\n\n\t//\tPUBLIC METHODS\n\n\tsetViewport(x, y, w, h) {\n\t\tlet hasChanged = false;\n\t\tif(x!==this._viewport[0]) {hasChanged = true;}\n\t\tif(y!==this._viewport[1]) {hasChanged = true;}\n\t\tif(w!==this._viewport[2]) {hasChanged = true;}\n\t\tif(h!==this._viewport[3]) {hasChanged = true;}\n\n\t\tif(hasChanged) {\n\t\t\tthis.gl.viewport(x, y, w, h);\n\t\t\tthis._viewport = [x, y, w, h];\n\t\t}\n\t}\n\n\tscissor(x, y, w, h) {\n\t\tthis.gl.scissor(x, y, w, h);\n\t}\n\n\n\tclear(r, g, b, a) {\n\t\tthis.gl.clearColor( r, g, b, a );\n\t\tthis.gl.clear(this.gl.COLOR_BUFFER_BIT | this.gl.DEPTH_BUFFER_BIT);\n\t}\n\n\n\tsetMatrices(mCamera) {\n\t\tthis.camera = mCamera;\n\t\tthis.rotate(this.identityMatrix);\n\t}\n\n\n\tuseShader(mShader) {\n\t\tthis.shader = mShader;\n\t\tthis.shaderProgram = this.shader.shaderProgram;\n\t}\n\n\n\trotate(mRotation) {\n\t\tglm.mat4.copy(this._modelMatrix, mRotation);\n\t\tglm.mat4.multiply(this._matrix, this.camera.matrix, this._modelMatrix);\n\t\tglm.mat3.fromMat4(this._normalMatrix, this._matrix);\n\t\tglm.mat3.invert(this._normalMatrix, this._normalMatrix);\n\t\tglm.mat3.transpose(this._normalMatrix, this._normalMatrix);\n\n\t\tglm.mat3.fromMat4(this._inverseModelViewMatrix, this._matrix);\n\t\tglm.mat3.invert(this._inverseModelViewMatrix, this._inverseModelViewMatrix);\n\t}\n\n\n\tdraw(mMesh, drawingType) {\n\n\t\tif(mMesh.length) {\n\t\t\tfor(let i =0; i<mMesh.length; i++) {\n\t\t\t\tthis.draw(mMesh[i]);\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\n\t\tfunction getAttribLoc(gl, shaderProgram, name) {\n\t\t\tif(shaderProgram.cacheAttribLoc === undefined) {\tshaderProgram.cacheAttribLoc = {};\t}\n\t\t\tif(shaderProgram.cacheAttribLoc[name] === undefined) {\n\t\t\t\tshaderProgram.cacheAttribLoc[name] = gl.getAttribLocation(shaderProgram, name);\n\t\t\t}\n\n\t\t\treturn shaderProgram.cacheAttribLoc[name];\n\t\t}\n\n\t\t//\tATTRIBUTES\n\t\tfor(let i=0; i<mMesh.attributes.length; i++) {\n\n\t\t\tlet attribute = mMesh.attributes[i];\n\t\t\tthis.gl.bindBuffer(this.gl.ARRAY_BUFFER, attribute.buffer);\n\t\t\tlet attrPosition = getAttribLoc(this.gl, this.shaderProgram, attribute.name);\n\t\t\tthis.gl.vertexAttribPointer(attrPosition, attribute.itemSize, this.gl.FLOAT, false, 0, 0);\n\t\t\t\n\t\t\tif(this._enabledVertexAttribute.indexOf(attrPosition) === -1) {\n\t\t\t\tthis.gl.enableVertexAttribArray(attrPosition);\n\t\t\t\tthis._enabledVertexAttribute.push(attrPosition);\n\t\t\t}\n\t\t\t\n\t\t}\n\n\n\t\t//\tBIND INDEX BUFFER\n\n\t\tthis.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, mMesh.iBuffer);\n\n\n\t\t//\tDEFAULT MATRICES\n\t\tif(this.camera !== undefined) {\n\t\t\tthis.shader.uniform('uProjectionMatrix', 'mat4', this.camera.projection);\t\n\t\t\tthis.shader.uniform('uViewMatrix', 'mat4', this.camera.matrix);\n\t\t}\n\t\t\n\t\tthis.shader.uniform('uModelMatrix', 'mat4', this._modelMatrix);\n\t\tthis.shader.uniform('uNormalMatrix', 'mat3', this._normalMatrix);\n\t\tthis.shader.uniform('uModelViewMatrixInverse', 'mat3', this._inverseModelViewMatrix);\n\n\t\tlet drawType = mMesh.drawType;\n\t\tif(drawingType !== undefined) {\n\t\t\tdrawType = drawingType;\n\t\t}\n\t\t\n\t\t//\tDRAWING\n\t\tif(drawType === this.gl.POINTS ) {\n\t\t\tthis.gl.drawArrays(drawType, 0, mMesh.vertexSize);\t\n\t\t} else {\n\t\t\tthis.gl.drawElements(drawType, mMesh.iBuffer.numItems, this.gl.UNSIGNED_SHORT, 0);\t\n\t\t}\n\n\t}\n\n\n\tsetSize(mWidth, mHeight) {\n\t\tthis._width        = mWidth;\n\t\tthis._height       = mHeight;\n\t\tthis.canvas.width  = this._width;\n\t\tthis.canvas.height = this._height;\n\t\tthis._aspectRatio  = this._width / this._height;\n\n\t\tif(this.gl) {\n\t\t\tthis.viewport(0, 0, this._width, this._height);\t\n\t\t}\n\t\t\n\t}\n\n\n\tshowExtensions() {\n\t\tconsole.log('Extensions : ' , this.extensions);\n\t\tfor(let ext in this.extensions) {\n\t\t\tif(this.extensions[ext]) {\n\t\t\t\tconsole.log(ext, ':', this.extensions[ext]);\t\n\t\t\t}\n\t\t}\t\n\t}\n\n\tcheckExtension(mExtension) {\n\t\treturn !!this.extensions[mExtension];\n\t}\n\n\n\tgetExtension(mExtension) {\n\t\treturn this.extensions[mExtension];\n\t}\n\n\t//\tBLEND MODES\n\n\tenableAlphaBlending() {\n\t\tthis.gl.blendFunc(this.gl.SRC_ALPHA, this.gl.ONE_MINUS_SRC_ALPHA);\t\n\t}\n\n\tenableAdditiveBlending() {\n\t\tthis.gl.blendFunc(this.gl.ONE, this.gl.ONE);\n\t}\n\n\n\t//\tGL NATIVE FUNCTIONS\n\n\tenable(mParameter) {\tthis.gl.enable(mParameter);\t\t}\n\n\tdisable(mParameter) {\tthis.gl.disable(mParameter);\t}\n\n\tviewport(x, y, w, h) {\tthis.setViewport(x, y, w, h);\t}\n\n\n\t//\tGETTER AND SETTERS\n\n\tget width() {\treturn this._width;\t\t}\n\n\tget height() {\treturn this._height;\t}\n\n\tget aspectRatio() {\treturn this._aspectRatio;\t}\n\n\t//\tDESTROY\n\n\tdestroy() {\n\t\t\n\t\tif(this.canvas.parentNode) {\n\t\t\ttry {\n\t\t\t\tthis.canvas.parentNode.removeChild(this.canvas);\n\t\t\t} catch (e) {\n\t\t\t\tconsole.log('Error : ', e);\n\t\t\t}\n\t\t}\n\n\t\tthis.canvas = null;\n\t}\n}\n\nlet GL = new GLTool();\n\nexport default GL;\n","// Geom.js\n\n'use strict';\n\nimport Mesh from './Mesh';\n\nlet Geom = {};\n\nGeom.plane = function(width, height, numSegments, withNormals=false, axis='xy', drawType=4) {\n\tlet positions = [];\n\tlet coords    = [];\n\tlet indices   = [];\n\tlet normals   = [];\n\n\tlet gapX  = width/numSegments;\n\tlet gapY  = height/numSegments;\n\tlet gapUV = 1/numSegments;\n\tlet index = 0;\n\tlet sx    = -width * 0.5;\n\tlet sy    = -height * 0.5;\n\n\tfor(let i=0; i<numSegments; i++) {\n\t\tfor (let j=0; j<numSegments; j++) {\n\t\t\tlet tx = gapX * i + sx;\n\t\t\tlet ty = gapY * j + sy;\n\n\t\t\tlet u = i/numSegments;\n\t\t\tlet v = j/numSegments;\n\n\t\t\tif(axis === 'xz') {\n\t\t\t\tpositions.push([tx, \t\t0, \t ty+gapY\t]);\n\t\t\t\tpositions.push([tx+gapX, \t0, \t ty+gapY\t]);\n\t\t\t\tpositions.push([tx+gapX, \t0, \t ty\t]);\n\t\t\t\tpositions.push([tx, \t\t0, \t ty\t]);\t\n\n\t\t\t\tcoords.push([u, 1.0-(v+gapUV)]);\n\t\t\t\tcoords.push([u+gapUV, 1.0-(v+gapUV)]);\n\t\t\t\tcoords.push([u+gapUV, 1.0-v]);\n\t\t\t\tcoords.push([u, 1.0-v]);\n\n\t\t\t\tnormals.push([0, 1, 0]);\n\t\t\t\tnormals.push([0, 1, 0]);\n\t\t\t\tnormals.push([0, 1, 0]);\n\t\t\t\tnormals.push([0, 1, 0]);\n\t\t\t} else if(axis === 'yz') {\n\t\t\t\tpositions.push([0, ty, tx]);\n\t\t\t\tpositions.push([0, ty, tx+gapX]);\n\t\t\t\tpositions.push([0, ty+gapY, tx+gapX]);\n\t\t\t\tpositions.push([0, ty+gapY, tx]);\t\n\n\t\t\t\tcoords.push([u, v]);\n\t\t\t\tcoords.push([u+gapUV, v]);\n\t\t\t\tcoords.push([u+gapUV, v+gapUV]);\n\t\t\t\tcoords.push([u, v+gapUV]);\n\n\t\t\t\tnormals.push([1, 0, 0]);\n\t\t\t\tnormals.push([1, 0, 0]);\n\t\t\t\tnormals.push([1, 0, 0]);\n\t\t\t\tnormals.push([1, 0, 0]);\n\t\t\t} else {\n\t\t\t\tpositions.push([tx, \t\tty, \t0]);\n\t\t\t\tpositions.push([tx+gapX, \tty, \t0]);\n\t\t\t\tpositions.push([tx+gapX, \tty+gapY, \t0]);\n\t\t\t\tpositions.push([tx, \t\tty+gapY, \t0]);\t\n\n\t\t\t\tcoords.push([u, v]);\n\t\t\t\tcoords.push([u+gapUV, v]);\n\t\t\t\tcoords.push([u+gapUV, v+gapUV]);\n\t\t\t\tcoords.push([u, v+gapUV]);\n\n\t\t\t\tnormals.push([0, 0, 1]);\n\t\t\t\tnormals.push([0, 0, 1]);\n\t\t\t\tnormals.push([0, 0, 1]);\n\t\t\t\tnormals.push([0, 0, 1]);\n\t\t\t} \n\n\n\t\t\tindices.push(index*4 + 0);\n\t\t\tindices.push(index*4 + 1);\n\t\t\tindices.push(index*4 + 2);\n\t\t\tindices.push(index*4 + 0);\n\t\t\tindices.push(index*4 + 2);\n\t\t\tindices.push(index*4 + 3);\n\n\t\t\tindex++;\n\t\t}\n\t}\n\n\tlet mesh = new Mesh(drawType);\n\tmesh.bufferVertex(positions);\n\tmesh.bufferTexCoords(coords);\n\tmesh.bufferIndices(indices);\n\tif(withNormals) {\n\t\tmesh.bufferNormal(normals);\n\t}\n\n\treturn mesh;\n};\n\nGeom.sphere = function(size, numSegments, withNormals=false, isInvert=false, drawType=4) {\n\tlet positions = [];\n\tlet coords    = [];\n\tlet indices   = [];\n\tlet normals   = [];\n\tlet index     = 0;\n\tlet gapUV     = 1/numSegments;\n\n\tlet getPosition = function(i, j, isNormal=false) {\t//\trx : -90 ~ 90 , ry : 0 ~ 360\n\t\tlet rx        = i/numSegments * Math.PI - Math.PI * 0.5;\n\t\tlet ry        = j/numSegments * Math.PI * 2;\n\t\tlet r         = isNormal ? 1 : size;\n\t\tlet pos       = [];\n\t\tpos[1]        = Math.sin(rx) * r;\n\t\tlet t         = Math.cos(rx) * r;\n\t\tpos[0]        = Math.cos(ry) * t;\n\t\tpos[2]        = Math.sin(ry) * t;\n\t\t\n\t\tlet precision = 10000;\n\t\tpos[0]        = Math.floor(pos[0] * precision) / precision;\n\t\tpos[1]        = Math.floor(pos[1] * precision) / precision;\n\t\tpos[2]        = Math.floor(pos[2] * precision) / precision;\n\n\t\treturn pos;\n\t};\n\n\t\n\tfor(let i=0; i<numSegments; i++) {\n\t\tfor(let j=0; j<numSegments; j++) {\n\t\t\tpositions.push(getPosition(i, j));\n\t\t\tpositions.push(getPosition(i+1, j));\n\t\t\tpositions.push(getPosition(i+1, j+1));\n\t\t\tpositions.push(getPosition(i, j+1));\n\n\t\t\tif(withNormals) {\n\t\t\t\tnormals.push(getPosition(i, j, true));\n\t\t\t\tnormals.push(getPosition(i+1, j, true));\n\t\t\t\tnormals.push(getPosition(i+1, j+1, true));\n\t\t\t\tnormals.push(getPosition(i, j+1, true));\t\n\t\t\t}\n\t\t\t\n\n\t\t\tlet u = j/numSegments;\n\t\t\tlet v = i/numSegments;\n\t\t\t\n\t\t\t\n\t\t\tcoords.push([1.0 - u, v]);\n\t\t\tcoords.push([1.0 - u, v+gapUV]);\n\t\t\tcoords.push([1.0 - u - gapUV, v+gapUV]);\n\t\t\tcoords.push([1.0 - u - gapUV, v]);\n\n\t\t\tindices.push(index*4 + 0);\n\t\t\tindices.push(index*4 + 1);\n\t\t\tindices.push(index*4 + 2);\n\t\t\tindices.push(index*4 + 0);\n\t\t\tindices.push(index*4 + 2);\n\t\t\tindices.push(index*4 + 3);\n\n\t\t\tindex++;\n\t\t}\n\t}\n\n\n\tif(isInvert) {\n\t\tindices.reverse();\n\t}\n\n\tlet mesh = new Mesh(drawType);\n\tmesh.bufferVertex(positions);\n\tmesh.bufferTexCoords(coords);\n\tmesh.bufferIndices(indices);\n\tif(withNormals) {\n\t\tmesh.bufferNormal(normals);\n\t}\n\n\treturn mesh;\n};\n\nGeom.cube = function(w,h,d, withNormals=false, drawType=4) {\n\th = h || w;\n\td = d || w;\n\n\tlet x = w/2;\n\tlet y = h/2;\n\tlet z = d/2;\n\n\tlet positions = [];\n\tlet coords    = [];\n\tlet indices   = []; \n\tlet normals   = []; \n\tlet count     = 0;\n\n\n\t// BACK\n\tpositions.push([-x,  y, -z]);\n\tpositions.push([ x,  y, -z]);\n\tpositions.push([ x, -y, -z]);\n\tpositions.push([-x, -y, -z]);\n\n\tnormals.push([0, 0, -1]);\n\tnormals.push([0, 0, -1]);\n\tnormals.push([0, 0, -1]);\n\tnormals.push([0, 0, -1]);\n\n\tcoords.push([0, 0]);\n\tcoords.push([1, 0]);\n\tcoords.push([1, 1]);\n\tcoords.push([0, 1]);\n\n\tindices.push(count*4 + 0);\n\tindices.push(count*4 + 1);\n\tindices.push(count*4 + 2);\n\tindices.push(count*4 + 0);\n\tindices.push(count*4 + 2);\n\tindices.push(count*4 + 3);\n\n\tcount ++;\n\n\t// RIGHT\n\tpositions.push([ x,  y, -z]);\n\tpositions.push([ x,  y,  z]);\n\tpositions.push([ x, -y,  z]);\n\tpositions.push([ x, -y, -z]);\n\n\tnormals.push([1, 0, 0]);\n\tnormals.push([1, 0, 0]);\n\tnormals.push([1, 0, 0]);\n\tnormals.push([1, 0, 0]);\n\n\tcoords.push([0, 0]);\n\tcoords.push([1, 0]);\n\tcoords.push([1, 1]);\n\tcoords.push([0, 1]);\n\n\tindices.push(count*4 + 0);\n\tindices.push(count*4 + 1);\n\tindices.push(count*4 + 2);\n\tindices.push(count*4 + 0);\n\tindices.push(count*4 + 2);\n\tindices.push(count*4 + 3);\n\n\tcount ++;\n\n\t// FRONT\n\tpositions.push([ x,  y,  z]);\n\tpositions.push([-x,  y,  z]);\n\tpositions.push([-x, -y,  z]);\n\tpositions.push([ x, -y,  z]);\n\n\tnormals.push([0, 0, 1]);\n\tnormals.push([0, 0, 1]);\n\tnormals.push([0, 0, 1]);\n\tnormals.push([0, 0, 1]);\n\n\tcoords.push([0, 0]);\n\tcoords.push([1, 0]);\n\tcoords.push([1, 1]);\n\tcoords.push([0, 1]);\n\n\tindices.push(count*4 + 0);\n\tindices.push(count*4 + 1);\n\tindices.push(count*4 + 2);\n\tindices.push(count*4 + 0);\n\tindices.push(count*4 + 2);\n\tindices.push(count*4 + 3);\n\n\tcount ++;\n\n\n\t// LEFT\n\tpositions.push([-x,  y,  z]);\n\tpositions.push([-x,  y, -z]);\n\tpositions.push([-x, -y, -z]);\n\tpositions.push([-x, -y,  z]);\n\n\tnormals.push([-1, 0, 0]);\n\tnormals.push([-1, 0, 0]);\n\tnormals.push([-1, 0, 0]);\n\tnormals.push([-1, 0, 0]);\n\n\tcoords.push([0, 0]);\n\tcoords.push([1, 0]);\n\tcoords.push([1, 1]);\n\tcoords.push([0, 1]);\n\n\tindices.push(count*4 + 0);\n\tindices.push(count*4 + 1);\n\tindices.push(count*4 + 2);\n\tindices.push(count*4 + 0);\n\tindices.push(count*4 + 2);\n\tindices.push(count*4 + 3);\n\n\tcount ++;\n\n\t// TOP\n\tpositions.push([-x,  y,  z]);\n\tpositions.push([ x,  y,  z]);\n\tpositions.push([ x,  y, -z]);\n\tpositions.push([-x,  y, -z]);\n\n\tnormals.push([0, 1, 0]);\n\tnormals.push([0, 1, 0]);\n\tnormals.push([0, 1, 0]);\n\tnormals.push([0, 1, 0]);\n\n\tcoords.push([0, 0]);\n\tcoords.push([1, 0]);\n\tcoords.push([1, 1]);\n\tcoords.push([0, 1]);\n\n\tindices.push(count*4 + 0);\n\tindices.push(count*4 + 1);\n\tindices.push(count*4 + 2);\n\tindices.push(count*4 + 0);\n\tindices.push(count*4 + 2);\n\tindices.push(count*4 + 3);\n\n\tcount ++;\n\n\t// BOTTOM\n\tpositions.push([-x, -y, -z]);\n\tpositions.push([ x, -y, -z]);\n\tpositions.push([ x, -y,  z]);\n\tpositions.push([-x, -y,  z]);\n\n\tnormals.push([0, -1, 0]);\n\tnormals.push([0, -1, 0]);\n\tnormals.push([0, -1, 0]);\n\tnormals.push([0, -1, 0]);\n\n\tcoords.push([0, 0]);\n\tcoords.push([1, 0]);\n\tcoords.push([1, 1]);\n\tcoords.push([0, 1]);\n\n\tindices.push(count*4 + 0);\n\tindices.push(count*4 + 1);\n\tindices.push(count*4 + 2);\n\tindices.push(count*4 + 0);\n\tindices.push(count*4 + 2);\n\tindices.push(count*4 + 3);\n\n\tcount ++;\n\n\n\tlet mesh = new Mesh(drawType);\n\tmesh.bufferVertex(positions);\n\tmesh.bufferTexCoords(coords);\n\tmesh.bufferIndices(indices);\n\tif(withNormals) {\n\t\tmesh.bufferNormal(normals);\n\t}\n\n\treturn mesh;\n};\n\nGeom.skybox = function(size, withNormals=false, drawType=4) {\n\tlet positions = [];\n\tlet coords    = [];\n\tlet indices   = []; \n\tlet normals   = []; \n\tlet count     = 0;\n\n\t// BACK\n\tpositions.push([ size,  size, -size]);\n\tpositions.push([-size,  size, -size]);\n\tpositions.push([-size, -size, -size]);\n\tpositions.push([ size, -size, -size]);\n\n\tnormals.push([0, 0, -1]);\n\tnormals.push([0, 0, -1]);\n\tnormals.push([0, 0, -1]);\n\tnormals.push([0, 0, -1]);\n\n\tcoords.push([0, 0]);\n\tcoords.push([1, 0]);\n\tcoords.push([1, 1]);\n\tcoords.push([0, 1]);\n\n\tindices.push(count*4 + 0);\n\tindices.push(count*4 + 1);\n\tindices.push(count*4 + 2);\n\tindices.push(count*4 + 0);\n\tindices.push(count*4 + 2);\n\tindices.push(count*4 + 3);\n\n\tcount ++;\n\n\t// RIGHT\n\tpositions.push([ size, -size, -size]);\n\tpositions.push([ size, -size,  size]);\n\tpositions.push([ size,  size,  size]);\n\tpositions.push([ size,  size, -size]);\n\n\tnormals.push([1, 0, 0]);\n\tnormals.push([1, 0, 0]);\n\tnormals.push([1, 0, 0]);\n\tnormals.push([1, 0, 0]);\n\n\tcoords.push([0, 0]);\n\tcoords.push([1, 0]);\n\tcoords.push([1, 1]);\n\tcoords.push([0, 1]);\n\n\tindices.push(count*4 + 0);\n\tindices.push(count*4 + 1);\n\tindices.push(count*4 + 2);\n\tindices.push(count*4 + 0);\n\tindices.push(count*4 + 2);\n\tindices.push(count*4 + 3);\n\n\tcount ++;\n\n\t// FRONT\n\tpositions.push([-size,  size,  size]);\n\tpositions.push([ size,  size,  size]);\n\tpositions.push([ size, -size,  size]);\n\tpositions.push([-size, -size,  size]);\n\n\tnormals.push([0, 0, 1]);\n\tnormals.push([0, 0, 1]);\n\tnormals.push([0, 0, 1]);\n\tnormals.push([0, 0, 1]);\n\n\tcoords.push([0, 0]);\n\tcoords.push([1, 0]);\n\tcoords.push([1, 1]);\n\tcoords.push([0, 1]);\n\n\tindices.push(count*4 + 0);\n\tindices.push(count*4 + 1);\n\tindices.push(count*4 + 2);\n\tindices.push(count*4 + 0);\n\tindices.push(count*4 + 2);\n\tindices.push(count*4 + 3);\n\n\tcount ++;\n\n\t// LEFT\n\tpositions.push([-size, -size,  size]);\n\tpositions.push([-size, -size, -size]);\n\tpositions.push([-size,  size, -size]);\n\tpositions.push([-size,  size,  size]);\n\n\tnormals.push([-1, 0, 0]);\n\tnormals.push([-1, 0, 0]);\n\tnormals.push([-1, 0, 0]);\n\tnormals.push([-1, 0, 0]);\n\n\tcoords.push([0, 0]);\n\tcoords.push([1, 0]);\n\tcoords.push([1, 1]);\n\tcoords.push([0, 1]);\n\n\tindices.push(count*4 + 0);\n\tindices.push(count*4 + 1);\n\tindices.push(count*4 + 2);\n\tindices.push(count*4 + 0);\n\tindices.push(count*4 + 2);\n\tindices.push(count*4 + 3);\n\n\tcount ++;\n\n\t// TOP\n\tpositions.push([ size,  size,  size]);\n\tpositions.push([-size,  size,  size]);\n\tpositions.push([-size,  size, -size]);\n\tpositions.push([ size,  size, -size]);\n\n\tnormals.push([0, 1, 0]);\n\tnormals.push([0, 1, 0]);\n\tnormals.push([0, 1, 0]);\n\tnormals.push([0, 1, 0]);\n\n\tcoords.push([0, 0]);\n\tcoords.push([1, 0]);\n\tcoords.push([1, 1]);\n\tcoords.push([0, 1]);\n\n\tindices.push(count*4 + 0);\n\tindices.push(count*4 + 1);\n\tindices.push(count*4 + 2);\n\tindices.push(count*4 + 0);\n\tindices.push(count*4 + 2);\n\tindices.push(count*4 + 3);\n\n\tcount ++;\n\n\t// BOTTOM\n\tpositions.push([ size, -size, -size]);\n\tpositions.push([-size, -size, -size]);\n\tpositions.push([-size, -size,  size]);\n\tpositions.push([ size, -size,  size]);\n\n\tnormals.push([0, -1, 0]);\n\tnormals.push([0, -1, 0]);\n\tnormals.push([0, -1, 0]);\n\tnormals.push([0, -1, 0]);\n\n\tcoords.push([0, 0]);\n\tcoords.push([1, 0]);\n\tcoords.push([1, 1]);\n\tcoords.push([0, 1]);\n\n\tindices.push(count*4 + 0);\n\tindices.push(count*4 + 1);\n\tindices.push(count*4 + 2);\n\tindices.push(count*4 + 0);\n\tindices.push(count*4 + 2);\n\tindices.push(count*4 + 3);\n\n\tlet mesh = new Mesh(drawType);\n\tmesh.bufferVertex(positions);\n\tmesh.bufferTexCoords(coords);\n\tmesh.bufferIndices(indices);\n\tif(withNormals) {\n\t\tmesh.bufferNormal(normals);\n\t}\n\n\treturn mesh;\n};\n\nGeom.bigTriangle = function() {\n\tlet indices = [2, 1, 0];\n\tlet positions = [\n\t\t[-1, -1], \n\t\t[-1, 4], \n\t\t[4, -1]\n\t];\n\t\n\tlet mesh = new Mesh();\n\tmesh.bufferData(positions, 'aPosition', 2);\n\tmesh.bufferIndices(indices);\n\n\treturn mesh;\n};\n\nexport default Geom;","// Mesh.js\n\n'use strict';\n\nimport GL from './GLTool';\nimport glm from 'gl-matrix';\n\nlet gl;\n\nconst vec3 = glm.vec3;\n\nclass Mesh {\n\tconstructor(mDrawType = GL.gl.TRIANGLES) {\n\t\tgl                = GL.gl;\n\t\tthis.drawType     = mDrawType;\n\t\tthis._attributes  = [];\n\t\tthis._vertexSize  = 0;\n\t\t\n\t\tthis._vertices    = [];\n\t\tthis._texCoords   = [];\n\t\tthis._normals     = [];\n\t\tthis._faceNormals = [];\n\t\tthis._tangents    = [];\n\t\tthis._indices     = [];\n\t\tthis._faces       = [];\n\t}\n\n\n\tbufferVertex(mArrayVertices, isDynamic=false) {\n\n\t\tthis._vertexSize = mArrayVertices.length;\n\t\tthis.bufferData(mArrayVertices, 'aVertexPosition', 3, isDynamic);\n\t\tthis._vertices = mArrayVertices;\n\n\t}\n\n\n\tbufferTexCoords(mArrayTexCoords, isDynamic=false) {\n\n\t\tthis.bufferData(mArrayTexCoords, 'aTextureCoord', 2, isDynamic);\n\t\tthis._texCoords = mArrayTexCoords;\n\n\t}\n\n\n\tbufferNormal(mNormals, isDynamic=false) {\n\n\t\tthis.bufferData(mNormals, 'aNormal', 3, isDynamic);\n\t\tthis._normals = mNormals;\n\n\t}\n\n\n\tbufferIndices(mArrayIndices, isDynamic=false) {\n\n\t\tlet drawType          = isDynamic ? gl.DYNAMIC_DRAW : gl.STATIC_DRAW;\n\t\tthis._indices         = mArrayIndices;\n\t\tthis.iBuffer          = gl.createBuffer();\n\t\tgl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.iBuffer);\n\t\tgl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(mArrayIndices), drawType);\n\t\tthis.iBuffer.itemSize = 1;\n\t\tthis.iBuffer.numItems = mArrayIndices.length;\n\t\tthis._indices         = mArrayIndices;\n\n\t}\n\n\n\tbufferData(mData, mName, mItemSize, isDynamic=false) {\n\t\tlet index = -1, i=0;\n\t\tlet drawType   = isDynamic ? gl.DYNAMIC_DRAW : gl.STATIC_DRAW;\n\t\tlet bufferData = [];\n\t\tlet buffer, dataArray;\n\n\t\t//\tCheck for existing attributes\n\t\tfor(i=0; i<this._attributes.length; i++) {\n\t\t\tif(this._attributes[i].name === mName) {\n\t\t\t\tthis._attributes[i].data = mData;\n\t\t\t\tindex = i;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\t//\tflatten buffer data\t\t\n\t\tfor(i=0; i<mData.length; i++) {\n\t\t\tfor(let j=0; j<mData[i].length; j++) {\n\t\t\t\tbufferData.push(mData[i][j]);\n\t\t\t}\n\t\t}\n\n\t\t\n\t\tif(index === -1) {\t\n\n\t\t\t//\tattribute not exist yet, create new buffer\n\t\t\tbuffer = gl.createBuffer();\n\t\t\tgl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n\n\t\t\tdataArray = new Float32Array(bufferData);\n\t\t\tgl.bufferData(gl.ARRAY_BUFFER, dataArray, drawType);\n\t\t\tthis._attributes.push({name:mName, data:mData, itemSize: mItemSize, buffer:buffer, dataArray:dataArray});\n\n\t\t} else {\n\n\t\t\t//\tattribute existed, replace with new data\n\t\t\tbuffer = this._attributes[index].buffer;\n\t\t\tgl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n\t\t\tdataArray = this._attributes[index].dataArray;\n\t\t\tfor(i=0; i<bufferData.length; i++) {\n\t\t\t\tdataArray[i] = bufferData[i];\n\t\t\t}\n\t\t\tgl.bufferData(gl.ARRAY_BUFFER, dataArray, drawType);\n\n\t\t}\n\n\t}\n\n\n\tcomputeNormals(usingFaceNormals=false) {\n\n\t\tthis._generateFaces();\n\n\t\tif(usingFaceNormals) {\n\t\t\tthis._computeFaceNormals();\n\t\t} else {\n\t\t\tthis._computeVertexNormals();\n\t\t}\n\t}\n\n\n\tcomputeTangents() {\n\n\t}\n\n\t//\tPRIVATE METHODS\n\n\t_computeFaceNormals() {\n\n\t\tlet faceIndex;\n\t\tlet face;\n\t\tlet normals = [];\n\n\t\tfor(let i=0; i<this._indices.length; i+=3) {\n\t\t\tfaceIndex = i/3;\n\t\t\tface = this._faces[faceIndex];\n\t\t\tlet N = face.normal;\n\n\t\t\tnormals[ face.indices[0] ] = N;\n\t\t\tnormals[ face.indices[1] ] = N;\n\t\t\tnormals[ face.indices[2] ] = N;\n\t\t}\n\n\t\tthis.bufferNormal(normals);\n\t}\n\n\n\t_computeVertexNormals() {\n\t\t//\tloop through all vertices\n\t\tlet sumNormal = vec3.create();\n\t\tlet face;\n\t\tlet normals = [];\n\n\t\tfor(let i=0; i<this._vertices.length; i++) {\n\n\t\t\tvec3.set(sumNormal, 0, 0, 0);\n\n\t\t\tfor( let j=0; j<this._faces.length; j++) {\n\t\t\t\tface = this._faces[j];\n\n\t\t\t\t//\tif vertex exist in the face, add the normal to sum normal\n\t\t\t\tif(face.indices.indexOf(i) >= 0) {\n\n\t\t\t\t\tsumNormal[0] += face.normal[0];\n\t\t\t\t\tsumNormal[1] += face.normal[1];\n\t\t\t\t\tsumNormal[2] += face.normal[2];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvec3.normalize(sumNormal, sumNormal);\n\t\t\tnormals.push( [sumNormal[0], sumNormal[1], sumNormal[2]] );\n\t\t}\n\n\t\tthis.bufferNormal(normals);\n\n\t}\n\n\n\t_generateFaces() {\n\t\t\n\t\tlet ia, ib, ic;\n\t\tlet a, b, c, vba = vec3.create(), vca = vec3.create(), vNormal = vec3.create();\n\n\t\tfor(let i=0; i<this._indices.length; i+=3) {\n\n\t\t\tia = this._indices[i];\n\t\t\tib = this._indices[i+1];\n\t\t\tic = this._indices[i+2];\n\n\t\t\ta = vec3.clone(this._vertices[ia]);\n\t\t\tb = vec3.clone(this._vertices[ib]);\n\t\t\tc = vec3.clone(this._vertices[ic]);\n\n\t\t\tvec3.sub(vba, b, a);\n\t\t\tvec3.sub(vca, c, a);\n\n\t\t\tvec3.cross(vNormal, vba, vca);\n\t\t\tvec3.normalize(vNormal, vNormal);\n\t\t\tlet N = [vNormal[0], vNormal[1], vNormal[2]];\n\n\t\t\tlet face = {\n\t\t\t\tindices:[ia, ib, ic],\n\t\t\t\tnormal:N \n\t\t\t};\n\n\t\t\tthis._faces.push(face);\n\t\t}\n\n\t}\n\n\n\t//\tGETTER AND SETTERS\n\n\tget vertices() {\n\t\treturn this._vertices;\n\t}\n\n\tget normals() {\n\t\treturn this._normals;\n\t}\n\n\tget attributes() {\n\t\treturn this._attributes;\n\t}\n\n\tget vertexSize() {\n\t\treturn this._vertexSize;\n\t}\n\n\tget hasNormals() {\n\t\tif(this._normals.length === 0) {\treturn false; }\n\t\treturn true;\n\t}\n\n\tget hasTangents() {\n\t\tif(this._tangents.length === 0) {\treturn false; }\n\t\treturn true;\t\n\t}\n\n\n}\n\n\nexport default Mesh;","// Camera.js\n\nimport glm from 'gl-matrix';\n\nclass Camera {\n\tconstructor() {\n\t\t//\tVIEW MATRIX\n\t\tthis._matrix = glm.mat4.create();\n\n\t\t//\tPROJECTION MATRIX\n\t\tthis._projection = glm.mat4.create();\n\n\t\t//\tPOSITION OF CAMERA\n\t\tthis.position = glm.vec3.create();\n\t}\n\n\n\tlookAt(aEye, aCenter, aUp) {\n\t\tglm.vec3.copy(this.position, aEye);\n\t\tglm.mat4.identity(this._matrix);\n\t\tglm.mat4.lookAt(this._matrix, aEye, aCenter, aUp);\n\t}\n\n\n\t//\tGETTERS \n\n\tget matrix() {\n\t\treturn this._matrix;\n\t}\n\n\tget viewMatrix() {\n\t\treturn this._matrix;\n\t}\n\n\n\tget projection() {\n\t\treturn this._projection;\n\t} \n\n\tget projectionMatrix() {\n\t\treturn this._projection;\n\t} \n}\n\n\nexport default Camera;","// CameraCube.js\n\n'use strict';\n\nimport CameraPerspective from './CameraPerspective';\nimport glm from 'gl-matrix';\n\nconst vec3 = glm.vec3;\n\nconst CAMERA_SETTINGS = [\n\t[vec3.fromValues(0, 0, 0), vec3.fromValues( 1, 0, 0), vec3.fromValues(0, -1, 0)],\t\t\n\t[vec3.fromValues(0, 0, 0), vec3.fromValues(-1, 0, 0), vec3.fromValues(0, -1, 0)],\n\t[vec3.fromValues(0, 0, 0), vec3.fromValues(0,  1, 0), vec3.fromValues(0, 0,  1)],\n\t[vec3.fromValues(0, 0, 0), vec3.fromValues(0, -1, 0), vec3.fromValues(0, 0, -1)],\n\t[vec3.fromValues(0, 0, 0), vec3.fromValues(0, 0,  1), vec3.fromValues(0, -1, 0)],\n\t[vec3.fromValues(0, 0, 0), vec3.fromValues(0, 0, -1), vec3.fromValues(0, -1, 0)]\n];\n\nclass CameraCube extends CameraPerspective {\n\n\tconstructor() {\n\t\tsuper();\n\n\t\tthis.setPerspective(Math.PI/2, 1, 0.1, 1000);\n\t}\n\n\n\tface(mIndex) {\n\t\tlet o = CAMERA_SETTINGS[mIndex];\n\t\tthis.lookAt(o[0], o[1], o[2]);\n\t}\n}\n\n\nexport default CameraCube;","// CameraOrtho.js\n\nimport Camera from './Camera';\nimport glm from 'gl-matrix';\n\nclass CameraOrtho extends Camera {\n\tconstructor() {\n\t\tsuper();\n\n\t\tvar eye    = glm.vec3.clone([0, 0, 5] );\n\t\tvar center = glm.vec3.create( );\n\t\tvar up     = glm.vec3.clone( [0,-1,0] );\n\t\tthis.lookAt(eye, center, up);\n\t\tthis.ortho( 1, -1, 1, -1);\n\t}\n\n\n\tsetBoundary(left, right, top, bottom) {\n\n\t\tthis.ortho(left, right, top, bottom);\n\t\t\n\t}\n\n\n\tortho(left, right, top, bottom) {\n\t\tthis.left   = left;\n\t\tthis.right  = right;\n\t\tthis.top    = top;\n\t\tthis.bottom = bottom;\n\t\tglm.mat4.ortho(this._projection, left, right, top, bottom, 0, 10000);\n\t}\n\t\n}\n\n\nexport default CameraOrtho;","// CameraPerspective.js\n\nimport Camera from './Camera';\nimport glm from 'gl-matrix';\n\nclass CameraPerspective extends Camera {\n\n\tconstructor() {\n\t\tsuper();\n\t}\n\n\n\tsetPerspective(mFov, mAspectRatio, mNear, mFar) {\n\t\t\n\t\tthis._fov         = mFov;\n\t\tthis._near        = mNear;\n\t\tthis._far         = mFar;\n\t\tthis._aspectRatio = mAspectRatio;\n\t\tglm.mat4.perspective(this._projection, mFov, mAspectRatio, mNear, mFar);\n\t}\n\n\n\tsetAspectRatio(mAspectRatio) {\n\t\tthis._aspectRatio = mAspectRatio;\n\t\tglm.mat4.perspective(this.projection, this._fov, mAspectRatio, this._near, this._far);\n\t}\n}\n\n\nexport default CameraPerspective;","// BatchAxis.js\n\nimport GL from '../GLTool';\nimport Mesh from '../Mesh';\nimport GLShader from '../GLShader';\nimport Batch from '../Batch';\n\nlet glslify = require('glslify');\n\n\nclass BatchAxis extends Batch {\n\n\tconstructor() {\n\t\tlet positions = [];\n\t\tlet colors = [];\n\t\tlet indices = [0, 1, 2, 3, 4, 5];\n\t\tlet r = 9999;\n\n\t\tpositions.push([-r,  0,  0]);\n\t\tpositions.push([ r,  0,  0]);\n\t\tpositions.push([ 0, -r,  0]);\n\t\tpositions.push([ 0,  r,  0]);\n\t\tpositions.push([ 0,  0, -r]);\n\t\tpositions.push([ 0,  0,  r]);\n\n\n\t\tcolors.push([1, 0, 0]);\n\t\tcolors.push([1, 0, 0]);\n\t\tcolors.push([0, 1, 0]);\n\t\tcolors.push([0, 1, 0]);\n\t\tcolors.push([0, 0, 1]);\n\t\tcolors.push([0, 0, 1]);\n\n\t\tlet mesh = new Mesh(GL.LINES);\n\t\tmesh.bufferVertex(positions);\n\t\tmesh.bufferIndices(indices);\n\t\tmesh.bufferData(colors, 'aColor', 3);\n\n\t\tlet shader = new GLShader(glslify('../shaders/axis.vert'), glslify('../shaders/axis.frag'));\n\n\t\tsuper(mesh, shader);\n\n\t}\n\n\n}\n\n\nexport default BatchAxis;","// BatchBall.js\n\nimport Geom from '../Geom';\nimport GLShader from '../GLShader';\nimport Batch from '../Batch';\n\nvar glslify = require('glslify');\n\nclass BatchBall extends Batch {\n\n\tconstructor() {\n\t\tlet mesh = Geom.sphere(1, 24);\n\t\tlet shader = new GLShader(glslify('../shaders/general.vert'), glslify('../shaders/simpleColor.frag'));\n\t\tsuper(mesh, shader);\n\t}\n\n\n\tdraw(position=[0,0,0], scale=[1,1,1], color=[1,1,1], opacity=1) {\n\t\tthis.shader.bind();\n\t\tthis.shader.uniform('position', 'uniform3fv', position);\n\t\tthis.shader.uniform('scale', 'uniform3fv', scale);\n\t\tthis.shader.uniform('color', 'uniform3fv', color);\n\t\tthis.shader.uniform('opacity', 'uniform1f', opacity);\n\t\tsuper.draw();\n\t}\n\n}\n\nexport default BatchBall;","// BatchCopy.js\n\nimport Geom from '../Geom';\nimport GLShader from '../GLShader';\nimport Batch from '../Batch';\n\nvar glslify = require('glslify');\n\nclass BatchCopy extends Batch {\n\n\tconstructor() {\n\t\tlet mesh = Geom.bigTriangle();\n\t\tlet shader = new GLShader(glslify('../shaders/bigTriangle.vert'), glslify('../shaders/copy.frag'));\n\t\tsuper(mesh, shader);\n\n\t\tshader.bind();\n\t\tshader.uniform('texture', 'uniform1i', 0);\n\t}\n\n\n\tdraw(texture) {\n\t\tthis.shader.bind();\n\t\ttexture.bind(0);\n\t\tsuper.draw();\n\t}\n\n}\n\nexport default BatchCopy;","// BatchDotsPlane.js\n\nimport GL from '../GLTool';\nimport Mesh from '../Mesh';\nimport GLShader from '../GLShader';\nimport Batch from '../Batch';\n\nlet glslify = require('glslify');\n\nclass BatchDotsPlane extends Batch {\n\n\tconstructor() {\n\t\tlet positions = [];\n\t\tlet indices   = [];\n\t\tlet index     = 0;\n\t\t\n\t\tlet numDots   = 100;\n\t\tlet size      = 50;\n\t\tlet gap       = size / numDots;\n\t\tlet i, j;\n\n\n\t\tfor(i=-size/2; i<size; i+=gap) {\n\t\t\tfor(j=-size/2; j<size; j+=gap) {\n\t\t\t\tpositions.push([i, j, 0]);\n\t\t\t\tindices.push(index);\n\t\t\t\tindex++;\n\n\t\t\t\tpositions.push([i, 0, j]);\n\t\t\t\tindices.push(index);\n\t\t\t\tindex++;\n\t\t\t}\n\t\t}\n\t\t\n\t\tlet mesh     = new Mesh(GL.POINTS);\n\t\tmesh.bufferVertex(positions);\n\t\tmesh.bufferIndices(indices);\n\t\t\n\t\tlet shader   = new GLShader(glslify('../shaders/dotsPlane.vert'), glslify('../shaders/simpleColor.frag'));\n\t\t\n\t\tsuper(mesh, shader);\n\t\t\n\t\tthis.color   = [1, 1, 1];\n\t\tthis.opacity = 0.5;\n\t}\n\n\n\tdraw() {\n\t\tthis.shader.bind();\n\t\tthis.shader.uniform('color', 'uniform3fv', this.color);\n\t\tthis.shader.uniform('opacity', 'uniform1f', this.opacity);\n\t\t// GL.draw(this.mesh);\n\t\tsuper.draw();\n\t}\n}\n\nexport default BatchDotsPlane;","// BatchSkybox.js\n\nimport Geom from '../Geom';\nimport GLShader from '../GLShader';\nimport Batch from '../Batch';\n\nlet glslify = require('glslify');\n\n\nclass BatchSkybox extends Batch {\n\n\tconstructor(size=20) {\n\t\tlet mesh = Geom.skybox(size);\n\t\tlet shader = new GLShader(glslify('../shaders/skybox.vert'), glslify('../shaders/skybox.frag'));\n\n\t\tsuper(mesh, shader);\n\t}\n\n\tdraw(texture) {\n\t\tthis.shader.bind();\n\t\ttexture.bind(0);\n\t\tsuper.draw();\n\t}\n\n\n}\n\n\nexport default BatchSkybox;","// Scene.js\n\nimport Scheduler from 'scheduling';\nimport GL from '../GLTool';\nimport CameraPerspective from '../cameras/CameraPerspective';\nimport cameraOrtho from '../cameras/CameraOrtho';\nimport OrbitalControl from '../tools/OrbitalControl';\n\n\nclass Scene {\n\n\n\tconstructor() {\n\t\tthis._init();\n\t\tthis._initTextures();\n\t\tthis._initViews();\n\n\t\tthis._efIndex = Scheduler.addEF( ()=>this._loop());\n\t\twindow.addEventListener('resize', ()=>this.resize());\n\t}\n\n\n\t\n\t//\tPUBLIC METHODS\n\n\trender() {\n\n\t}\n\n\n\tstop() {\n\t\tif(this._efIndex === -1) {\treturn; }\n\t\tthis._efIndex = Scheduler.removeEF(this._efIndex);\n\t}\n\n\n\tstart() {\n\t\tif(this._efIndex !== -1) {\n\t\t\treturn;\n\t\t} \n\n\t\tthis._efIndex = Scheduler.addEF( ()=>this._loop());\n\t}\n\n\n\tresize() {\n\t\tGL.setSize(window.innerWidth, window.innerHeight);\n\t\tthis.camera.setAspectRatio(GL.aspectRatio);\n\t}\n\n\n\t//\tPROTECTED METHODS TO BE OVERRIDEN BY CHILDREN\n\n\t_initTextures() {\n\n\t}\n\n\n\t_initViews() {\n\n\t}\n\n\n\t//\tPRIVATE METHODS\n\n\t_init() {\n\t\tthis.camera                 = new CameraPerspective();\n\t\tthis.camera.setPerspective(45*Math.PI/180, GL.aspectRatio, 0.1, 100);\n\t\tthis.orbitalControl          = new OrbitalControl(this.camera, window, 15);\n\t\tthis.orbitalControl.radius.value = 10;\n\t\t\n\t\tthis.cameraOrtho            = new cameraOrtho();\n\t}\n\n\t_loop() {\n\n\t\t//\tRESET VIEWPORT\n\t\tGL.viewport(0, 0, GL.width, GL.height);\n\n\t\t//\tRESET CAMERA\n\t\tGL.setMatrices(this.camera);\n\n\n\t\tthis.render();\n\t}\n}\n\n\nexport default Scene;","// View.js\n\nimport GLShader from '../GLShader';\n\nclass View {\n\tconstructor(mStrVertex, mStrFrag) {\n\t\tthis.shader = new GLShader(mStrVertex, mStrFrag);\n\n\t\tthis._init();\n\t}\n\n\n\t//\tPROTECTED METHODS\n\n\t_init() {\n\n\t}\n\n\t// \tPUBLIC METHODS\n\n\trender() {\n\n\t}\n}\n\nexport default View;","// BinaryLoader.js\n\nclass BinaryLoader {\n\n\tconstructor(isArrayBuffer=false) {\n\t\tthis._req = new XMLHttpRequest();\n\t\tthis._req.addEventListener('load', (e)=>this._onLoaded(e) );\n\t\tthis._req.addEventListener('progress', (e)=>this._onProgress(e) );\n\t\tif(isArrayBuffer) {\n\t\t\tthis._req.responseType = 'arraybuffer';\n\t\t}\n\t}\t\n\n\n\tload(url, callback) {\n\t\tconsole.log('Loading : ', url);\n\t\tthis._callback = callback;\n\n\t\tthis._req.open('GET', url);\n\t\tthis._req.send();\n\t}\n\n\n\t_onLoaded() {\n\t\tthis._callback(this._req.response);\n\t}\n\n\t_onProgress(/*e*/) {\n\t\t// console.log('on Progress:', (e.loaded/e.total*100).toFixed(2));\n\t}\n}\n\nexport default BinaryLoader;","// HDRLoader.js\n\n'use strict';\n\nimport BinaryLoader from './BinaryLoader';\nimport HDRParser from '../tools/HDRParser';\n\nclass HDRLoader extends BinaryLoader {\n\tconstructor() {\n\t\tsuper(true);\n\t}\n\n\tparse(mArrayBuffer) {\n\t\treturn HDRParser(mArrayBuffer);\n\t}\n\n\t_onLoaded() {\n\t\tlet o = this.parse(this._req.response);\n\t\tif(this._callback) {\n\t\t\tthis._callback(o);\n\t\t}\n\t}\n\n}\n\n\nHDRLoader.parse = function(mArrayBuffer) {\n\treturn HDRParser(mArrayBuffer);\n};\n\nexport default HDRLoader;","// ObjLoader.js\n\n'use strict';\n\nimport BinaryLoader from './BinaryLoader';\nimport Mesh from '../Mesh';\n\nclass ObjLoader extends BinaryLoader {\n\tconstructor() {\n\t\tsuper();\n\t}\n\n\tload(url, callback, ignoreNormals=true, drawType=4) {\n\t\tthis._ignoreNormals = ignoreNormals;\n\t\tthis._drawType = drawType;\n\t\tsuper.load(url, callback);\n\t}\n\n\t_onLoaded() {\n\t\tthis._parseObj(this._req.response);\n\t}\n\n\t_parseObj(objStr) {\n\t\tlet lines = objStr.split('\\n');\n\n\t\tlet positions    = [];\n\t\tlet coords       = [];\n\t\tlet finalNormals = [];\n\t\tlet vertices     = [];\n\t\tlet normals      = [];\n\t\tlet uvs          = [];\n\t\tlet indices      = [];\n\t\tlet count        = 0;\n\t\tlet result;\n\n\t\t// v float float float\n\t\tlet vertex_pattern = /v( +[\\d|\\.|\\+|\\-|e|E]+)( +[\\d|\\.|\\+|\\-|e|E]+)( +[\\d|\\.|\\+|\\-|e|E]+)/;\n\n\t\t// vn float float float\n\t\tlet normal_pattern = /vn( +[\\d|\\.|\\+|\\-|e|E]+)( +[\\d|\\.|\\+|\\-|e|E]+)( +[\\d|\\.|\\+|\\-|e|E]+)/;\n\n\t\t// vt float float\n\t\tlet uv_pattern = /vt( +[\\d|\\.|\\+|\\-|e|E]+)( +[\\d|\\.|\\+|\\-|e|E]+)/;\n\n\t\t// f vertex vertex vertex ...\n\t\tlet face_pattern1 = /f( +-?\\d+)( +-?\\d+)( +-?\\d+)( +-?\\d+)?/;\n\n\t\t// f vertex/uv vertex/uv vertex/uv ...\n\t\tlet face_pattern2 = /f( +(-?\\d+)\\/(-?\\d+))( +(-?\\d+)\\/(-?\\d+))( +(-?\\d+)\\/(-?\\d+))( +(-?\\d+)\\/(-?\\d+))?/;\n\n\t\t// f vertex/uv/normal vertex/uv/normal vertex/uv/normal ...\n\t\tlet face_pattern3 = /f( +(-?\\d+)\\/(-?\\d+)\\/(-?\\d+))( +(-?\\d+)\\/(-?\\d+)\\/(-?\\d+))( +(-?\\d+)\\/(-?\\d+)\\/(-?\\d+))( +(-?\\d+)\\/(-?\\d+)\\/(-?\\d+))?/;\n\n\t\t// f vertex//normal vertex//normal vertex//normal ... \n\t\tlet face_pattern4 = /f( +(-?\\d+)\\/\\/(-?\\d+))( +(-?\\d+)\\/\\/(-?\\d+))( +(-?\\d+)\\/\\/(-?\\d+))( +(-?\\d+)\\/\\/(-?\\d+))?/;\n\n\n\t\tfunction parseVertexIndex( value ) {\n\t\t\tlet index = parseInt( value );\n\t\t\treturn ( index >= 0 ? index - 1 : index + vertices.length / 3 ) * 3;\n\t\t}\n\n\t\tfunction parseNormalIndex( value ) {\n\t\t\tlet index = parseInt( value );\n\t\t\treturn ( index >= 0 ? index - 1 : index + normals.length / 3 ) * 3;\n\t\t}\n\n\t\tfunction parseUVIndex( value ) {\n\t\t\tlet index = parseInt( value );\n\t\t\treturn ( index >= 0 ? index - 1 : index + uvs.length / 2 ) * 2;\n\t\t}\n\n\n\t\tfunction addVertex(a, b ,c) {\n\t\t\tpositions.push([vertices[a], vertices[a+1], vertices[a+2]]);\n\t\t\tpositions.push([vertices[b], vertices[b+1], vertices[b+2]]);\n\t\t\tpositions.push([vertices[c], vertices[c+1], vertices[c+2]]);\n\n\t\t\tindices.push(count * 3 + 0);\n\t\t\tindices.push(count * 3 + 1);\n\t\t\tindices.push(count * 3 + 2);\n\n\t\t\tcount ++;\n\t\t}\n\n\n\t\tfunction addUV(a, b, c) {\n\t\t\tcoords.push([uvs[a], uvs[a+1]]);\n\t\t\tcoords.push([uvs[b], uvs[b+1]]);\n\t\t\tcoords.push([uvs[c], uvs[c+1]]);\n\t\t}\n\n\n\t\tfunction addNormal(a, b, c) {\n\t\t\tfinalNormals.push([normals[a], normals[a+1], normals[a+2]]);\n\t\t\tfinalNormals.push([normals[b], normals[b+1], normals[b+2]]);\n\t\t\tfinalNormals.push([normals[c], normals[c+1], normals[c+2]]);\n\t\t}\n\n\t\tfunction addFace( a, b, c, d,  ua, ub, uc, ud,  na, nb, nc, nd ) {\n\t\t\tlet ia = parseVertexIndex( a );\n\t\t\tlet ib = parseVertexIndex( b );\n\t\t\tlet ic = parseVertexIndex( c );\n\t\t\tlet id;\n\n\t\t\tif ( d === undefined ) {\n\n\t\t\t\taddVertex( ia, ib, ic );\n\n\t\t\t} else {\n\n\t\t\t\tid = parseVertexIndex( d );\n\n\t\t\t\taddVertex( ia, ib, id );\n\t\t\t\taddVertex( ib, ic, id );\n\n\t\t\t}\n\n\n\t\t\tif ( ua !== undefined ) {\n\n\t\t\t\tia = parseUVIndex( ua );\n\t\t\t\tib = parseUVIndex( ub );\n\t\t\t\tic = parseUVIndex( uc );\n\n\t\t\t\tif ( d === undefined ) {\n\n\t\t\t\t\taddUV( ia, ib, ic );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tid = parseUVIndex( ud );\n\n\t\t\t\t\taddUV( ia, ib, id );\n\t\t\t\t\taddUV( ib, ic, id );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( na !== undefined ) {\n\n\t\t\t\tia = parseNormalIndex( na );\n\t\t\t\tib = parseNormalIndex( nb );\n\t\t\t\tic = parseNormalIndex( nc );\n\n\t\t\t\tif ( d === undefined ) {\n\n\t\t\t\t\taddNormal( ia, ib, ic );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tid = parseNormalIndex( nd );\n\n\t\t\t\t\taddNormal( ia, ib, id );\n\t\t\t\t\taddNormal( ib, ic, id );\n\n\t\t\t\t}\n\n\t\t\t}\n\t\t}\n\n\n\t\tfor ( let i = 0; i < lines.length; i ++ ) {\n\t\t\tlet line = lines[ i ];\n\t\t\tline = line.trim();\n\n\t\t\tif ( line.length === 0 || line.charAt( 0 ) === '#' ) {\n\n\t\t\t\tcontinue;\n\n\t\t\t} else if ( ( result = vertex_pattern.exec( line ) ) !== null ) {\n\n\t\t\t\tvertices.push(\n\t\t\t\t\tparseFloat( result[ 1 ] ),\n\t\t\t\t\tparseFloat( result[ 2 ] ),\n\t\t\t\t\tparseFloat( result[ 3 ] )\n\t\t\t\t);\n\n\t\t\t} else if ( ( result = normal_pattern.exec( line ) ) !== null ) {\n\n\t\t\t\tnormals.push(\n\t\t\t\t\tparseFloat( result[ 1 ] ),\n\t\t\t\t\tparseFloat( result[ 2 ] ),\n\t\t\t\t\tparseFloat( result[ 3 ] )\n\t\t\t\t);\n\n\t\t\t} else if ( ( result = uv_pattern.exec( line ) ) !== null ) {\n\n\t\t\t\tuvs.push(\n\t\t\t\t\tparseFloat( result[ 1 ] ),\n\t\t\t\t\tparseFloat( result[ 2 ] )\n\t\t\t\t);\n\n\t\t\t} else if ( ( result = face_pattern1.exec( line ) ) !== null ) {\n\n\t\t\t\taddFace(\n\t\t\t\t\tresult[ 1 ], result[ 2 ], result[ 3 ], result[ 4 ]\n\t\t\t\t);\n\n\t\t\t} else if ( ( result = face_pattern2.exec( line ) ) !== null ) {\n\n\t\t\t\taddFace(\n\t\t\t\t\tresult[ 2 ], result[ 5 ], result[ 8 ], result[ 11 ],\n\t\t\t\t\tresult[ 3 ], result[ 6 ], result[ 9 ], result[ 12 ]\n\t\t\t\t);\n\n\t\t\t} else if ( ( result = face_pattern3.exec( line ) ) !== null ) {\n\t\t\t\taddFace(\n\t\t\t\t\tresult[ 2 ], result[ 6 ], result[ 10 ], result[ 14 ],\n\t\t\t\t\tresult[ 3 ], result[ 7 ], result[ 11 ], result[ 15 ],\n\t\t\t\t\tresult[ 4 ], result[ 8 ], result[ 12 ], result[ 16 ]\n\t\t\t\t);\n\n\t\t\t} else if ( ( result = face_pattern4.exec( line ) ) !== null ) {\n\t\t\t\taddFace(\n\t\t\t\t\tresult[ 2 ], result[ 5 ], result[ 8 ], result[ 11 ],\n\t\t\t\t\tundefined, undefined, undefined, undefined,\n\t\t\t\t\tresult[ 3 ], result[ 6 ], result[ 9 ], result[ 12 ]\n\t\t\t\t);\n\n\t\t\t} \n\t\t}\n\n\t\tthis._generateMeshes({\t\n\t\t\tpositions:positions,\n\t\t\tcoords:coords,\n\t\t\tnormals:finalNormals,\n\t\t\tindices:indices\n\t\t});\n\t\t\n\t}\n\n\t_generateMeshes(o) {\n\t\tconst maxNumVertices = 65535;\n\t\tlet hasNormals = o.normals.length > 0;\n\t\tlet hasUVs = o.coords.length > 0;\n\n\t\tif(o.positions.length > maxNumVertices) {\n\t\t\tlet meshes = [];\n\t\t\tlet lastIndex = 0;\n\n\t\t\tlet oCopy       = {};\n\t\t\toCopy.positions = o.positions.concat();\n\t\t\toCopy.coords    = o.coords.concat();\n\t\t\toCopy.indices   = o.indices.concat();\n\t\t\toCopy.normals   = o.normals.concat();\n\n\t\t\twhile(o.indices.length > 0) {\n\n\t\t\t\tlet sliceNum  = Math.min(maxNumVertices, o.positions.length);\n\t\t\t\tlet indices   = o.indices.splice(0, sliceNum);\n\t\t\t\tlet positions = [];\n\t\t\t\tlet coords    = [];\n\t\t\t\tlet normals   = [];\n\t\t\t\tlet index, tmpIndex = 0;\n\n\t\t\t\tfor(let i=0; i<indices.length; i++ ) {\n\t\t\t\t\tif(indices[i] > tmpIndex) {\n\t\t\t\t\t\ttmpIndex = indices[i];\n\t\t\t\t\t}\n\n\t\t\t\t\tindex = indices[i];\n\n\t\t\t\t\tpositions.push(oCopy.positions[index]);\n\t\t\t\t\tif(hasUVs) {\n\t\t\t\t\t\tcoords.push(oCopy.coords[index]);\t\n\t\t\t\t\t}\n\t\t\t\t\tif(hasNormals) {\n\t\t\t\t\t\tnormals.push(oCopy.normals[index]);\t\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tindices[i] -= lastIndex;\n\t\t\t\t}\n\n\t\t\t\tlastIndex = tmpIndex+1;\n\n\t\t\t\tlet mesh = new Mesh(this._drawType);\n\t\t\t\tmesh.bufferVertex(positions);\n\t\t\t\tif(hasUVs) {\n\t\t\t\t\tmesh.bufferTexCoords(coords);\t\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tmesh.bufferIndices(indices);\n\t\t\t\tif(!this._ignoreNormals && hasNormals) {\n\t\t\t\t\tmesh.bufferNormal(normals);\n\t\t\t\t}\n\n\t\t\t\tmeshes.push(mesh);\n\t\t\t}\n\n\t\t\tif(this._callback) {\n\t\t\t\tthis._callback(meshes, oCopy);\n\t\t\t}\n\t\t} else {\n\t\t\tlet mesh = new Mesh(this._drawType);\n\t\t\tmesh.bufferVertex(o.positions);\n\t\t\tif(hasUVs) {\n\t\t\t\tmesh.bufferTexCoords(o.coords);\t\n\t\t\t}\n\t\t\tmesh.bufferIndices(o.indices);\n\t\t\tif(!this._ignoreNormals && hasNormals) {\n\t\t\t\tmesh.bufferNormal(o.normals);\n\t\t\t}\n\n\t\t\tif(this._callback) {\n\t\t\t\tthis._callback(mesh, o);\n\t\t\t}\n\t\t}\n\t\t\n\t}\n}\n\nexport default ObjLoader;","// EffectComposer.js\n\n'use strict';\n\nimport GL from '../GLTool';\nimport FrameBuffer from '../FrameBuffer';\nimport Geom from '../Geom';\n\n\nclass EffectComposer {\n\tconstructor(mWidth, mHeight, mParameters={}) {\n\t\tthis._fbo = new FrameBuffer(mWidth, mHeight, mParameters);\n\t\tthis._fboTarget = new FrameBuffer(mWidth, mHeight, mParameters);\n\n\t\tthis._mesh = Geom.bigTriangle();\n\n\t\tthis._passes = [];\n\t}\n\n\taddPass(pass) {\n\t\tthis._passes.push(pass);\n\t}\n\n\n\trender(mSource) {\n\n\t\tfor(let i=0; i<this._passes.length; i++) {\n\n\t\t\tthis._swap();\n\t\t}\n\t}\n\n\n\t_swap() {\n\t\tlet tmp = this._fbo;\n\t\tthis._fbo = this._fboTarget;\n\t\tthis._fboTarget = tmp;\n\t}\n}\n\n\nexport default EffectComposer;","// EaseNumber.js\n\nimport Scheduler from 'scheduling';\n\nclass EaseNumber {\n\tconstructor(mValue, mEasing=0.1) {\n\t\tthis.easing       = mEasing;\n\t\tthis._value       = mValue;\n\t\tthis._targetValue = mValue;\n\t\tScheduler.addEF( ()=> this._update());\t\t\n\t}\n\n\n\t_update() {\n\t\tthis._checkLimit();\n\t\tthis._value += (this._targetValue - this._value) * this.easing;\t\n\t}\n\n\tsetTo(mValue) {\n\t\tthis._targetValue = this._value = mValue;\n\t}\n\n\n\tadd(mAdd) {\n\t\tthis._targetValue += mAdd;\n\t}\n\n\tlimit(mMin, mMax) {\n\t\tif(mMin > mMax) {\n\t\t\tthis.limit(mMax, mMin);\n\t\t\treturn;\n\t\t}\n\n\t\tthis._min = mMin;\n\t\tthis._max = mMax;\n\n\t\tthis._checkLimit();\n\t}\n\n\n\t_checkLimit() {\n\t\tif(this._min !== undefined && this._targetValue < this._min) {\n\t\t\tthis._targetValue = this._min;\n\t\t} \n\n\t\tif(this._max !== undefined && this._targetValue > this._max) {\n\t\t\tthis._targetValue = this._max;\n\t\t} \n\t}\n\n\n\t//\tGETTERS / SETTERS\n\n\tset value(mValue) {\n\t\tthis._targetValue = mValue;\n\t}\n\n\tget value() {\n\t\treturn this._value;\n\t}\n\n\tget targetValue() {\n\t\treturn this._targetValue;\n\t}\n\n}\n\n\nexport default EaseNumber;","// EventDispatcher.js\n\nlet supportsCustomEvents = true;\ntry {\n\tlet newTestCustomEvent = document.createEvent('CustomEvent');\n\tnewTestCustomEvent = null;\n} catch(e){\n\tsupportsCustomEvents = false;\n}\n\nclass EventDispatcher {\n\n\tconstructor() {\n\t\tthis._eventListeners = {};\n\t}\n\n\n\taddEventListener(aEventType, aFunction) {\n\n\t\tif(this._eventListeners === null || this._eventListeners === undefined) {\n\t\t\tthis._eventListeners = {};\n\t\t}\n\n\t\tif(!this._eventListeners[aEventType]){\n\t\t\tthis._eventListeners[aEventType] = [];\n\t\t}\n\t\tthis._eventListeners[aEventType].push(aFunction);\n\t\t\n\t\treturn this;\n\n\t}\n\n\ton(aEventType, aFunction) {\treturn this.addEventListener(aEventType, aFunction);\t}\n\n\tremoveEventListener(aEventType, aFunction) {\n\t\tif(this._eventListeners === null || this._eventListeners === undefined) {\n\t\t\tthis._eventListeners = {};\n\t\t}\n\t\tlet currentArray = this._eventListeners[aEventType];\n\t\t\n\t\tif (typeof(currentArray) === 'undefined') {\n\t\t\treturn this;\n\t\t}\n\t\t\n\t\tlet currentArrayLength = currentArray.length;\n\t\tfor(let i = 0; i < currentArrayLength; i++){\n\t\t\tif(currentArray[i] === aFunction){\n\t\t\t\tcurrentArray.splice(i, 1);\n\t\t\t\ti--;\n\t\t\t\tcurrentArrayLength--;\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\toff(aEventType, aFunction) {\treturn this.removeEventListener(aEventType, aFunction);\t}\n\n\tdispatchEvent(aEvent) {\n\t\tif(this._eventListeners === null || this._eventListeners === undefined) {\n\t\t\tthis._eventListeners = {};\n\t\t}\n\t\tlet eventType = aEvent.type;\n\t\t\n\t\ttry {\n\t\t\tif(aEvent.target === null) {\n\t\t\t\taEvent.target = this;\n\t\t\t}\n\t\t\taEvent.currentTarget = this;\n\t\t}\n\t\tcatch(theError) {\n\t\t\tlet newEvent = {'type' : eventType, 'detail' : aEvent.detail, 'dispatcher' : this };\n\t\t\treturn this.dispatchEvent(newEvent);\n\t\t}\n\t\t\n\t\tlet currentEventListeners = this._eventListeners[eventType];\n\t\tif(currentEventListeners !== null && currentEventListeners !== undefined) {\n\t\t\tlet currentArray = this._copyArray(currentEventListeners);\n\t\t\tlet currentArrayLength = currentArray.length;\n\t\t\tfor(let i = 0; i < currentArrayLength; i++){\n\t\t\t\tlet currentFunction = currentArray[i];\n\t\t\t\tcurrentFunction.call(this, aEvent);\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\tdispatchCustomEvent(aEventType, aDetail) {\n\t\tlet newEvent;\n\t\tif (supportsCustomEvents){\n\t\t\tnewEvent = document.createEvent('CustomEvent');\n\t\t\tnewEvent.dispatcher = this;\n\t\t\tnewEvent.initCustomEvent(aEventType, false, false, aDetail);\n\t\t}\n\t\telse {\n\t\t\tnewEvent = {'type' : aEventType, 'detail' : aDetail, 'dispatcher' : this };\n\t\t}\n\t\treturn this.dispatchEvent(newEvent);\n\t}\n\n\ttrigger(aEventType, aDetail) {\treturn this.dispatchCustomEvent(aEventType, aDetail);\t}\n\n\t_destroy() {\n\t\tif(this._eventListeners !== null) {\n\t\t\tfor(let objectName in this._eventListeners) {\n\t\t\t\tif(this._eventListeners.hasOwnProperty(objectName)) {\n\t\t\t\t\tlet currentArray = this._eventListeners[objectName];\n\t\t\t\t\tlet currentArrayLength = currentArray.length;\n\t\t\t\t\tfor(let i = 0; i < currentArrayLength; i++) {\n\t\t\t\t\t\tcurrentArray[i] = null;\n\t\t\t\t\t}\n\t\t\t\t\tdelete this._eventListeners[objectName];\t\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis._eventListeners = null;\n\t\t}\n\t}\n\n\t_copyArray(aArray) {\n\t\tlet currentArray = new Array(aArray.length);\n\t\tlet currentArrayLength = currentArray.length;\n\t\tfor(let i = 0; i < currentArrayLength; i++) {\n\t\t\tcurrentArray[i] = aArray[i];\n\t\t}\n\t\treturn currentArray;\n\t}\n}\n\n\nexport default EventDispatcher;","// HDRParser.js\n\n'use strict';\n\n//Code ported by Marcin Ignac (2014)\n//Based on Java implementation from\n//https://code.google.com/r/cys12345-research/source/browse/hdr/image_processor/RGBE.java?r=7d84e9fd866b24079dbe61fa0a966ce8365f5726\nlet radiancePattern = '#\\\\?RADIANCE';\nlet commentPattern = '#.*';\n// let gammaPattern = 'GAMMA=';\nlet exposurePattern = 'EXPOSURE=\\\\s*([0-9]*[.][0-9]*)';\nlet formatPattern = 'FORMAT=32-bit_rle_rgbe';\nlet widthHeightPattern = '-Y ([0-9]+) \\\\+X ([0-9]+)';\n\n//http://croquetweak.blogspot.co.uk/2014/08/deconstructing-floats-frexp-and-ldexp.html\n// function ldexp(mantissa, exponent) {\n//     return exponent > 1023 ? mantissa * Math.pow(2, 1023) * Math.pow(2, exponent - 1023) : exponent < -1074 ? mantissa * Math.pow(2, -1074) * Math.pow(2, exponent + 1074) : mantissa * Math.pow(2, exponent);\n// }\n\nfunction readPixelsRawRLE(buffer, data, offset, fileOffset, scanline_width, num_scanlines) {\n\tlet rgbe = new Array(4);\n\tlet scanline_buffer = null;\n\tlet ptr;\n\tlet ptr_end;\n\tlet count;\n\tlet buf = new Array(2);\n\tlet bufferLength = buffer.length;\n\n\tfunction readBuf(buf) {\n\t\tlet bytesRead = 0;\n\t\tdo {\n\t\t\tbuf[bytesRead++] = buffer[fileOffset];\n\t\t} while(++fileOffset < bufferLength && bytesRead < buf.length);\n\t\treturn bytesRead;\n\t}\n\n\tfunction readBufOffset(buf, offset, length) {\n\t\tlet bytesRead = 0;\n\t\tdo {\n\t\t\tbuf[offset + bytesRead++] = buffer[fileOffset];\n\t\t} while(++fileOffset < bufferLength && bytesRead < length);\n\t\treturn bytesRead;\n\t}\n\n\tfunction readPixelsRaw(buffer, data, offset, numpixels) {\n\t\tlet numExpected = 4 * numpixels;\n\t\tlet numRead = readBufOffset(data, offset, numExpected);\n\t\tif (numRead < numExpected) {\n\t\t\t\tthrow new Error('Error reading raw pixels: got ' + numRead + ' bytes, expected ' + numExpected);\n\t\t}\n\t}\n\n\twhile (num_scanlines > 0) {\n\t\tif (readBuf(rgbe) < rgbe.length) {\n\t\t\tthrow new Error('Error reading bytes: expected ' + rgbe.length);\n\t\t}\n\n\t\tif ((rgbe[0] !== 2)||(rgbe[1] !== 2)||((rgbe[2] & 0x80) !== 0)) {\n\t\t\t\t//this file is not run length encoded\n\t\t\t\tdata[offset++] = rgbe[0];\n\t\t\t\tdata[offset++] = rgbe[1];\n\t\t\t\tdata[offset++] = rgbe[2];\n\t\t\t\tdata[offset++] = rgbe[3];\n\t\t\t\treadPixelsRaw(buffer, data, offset, scanline_width*num_scanlines-1);\n\t\t\t\treturn;\n\t\t}\n\n\t\tif ((((rgbe[2] & 0xFF)<<8) | (rgbe[3] & 0xFF)) !== scanline_width) {\n\t\t\tthrow new Error('Wrong scanline width ' + (((rgbe[2] & 0xFF)<<8) | (rgbe[3] & 0xFF)) + ', expected ' + scanline_width);\n\t\t}\n\n\t\tif (scanline_buffer === null) {\n\t\t\tscanline_buffer = new Array(4*scanline_width);\n\t\t}\n\n\t\tptr = 0;\n\t\t/* read each of the four channels for the scanline into the buffer */\n\t\tfor (let i=0; i<4; i++) {\n\t\t\tptr_end = (i+1)*scanline_width;\n\t\t\twhile(ptr < ptr_end) {\n\t\t\t\tif (readBuf(buf) < buf.length) {\n\t\t\t\t\tthrow new Error('Error reading 2-byte buffer');\n\t\t\t\t}\n\t\t\t\tif ((buf[0] & 0xFF) > 128) {\n\t\t\t\t\t/* a run of the same value */\n\t\t\t\t\tcount = (buf[0] & 0xFF) - 128;\n\t\t\t\t\tif ((count === 0) || (count > ptr_end - ptr)) {\n\t\t\t\t\t\tthrow new Error('Bad scanline data');\n\t\t\t\t\t}\n\t\t\t\t\twhile(count-- > 0) {\n\t\t\t\t\t\tscanline_buffer[ptr++] = buf[1];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\t/* a non-run */\n\t\t\t\t\tcount = buf[0] & 0xFF;\n\t\t\t\t\tif ((count === 0) || (count > ptr_end - ptr)) {\n\t\t\t\t\t\tthrow new Error('Bad scanline data');\n\t\t\t\t\t}\n\t\t\t\t\tscanline_buffer[ptr++] = buf[1];\n\t\t\t\t\tif (--count > 0) {\n\t\t\t\t\t\tif (readBufOffset(scanline_buffer, ptr, count) < count) {\n\t\t\t\t\t\t\tthrow new Error('Error reading non-run data');\n\t\t\t\t\t\t}\n\t\t\t\t\t\tptr += count;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t/* copy byte data to output */\n\t\tfor(let i = 0; i < scanline_width; i++) {\n\t\t\tdata[offset + 0] = scanline_buffer[i];\n\t\t\tdata[offset + 1] = scanline_buffer[i+scanline_width];\n\t\t\tdata[offset + 2] = scanline_buffer[i+2*scanline_width];\n\t\t\tdata[offset + 3] = scanline_buffer[i+3*scanline_width];\n\t\t\toffset += 4;\n\t\t}\n\n\t\tnum_scanlines--;\n\t}\n\n}\n\n//Returns data as floats and flipped along Y by default\nfunction parseHdr(buffer) {\n\tif (buffer instanceof ArrayBuffer) {\n\t\tbuffer = new Uint8Array(buffer);\n\t}\n\n\tlet fileOffset = 0;\n\tlet bufferLength = buffer.length;\n\n\tlet NEW_LINE = 10;\n\n\tfunction readLine() {\n\t\tlet buf = '';\n\t\tdo {\n\t\t\tlet b = buffer[fileOffset];\n\t\t\tif (b === NEW_LINE) {\n\t\t\t\t++fileOffset;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tbuf += String.fromCharCode(b);\n\t\t} while(++fileOffset < bufferLength);\n\t\treturn buf;\n\t}\n\n\tlet width = 0;\n\tlet height = 0;\n\tlet exposure = 1;\n\tlet gamma = 1;\n\tlet rle = false;\n\n\tfor(let i=0; i<20; i++) {\n\t\tlet line = readLine();\n\t\tlet match;\n\t\tif (match = line.match(radiancePattern)) {\n\t\t}\n\t\telse if (match = line.match(formatPattern)) {\n\t\t\trle = true;\n\t\t}\n\t\telse if (match = line.match(exposurePattern)) {\n\t\t\texposure = Number(match[1]);\n\t\t}\n\t\telse if (match = line.match(commentPattern)) {\n\t\t}\n\t\telse if (match = line.match(widthHeightPattern)) {\n\t\t\theight = Number(match[1]);\n\t\t\twidth = Number(match[2]);\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tif (!rle) {\n\t\tthrow new Error('File is not run length encoded!');\n\t}\n\n\tlet data = new Uint8Array(width * height * 4);\n\tlet scanline_width = width;\n\tlet num_scanlines = height;\n\n\treadPixelsRawRLE(buffer, data, 0, fileOffset, scanline_width, num_scanlines);\n\n\t//TODO: Should be Float16\n\tlet floatData = new Float32Array(width * height * 4);\n\tfor(let offset=0; offset<data.length; offset += 4) {\n\t\tlet r = data[offset+0]/255;\n\t\tlet g = data[offset+1]/255;\n\t\tlet b = data[offset+2]/255;\n\t\tlet e = data[offset+3];\n\t\tlet f = Math.pow(2.0, e - 128.0);\n\n\t\tr *= f;\n\t\tg *= f;\n\t\tb *= f;\n\n\t\tlet floatOffset = offset;\n\n\t\tfloatData[floatOffset+0] = r;\n\t\tfloatData[floatOffset+1] = g;\n\t\tfloatData[floatOffset+2] = b;\n\t\tfloatData[floatOffset+3] = 1.0;\n\t}\n\n\treturn {\n\t\tshape: [width, height],\n\t\texposure: exposure,\n\t\tgamma: gamma,\n\t\tdata: floatData\n\t};\n}\n\n\nexport default parseHdr;","// OrbitalControl.js\n'use strict';\n\nimport EaseNumber from './EaseNumber';\nimport Scheduler from  'scheduling';\nimport glm from 'gl-matrix';\n\nconst getMouse = function(mEvent, mTarget) {\n\n\tlet o = mTarget || {};\n\tif(mEvent.touches) {\n\t\to.x = mEvent.touches[0].pageX;\n\t\to.y = mEvent.touches[0].pageY;\n\t} else {\n\t\to.x = mEvent.clientX;\n\t\to.y = mEvent.clientY;\n\t}\n\n\treturn o;\n};\n\nclass OrbitalControl {\n\n\tconstructor(mTarget, mListenerTarget=window, mRadius=500) {\n\n\t\tthis._target         = mTarget;\n\t\tthis._listenerTarget = mListenerTarget;\n\t\tthis._mouse          = {};\n\t\tthis._preMouse       = {};\n\t\tthis.center          = glm.vec3.create();\n\t\tthis._up             = glm.vec3.fromValues( 0, 1, 0 );\n\t\tthis.radius          = new EaseNumber(mRadius);\n\t\tthis.position        = glm.vec3.fromValues(0, 0, this.radius.value);\n\t\tthis.positionOffset  = glm.vec3.create();\n\t\tthis._rx             = new EaseNumber(0);\n\t\tthis._rx.limit(-Math.PI/2, Math.PI/2);\n\t\tthis._ry             = new EaseNumber(0);\n\t\tthis._preRX          = 0;\n\t\tthis._preRY          = 0;\n\t\t\n\t\tthis._isLockZoom     = false;\n\t\tthis._isLockRotation = false;\n\t\tthis._isInvert       = false;\n\t\tthis.sensitivity\t = 1.0;\n\n\t\tthis._listenerTarget.addEventListener('mousewheel', (e) => this._onWheel(e));\n\t\tthis._listenerTarget.addEventListener('DOMMouseScroll', (e) => this._onWheel(e));\n\n\t\tthis._listenerTarget.addEventListener('mousedown', (e) => this._onDown(e) );\n\t\tthis._listenerTarget.addEventListener('touchstart', (e) => this._onDown(e) );\n\t\tthis._listenerTarget.addEventListener('mousemove', (e) => this._onMove(e) );\n\t\tthis._listenerTarget.addEventListener('touchmove', (e) => this._onMove(e) );\n\t\twindow.addEventListener('touchend', () => this._onUp() );\n\t\twindow.addEventListener('mouseup', () => this._onUp() );\n\n\t\tScheduler.addEF( () => this._loop());\n\t}\n\n\n\t//\tPUBLIC METHODS\n\n\tlock(mValue=true) {\n\t\tthis._isLockZoom = mValue;\n\t\tthis._isLockRotation = mValue;\n\t}\n\n\tlockZoom(mValue=true) {\n\t\tthis._isLockZoom = mValue;\n\t}\n\n\n\tlockRotation(mValue=true) {\n\t\tthis._isLockRotation = mValue;\n\t}\n\n\n\tinverseControl(isInvert=true) {\n\t\tthis._isInvert = isInvert;\n\t}\n\n\n\t//\tEVENT HANDLERES\n\t_onDown(mEvent) {\n\t\tif(this._isLockRotation) {return;}\n\t\tthis._isMouseDown = true;\n\t\tgetMouse(mEvent, this._mouse);\n\t\tgetMouse(mEvent, this._preMouse);\n\t\tthis._preRX = this._rx.targetValue;\n\t\tthis._preRY = this._ry.targetValue;\n\t}\n\n\n\t_onMove(mEvent) {\n\t\tif(this._isLockRotation) {return;}\n\t\tgetMouse(mEvent, this._mouse);\n\t\tif(mEvent.touches) {mEvent.preventDefault();}\n\n\t\tif(this._isMouseDown) {\n\t\t\tlet diffX = -(this._mouse.x - this._preMouse.x);\n\t\t\tif(this._isInvert) {diffX *= -1;}\n\t\t\tthis._ry.value = this._preRY - diffX * 0.01*this.sensitivity;\n\n\t\t\tlet diffY = -(this._mouse.y - this._preMouse.y);\n\t\t\tif(this._isInvert) {diffY *= -1;}\n\t\t\tthis._rx.value = this._preRX - diffY * 0.01*this.sensitivity;\n\t\t}\n\t}\n\n\n\t_onUp() {\n\t\tif(this._isLockRotation) {return;}\n\t\tthis._isMouseDown = false;\n\t}\n\n\n\t_onWheel(mEvent) {\n\t\tif(this._isLockZoom) {\treturn;\t}\n\t\tlet w = mEvent.wheelDelta;\n\t\tlet d = mEvent.detail;\n\t\tlet value = 0;\n\t\tif (d){\n\t\t\tif (w) {\n\t\t\t\tvalue = w/d/40*d>0?1:-1; // Opera\n\t\t\t} else {\n\t\t\t\tvalue = -d/3;              // Firefox;         TODO: do not /3 for OS X\n\t\t\t}\n\t\t} else {\n\t\t\tvalue = w/120; \n\t\t}\n\n\t\tthis.radius.add( -value * 2);\n\t}\n\n\n\t//\tPRIVATE METHODS\n\n\t_loop() {\n\n\t\tthis._updatePosition();\n\n\t\tif(this._target) {\n\t\t\tthis._updateCamera();\n\t\t}\n\t}\n\n\n\t_updatePosition() {\n\t\tthis.position[1] = Math.sin(this._rx.value) * this.radius.value;\n\t\tlet tr = Math.cos(this._rx.value) * this.radius.value;\n\t\tthis.position[0] = Math.cos(this._ry.value + Math.PI*0.5) * tr;\n\t\tthis.position[2] = Math.sin(this._ry.value + Math.PI*0.5) * tr;\n\t\tglm.vec3.add(this.position, this.position, this.positionOffset);\n\t}\n\n\n\t_updateCamera() {\n\t\tthis._target.lookAt(this.position, this.center, this._up);\n\t}\n\n\n\t//\tGETTER / SETTER\n\n\n\tget rx() {\n\t\treturn this._rx;\n\t}\n\n\n\tget ry() {\n\t\treturn this._ry;\n\t}\n}\n\n\nexport default OrbitalControl;","// QuatRotation.js\n\n'use strict';\n\nimport glm from 'gl-matrix';\nimport EaseNumber from './EaseNumber';\nimport Scheduler from 'scheduling';\n\nconst getMouse = function(mEvent, mTarget) {\n\n\tlet o = mTarget || {};\n\tif(mEvent.touches) {\n\t\to.x = mEvent.touches[0].pageX;\n\t\to.y = mEvent.touches[0].pageY;\n\t} else {\n\t\to.x = mEvent.clientX;\n\t\to.y = mEvent.clientY;\n\t}\n\n\treturn o;\n};\n\nclass QuatRotation {\n\tconstructor(mTarget, mListenerTarget=window, mEasing=0.1) {\n\n\t\tthis._target         = mTarget;\n\t\tthis._listenerTarget = mListenerTarget;\n\t\t\n\t\tthis.matrix          = glm.mat4.create();\n\t\tthis.m               = glm.mat4.create();\n\t\tthis._vZaxis         = glm.vec3.clone([0, 0, 0]);\n\t\tthis._zAxis          = glm.vec3.clone([0, 0, 1]);\n\t\tthis.preMouse        = {x:0, y:0};\n\t\tthis.mouse           = {x:0, y:0};\n\t\tthis._isMouseDown    = false;\n\t\tthis._rotation       = glm.quat.create();\n\t\tthis.tempRotation    = glm.quat.create();\n\t\tthis._rotateZMargin  = 0;\n\t\tthis._offset         = 0.004;\n\t\tthis._slerp          = -1;\n\t\tthis._isLocked       = false;\n\t\t\n\t\tthis._diffX          = new EaseNumber(0, mEasing);\n\t\tthis._diffY          = new EaseNumber(0, mEasing);\n\n\t\tthis._listenerTarget.addEventListener('mousedown', (e) => this._onDown(e) );\n\t\tthis._listenerTarget.addEventListener('touchstart', (e) => this._onDown(e) );\n\t\tthis._listenerTarget.addEventListener('mousemove', (e) => this._onMove(e) );\n\t\tthis._listenerTarget.addEventListener('touchmove', (e) => this._onMove(e) );\n\t\twindow.addEventListener('touchend', () => this._onUp() );\n\t\twindow.addEventListener('mouseup', () => this._onUp() );\n\n\t\tScheduler.addEF( () => this._loop());\n\t}\n\n\t// \tPUBLIC METHODS\n\n\tinverseControl(isInvert=true) {\n\t\tthis._isInvert = isInvert;\n\t}\n\n\tlock(mValue=true) {\n\t\tthis._isLocked = mValue;\n\t}\t\n\n\tsetCameraPos(mQuat, speed=0.1) {\n\t\tthis.easing = speed;\n\t\tif(this._slerp > 0) {return;}\n\t\t\n\t\tlet tempRotation  = glm.quat.clone(this._rotation);\n\t\tthis._updateRotation(tempRotation);\n\t\tthis._rotation    = glm.quat.clone(tempRotation);\n\t\tthis._currDiffX   = this.diffX = 0;\n\t\tthis._currDiffY   = this.diffY = 0;\n\t\t\n\t\tthis._isMouseDown = false;\n\t\tthis._isRotateZ   = 0;\n\t\t\n\t\tthis._targetQuat  = glm.quat.clone(mQuat);\n\t\tthis._slerp       = 1;\n\t}\n\n\tresetQuat() {\n\t\tthis._rotation    = glm.quat.clone([0, 0, 1, 0]);\n\t\tthis.tempRotation = glm.quat.clone([0, 0, 0, 0]);\n\t\tthis._targetQuat  = undefined;\n\t\tthis._slerp       = -1;\n\t}\n\n\t//\tEVENT HANDLER\n\n\t_onDown(mEvent) {\n\t\tif(this._isLocked) {return;}\n\n\t\tlet mouse = getMouse(mEvent);\n\t\tlet tempRotation = glm.quat.clone(this._rotation);\n\t\tthis._updateRotation(tempRotation);\n\t\tthis._rotation = tempRotation;\n\n\t\tthis._isMouseDown = true;\n\t\tthis._isRotateZ = 0;\n\t\tthis.preMouse = {x:mouse.x, y:mouse.y};\n\n\t\tif(mouse.y < this._rotateZMargin || mouse.y > (window.innerHeight - this._rotateZMargin) ) {\tthis._isRotateZ = 1;\t}\n\t\telse if(mouse.x < this._rotateZMargin || mouse.x > (window.innerWidth - this._rotateZMargin) ) {\tthis._isRotateZ = 2;\t}\n\n\t\tthis._diffX.setTo(0);\n\t\tthis._diffY.setTo(0);\n\t}\n\n\n\t_onMove(mEvent) {\n\t\tif(this._isLocked) {return;}\n\t\tgetMouse(mEvent, this.mouse);\n\t}\n\n\n\t_onUp() {\n\t\tif(this._isLocked) {return;}\n\t\tthis._isMouseDown = false;\n\t}\n\n\n\t//\tPRIVATE METHODS\n\n\t_updateRotation(mTempRotation) {\n\t\tif(this._isMouseDown && !this._isLocked) {\n\t\t\tthis._diffX.value = -(this.mouse.x - this.preMouse.x);\n\t\t\tthis._diffY.value =  (this.mouse.y - this.preMouse.y);\n\n\t\t\tif(this._isInvert) {\n\t\t\t\tthis._diffX.value = -this._diffX.targetValue;\n\t\t\t\tthis._diffY.value = -this._diffY.targetValue;\n\t\t\t}\n\t\t}\n\t\t\n\t\tlet angle, _quat;\n\n\t\tif(this._isRotateZ > 0) {\n\t\t\tif(this._isRotateZ === 1) {\n\t\t\t\tangle = -this._diffX.value * this._offset; \n\t\t\t\tangle *= (this.preMouse.y < this._rotateZMargin) ? -1 : 1;\n\t\t\t\t_quat = glm.quat.clone( [0, 0, Math.sin(angle), Math.cos(angle) ] );\n\t\t\t\tglm.quat.multiply(_quat, mTempRotation, _quat);\n\t\t\t} else {\n\t\t\t\tangle = -this._diffY.value * this._offset; \n\t\t\t\tangle *= (this.preMouse.x < this._rotateZMargin) ? 1 : -1;\n\t\t\t\t_quat = glm.quat.clone( [0, 0, Math.sin(angle), Math.cos(angle) ] );\n\t\t\t\tglm.quat.multiply(_quat, mTempRotation, _quat);\n\t\t\t}\n\t\t} else {\n\t\t\tlet v = glm.vec3.clone([this._diffX.value, this._diffY.value, 0]);\n\t\t\tlet axis = glm.vec3.create();\n\t\t\tglm.vec3.cross(axis, v, this._zAxis);\n\t\t\tglm.vec3.normalize(axis, axis);\n\t\t\tangle = glm.vec3.length(v) * this._offset;\n\t\t\t_quat = glm.quat.clone( [Math.sin(angle) * axis[0], Math.sin(angle) * axis[1], Math.sin(angle) * axis[2], Math.cos(angle) ] );\n\t\t\tglm.quat.multiply(mTempRotation, _quat, mTempRotation);\n\t\t}\n\t}\n\n\t_loop() {\n\t\tglm.mat4.identity(this.m);\n\n\t\tif(this._targetQuat === undefined) { \n\t\t\tglm.quat.set(this.tempRotation, this._rotation[0], this._rotation[1], this._rotation[2], this._rotation[3]);\n\t\t\tthis._updateRotation(this.tempRotation);\n\t\t} else {\n\t\t\tthis._slerp += (0 - this._slerp) * 0.1;\n\n\t\t\tif(this._slerp < 0.0005) {\n\t\t\t\tglm.quat.copy(this._rotation, this._targetQuat);\n\t\t\t\tglm.quat.copy(this.tempRotation, this._targetQuat);\n\t\t\t\tthis._targetQuat = undefined;\n\t\t\t\tthis._diffX.setTo(0);\n\t\t\t\tthis._diffY.setTo(0);\n\t\t\t\tthis._slerp = -1;\n\t\t\t} else {\n\t\t\t\tglm.quat.set(this.tempRotation, 0, 0, 0, 0);\n\t\t\t\tglm.quat.slerp(this.tempRotation, this._targetQuat, this._rotation, this._slerp);\n\t\t\t}\n\t\t}\n\n\t\tglm.vec3.transformQuat(this._vZaxis, this._vZaxis, this.tempRotation);\n\n\t\tglm.mat4.fromQuat(this.matrix, this.tempRotation);\n\t}\n\n\n\t//\tGETTER AND SETTER\n\n\tset easing(mValue) {\n\t\tthis._diffX.easing = mValue;\n\t\tthis._diffY.easing = mValue;\n\t}\n\n\tget easing() {\n\t\treturn this._diffX.easing;\n\t}\n}\n\nexport default QuatRotation;","// ShaderLbs.js\n\n'use strict';\n\nvar glslify = require('glslify');\n\nconst ShaderLibs = {\n\tsimpleColorFrag:glslify('../shaders/simpleColor.frag'),\n\tbigTriangleVert:glslify('../shaders/bigTriangle.vert'),\n\tgeneralVert:glslify('../shaders/general.vert'),\n\tgeneralNormalVert:glslify('../shaders/generalWithNormal.vert'),\n\tcopyFrag:glslify('../shaders/copy.frag'),\n\tbasicVert:glslify('../shaders/basic.vert'),\n\tskyboxVert:glslify('../shaders/skybox.vert'),\n\tskyboxFrag:glslify('../shaders/skybox.frag')\n};\n\n\nexport default ShaderLibs;"],"sourceRoot":"/source/"}