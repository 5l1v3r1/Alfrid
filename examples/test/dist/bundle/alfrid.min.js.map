{"version":3,"sources":["node_modules/browser-pack/_prelude.js","node_modules/gl-matrix/src/gl-matrix.js","alfrid.min.js","node_modules/gl-matrix/src/gl-matrix/common.js","node_modules/gl-matrix/src/gl-matrix/mat2.js","node_modules/gl-matrix/src/gl-matrix/mat2d.js","node_modules/gl-matrix/src/gl-matrix/mat3.js","node_modules/gl-matrix/src/gl-matrix/mat4.js","node_modules/gl-matrix/src/gl-matrix/quat.js","node_modules/gl-matrix/src/gl-matrix/vec2.js","node_modules/gl-matrix/src/gl-matrix/vec3.js","node_modules/gl-matrix/src/gl-matrix/vec4.js","src/alfrid.js","src/alfrid/GLShader.js","src/alfrid/GLTool.js","src/alfrid/Mesh.js","src/alfrid/cameras/Camera.js","src/alfrid/cameras/CameraOrtho.js","src/alfrid/cameras/CameraPerspective.js","src/alfrid/tools/EaseNumber.js","src/alfrid/tools/EventDispatcher.js","src/alfrid/tools/Scheduler.js"],"names":["f","exports","module","define","amd","g","window","global","self","this","alfrid","e","t","n","r","s","o","u","a","require","i","Error","code","l","call","length",1,"_dereq_","glMatrix","mat2","mat2d","mat3","mat4","quat","vec2","vec3","vec4","./gl-matrix/common.js","./gl-matrix/mat2.js","./gl-matrix/mat2d.js","./gl-matrix/mat3.js","./gl-matrix/mat4.js","./gl-matrix/quat.js","./gl-matrix/vec2.js","./gl-matrix/vec3.js","./gl-matrix/vec4.js",2,"EPSILON","ARRAY_TYPE","Float32Array","Array","RANDOM","Math","random","setMatrixArrayType","type","GLMAT_ARRAY_TYPE","degree","PI","toRadian",3,"create","out","clone","copy","identity","transpose","a1","invert","a0","a2","a3","det","adjoint","determinant","multiply","b","b0","b1","b2","b3","mul","rotate","rad","sin","c","cos","scale","v","v0","v1","fromRotation","fromScaling","str","frob","sqrt","pow","LDU","L","D","U","./common.js",4,"aa","ab","ac","ad","atx","aty","a4","a5","b4","b5","translate","fromTranslation",5,"fromMat4","a01","a02","a12","a00","a10","a11","a20","a21","a22","b01","b11","b21","b00","b02","b10","b12","b20","b22","x","y","fromMat2d","fromQuat","q","z","w","x2","y2","z2","xx","yx","yy","zx","zy","zz","wx","wy","wz","normalFromMat4","a03","a13","a23","a30","a31","a32","a33","b03","b04","b05","b06","b07","b08","b09",6,"axis","len","abs","rotateX","rotateY","rotateZ","fromXRotation","fromYRotation","fromZRotation","fromRotationTranslation","xy","xz","yz","fromRotationTranslationScale","sx","sy","sz","fromRotationTranslationScaleOrigin","ox","oy","oz","frustum","left","right","bottom","top","near","far","rl","tb","nf","perspective","fovy","aspect","tan","perspectiveFromFieldOfView","fov","upTan","upDegrees","downTan","downDegrees","leftTan","leftDegrees","rightTan","rightDegrees","xScale","yScale","ortho","lr","bt","lookAt","eye","center","up","x0","x1","y0","y1","z0","z1","eyex","eyey","eyez","upx","upy","upz","centerx","centery","centerz",7,"rotationTo","tmpvec3","xUnitVec3","fromValues","yUnitVec3","dot","cross","normalize","setAxisAngle","setAxes","matr","view","fromMat3","set","add","ax","ay","az","aw","bx","by","bz","bw","calculateW","lerp","slerp","omega","cosom","sinom","scale0","scale1","acos","sqlerp","temp1","temp2","d","invDot","conjugate","squaredLength","sqrLen","m","fRoot","fTrace","j","k","./mat3.js","./vec3.js","./vec4.js",8,"subtract","sub","divide","div","min","max","scaleAndAdd","distance","dist","squaredDistance","sqrDist","negate","inverse","transformMat2","transformMat2d","transformMat3","transformMat4","forEach","vec","stride","offset","count","fn","arg",9,"hermite","factorTimes2","factor1","factor2","factor3","factor4","bezier","inverseFactor","inverseFactorTimesTwo","zScale","transformQuat","qx","qy","qz","qw","ix","iy","iz","iw","p","angle","tempA","tempB","cosine",10,11,"_interopRequireDefault","obj","__esModule","default","_classCallCheck","instance","Constructor","TypeError","_createClass","defineProperties","target","props","descriptor","enumerable","configurable","writable","Object","defineProperty","key","protoProps","staticProps","prototype","_glMatrix","_glMatrix2","_GLTool","_GLTool2","_GLShader","_GLShader2","_Mesh","_Mesh2","_Scheduler","_Scheduler2","_EventDispatcher","_EventDispatcher2","_EaseNumber","_EaseNumber2","_Camera","_Camera2","_CameraOrtho","_CameraOrtho2","_CameraPerspective","_CameraPerspective2","VERSION","glm","GL","GLTool","GLShader","Mesh","Scheduler","EventDispatcher","EaseNumber","Camera","CameraOrtho","CameraPerspective","value","navigator","userAgent","indexOf","console","log","./alfrid/GLShader","./alfrid/GLTool","./alfrid/Mesh","./alfrid/cameras/Camera","./alfrid/cameras/CameraOrtho","./alfrid/cameras/CameraPerspective","./alfrid/tools/EaseNumber","./alfrid/tools/EventDispatcher","./alfrid/tools/Scheduler","gl-matrix",12,"addLineNumbers","string","lines","split","join","gl","undefined","defaultVertexShader","defaultFragmentShader","strVertexShader","arguments","strFragmentShader","parameters","uniformValues","uniformTextures","vsShader","_createShaderProgram","fsShader","_attachShaderProgram","useProgram","shaderProgram","useShader","mName","mType","mValue","hasUniform","oUniform","name","uniformLoc","getUniformLocation","push","mShaderStr","isVertexShader","shaderType","VERTEX_SHADER","FRAGMENT_SHADER","shader","createShader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","warn","getShaderInfoLog","mVertexShader","mFragmentShader","createProgram","attachShader","linkProgram","./GLTool",13,"canvas","_viewport","_enabledVertexAttribute","identityMatrix","_normalMatrix","_inverseViewMatrix","_matrix","mCanvas","mParameters","destroy","setSize","innerWidth","innerHeight","getContext","extensions","getExtension","DEPTH_TEST","CULL_FACE","BLEND","enable","h","hasChanged","viewport","clearColor","clear","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","mCamera","camera","mShader","mRotation","matrix","mMesh","getAttribLoc","cacheAttribLoc","getAttribLocation","attributes","attribute","bindBuffer","ARRAY_BUFFER","buffer","attrPosition","vertexAttribPointer","itemSize","FLOAT","enableVertexAttribArray","uniform","projection","drawType","POINTS","drawArrays","vertexSize","drawElements","iBuffer","numItems","UNSIGNED_SHORT","mWidth","mHeight","_width","_height","width","height","_aspectRatio","ext","blendFunc","SRC_ALPHA","ONE_MINUS_SRC_ALPHA","ONE","mParameter","disable","setViewport","parentNode","removeChild","get",14,"mDrawType","TRIANGLES","_attributes","mArrayVertices","isDynamic","bufferData","mArrayTexCoords","mArrayIndices","DYNAMIC_DRAW","STATIC_DRAW","_indices","createBuffer","ELEMENT_ARRAY_BUFFER","Uint16Array","mData","mItemSize","index","dataArray","data",15,"_projection","position","aEye","aCenter","aUp",16,"_possibleConstructorReturn","ReferenceError","_typeof","_inherits","subClass","superClass","constructor","setPrototypeOf","__proto__","Symbol","iterator","_Camera3","_this","getPrototypeOf","./Camera",17,"mFov","mAspectRatio","mNear","mFar","_fov","_near","_far",18,"mEasing","easing","_value","_targetValue","addEF","_update","_checkLimit","mAdd","mMin","mMax","limit","_min","_max","./Scheduler",19,"supportsCustomEvents","newTestCustomEvent","document","createEvent","aEventType","aFunction","_eventListeners","currentArray","currentArrayLength","splice","aEvent","eventType","currentTarget","theError","newEvent","detail","dispatcher","dispatchEvent","currentEventListeners","_copyArray","currentFunction","aDetail","initCustomEvent","objectName","hasOwnProperty","aArray",20,"requestAnimFrame","requestAnimationFrame","webkitRequestAnimationFrame","mozRequestAnimationFrame","oRequestAnimationFrame","msRequestAnimationFrame","callback","setTimeout","FRAMERATE","_delayTasks","_nextTasks","_deferTasks","_highTasks","_usurpTask","_enterframeTasks","_idTable","_loop","func","params","id","_delay","time","Date","getTime","delay","task","interval","current","pop","startTime","shift","unshift","concat","_process","scheduler"],"mappings":"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","file":"alfrid.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","/**\n * @fileoverview gl-matrix - High performance matrix and vector operations\n * @author Brandon Jones\n * @author Colin MacKenzie IV\n * @version 2.3.0\n */\n\n/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE. */\n// END HEADER\n\nexports.glMatrix = require(\"./gl-matrix/common.js\");\nexports.mat2 = require(\"./gl-matrix/mat2.js\");\nexports.mat2d = require(\"./gl-matrix/mat2d.js\");\nexports.mat3 = require(\"./gl-matrix/mat3.js\");\nexports.mat4 = require(\"./gl-matrix/mat4.js\");\nexports.quat = require(\"./gl-matrix/quat.js\");\nexports.vec2 = require(\"./gl-matrix/vec2.js\");\nexports.vec3 = require(\"./gl-matrix/vec3.js\");\nexports.vec4 = require(\"./gl-matrix/vec4.js\");","(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.alfrid = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(_dereq_,module,exports){\n/**\n * @fileoverview gl-matrix - High performance matrix and vector operations\n * @author Brandon Jones\n * @author Colin MacKenzie IV\n * @version 2.3.0\n */\n\n/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE. */\n// END HEADER\n\nexports.glMatrix = _dereq_(\"./gl-matrix/common.js\");\nexports.mat2 = _dereq_(\"./gl-matrix/mat2.js\");\nexports.mat2d = _dereq_(\"./gl-matrix/mat2d.js\");\nexports.mat3 = _dereq_(\"./gl-matrix/mat3.js\");\nexports.mat4 = _dereq_(\"./gl-matrix/mat4.js\");\nexports.quat = _dereq_(\"./gl-matrix/quat.js\");\nexports.vec2 = _dereq_(\"./gl-matrix/vec2.js\");\nexports.vec3 = _dereq_(\"./gl-matrix/vec3.js\");\nexports.vec4 = _dereq_(\"./gl-matrix/vec4.js\");\n},{\"./gl-matrix/common.js\":2,\"./gl-matrix/mat2.js\":3,\"./gl-matrix/mat2d.js\":4,\"./gl-matrix/mat3.js\":5,\"./gl-matrix/mat4.js\":6,\"./gl-matrix/quat.js\":7,\"./gl-matrix/vec2.js\":8,\"./gl-matrix/vec3.js\":9,\"./gl-matrix/vec4.js\":10}],2:[function(_dereq_,module,exports){\n/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE. */\n\n/**\n * @class Common utilities\n * @name glMatrix\n */\nvar glMatrix = {};\n\n// Constants\nglMatrix.EPSILON = 0.000001;\nglMatrix.ARRAY_TYPE = (typeof Float32Array !== 'undefined') ? Float32Array : Array;\nglMatrix.RANDOM = Math.random;\n\n/**\n * Sets the type of array used when creating new vectors and matrices\n *\n * @param {Type} type Array type, such as Float32Array or Array\n */\nglMatrix.setMatrixArrayType = function(type) {\n    GLMAT_ARRAY_TYPE = type;\n}\n\nvar degree = Math.PI / 180;\n\n/**\n* Convert Degree To Radian\n*\n* @param {Number} Angle in Degrees\n*/\nglMatrix.toRadian = function(a){\n     return a * degree;\n}\n\nmodule.exports = glMatrix;\n\n},{}],3:[function(_dereq_,module,exports){\n/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE. */\n\nvar glMatrix = _dereq_(\"./common.js\");\n\n/**\n * @class 2x2 Matrix\n * @name mat2\n */\nvar mat2 = {};\n\n/**\n * Creates a new identity mat2\n *\n * @returns {mat2} a new 2x2 matrix\n */\nmat2.create = function() {\n    var out = new glMatrix.ARRAY_TYPE(4);\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 1;\n    return out;\n};\n\n/**\n * Creates a new mat2 initialized with values from an existing matrix\n *\n * @param {mat2} a matrix to clone\n * @returns {mat2} a new 2x2 matrix\n */\nmat2.clone = function(a) {\n    var out = new glMatrix.ARRAY_TYPE(4);\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    return out;\n};\n\n/**\n * Copy the values from one mat2 to another\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the source matrix\n * @returns {mat2} out\n */\nmat2.copy = function(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    return out;\n};\n\n/**\n * Set a mat2 to the identity matrix\n *\n * @param {mat2} out the receiving matrix\n * @returns {mat2} out\n */\nmat2.identity = function(out) {\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 1;\n    return out;\n};\n\n/**\n * Transpose the values of a mat2\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the source matrix\n * @returns {mat2} out\n */\nmat2.transpose = function(out, a) {\n    // If we are transposing ourselves we can skip a few steps but have to cache some values\n    if (out === a) {\n        var a1 = a[1];\n        out[1] = a[2];\n        out[2] = a1;\n    } else {\n        out[0] = a[0];\n        out[1] = a[2];\n        out[2] = a[1];\n        out[3] = a[3];\n    }\n    \n    return out;\n};\n\n/**\n * Inverts a mat2\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the source matrix\n * @returns {mat2} out\n */\nmat2.invert = function(out, a) {\n    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3],\n\n        // Calculate the determinant\n        det = a0 * a3 - a2 * a1;\n\n    if (!det) {\n        return null;\n    }\n    det = 1.0 / det;\n    \n    out[0] =  a3 * det;\n    out[1] = -a1 * det;\n    out[2] = -a2 * det;\n    out[3] =  a0 * det;\n\n    return out;\n};\n\n/**\n * Calculates the adjugate of a mat2\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the source matrix\n * @returns {mat2} out\n */\nmat2.adjoint = function(out, a) {\n    // Caching this value is nessecary if out == a\n    var a0 = a[0];\n    out[0] =  a[3];\n    out[1] = -a[1];\n    out[2] = -a[2];\n    out[3] =  a0;\n\n    return out;\n};\n\n/**\n * Calculates the determinant of a mat2\n *\n * @param {mat2} a the source matrix\n * @returns {Number} determinant of a\n */\nmat2.determinant = function (a) {\n    return a[0] * a[3] - a[2] * a[1];\n};\n\n/**\n * Multiplies two mat2's\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the first operand\n * @param {mat2} b the second operand\n * @returns {mat2} out\n */\nmat2.multiply = function (out, a, b) {\n    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];\n    var b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3];\n    out[0] = a0 * b0 + a2 * b1;\n    out[1] = a1 * b0 + a3 * b1;\n    out[2] = a0 * b2 + a2 * b3;\n    out[3] = a1 * b2 + a3 * b3;\n    return out;\n};\n\n/**\n * Alias for {@link mat2.multiply}\n * @function\n */\nmat2.mul = mat2.multiply;\n\n/**\n * Rotates a mat2 by the given angle\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat2} out\n */\nmat2.rotate = function (out, a, rad) {\n    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3],\n        s = Math.sin(rad),\n        c = Math.cos(rad);\n    out[0] = a0 *  c + a2 * s;\n    out[1] = a1 *  c + a3 * s;\n    out[2] = a0 * -s + a2 * c;\n    out[3] = a1 * -s + a3 * c;\n    return out;\n};\n\n/**\n * Scales the mat2 by the dimensions in the given vec2\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the matrix to rotate\n * @param {vec2} v the vec2 to scale the matrix by\n * @returns {mat2} out\n **/\nmat2.scale = function(out, a, v) {\n    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3],\n        v0 = v[0], v1 = v[1];\n    out[0] = a0 * v0;\n    out[1] = a1 * v0;\n    out[2] = a2 * v1;\n    out[3] = a3 * v1;\n    return out;\n};\n\n/**\n * Creates a matrix from a given angle\n * This is equivalent to (but much faster than):\n *\n *     mat2.identity(dest);\n *     mat2.rotate(dest, dest, rad);\n *\n * @param {mat2} out mat2 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat2} out\n */\nmat2.fromRotation = function(out, rad) {\n    var s = Math.sin(rad),\n        c = Math.cos(rad);\n    out[0] = c;\n    out[1] = s;\n    out[2] = -s;\n    out[3] = c;\n    return out;\n}\n\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat2.identity(dest);\n *     mat2.scale(dest, dest, vec);\n *\n * @param {mat2} out mat2 receiving operation result\n * @param {vec2} v Scaling vector\n * @returns {mat2} out\n */\nmat2.fromScaling = function(out, v) {\n    out[0] = v[0];\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = v[1];\n    return out;\n}\n\n/**\n * Returns a string representation of a mat2\n *\n * @param {mat2} mat matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\nmat2.str = function (a) {\n    return 'mat2(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';\n};\n\n/**\n * Returns Frobenius norm of a mat2\n *\n * @param {mat2} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\nmat2.frob = function (a) {\n    return(Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2)))\n};\n\n/**\n * Returns L, D and U matrices (Lower triangular, Diagonal and Upper triangular) by factorizing the input matrix\n * @param {mat2} L the lower triangular matrix \n * @param {mat2} D the diagonal matrix \n * @param {mat2} U the upper triangular matrix \n * @param {mat2} a the input matrix to factorize\n */\n\nmat2.LDU = function (L, D, U, a) { \n    L[2] = a[2]/a[0]; \n    U[0] = a[0]; \n    U[1] = a[1]; \n    U[3] = a[3] - L[2] * U[1]; \n    return [L, D, U];       \n}; \n\n\nmodule.exports = mat2;\n\n},{\"./common.js\":2}],4:[function(_dereq_,module,exports){\n/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE. */\n\nvar glMatrix = _dereq_(\"./common.js\");\n\n/**\n * @class 2x3 Matrix\n * @name mat2d\n * \n * @description \n * A mat2d contains six elements defined as:\n * <pre>\n * [a, c, tx,\n *  b, d, ty]\n * </pre>\n * This is a short form for the 3x3 matrix:\n * <pre>\n * [a, c, tx,\n *  b, d, ty,\n *  0, 0, 1]\n * </pre>\n * The last row is ignored so the array is shorter and operations are faster.\n */\nvar mat2d = {};\n\n/**\n * Creates a new identity mat2d\n *\n * @returns {mat2d} a new 2x3 matrix\n */\nmat2d.create = function() {\n    var out = new glMatrix.ARRAY_TYPE(6);\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 1;\n    out[4] = 0;\n    out[5] = 0;\n    return out;\n};\n\n/**\n * Creates a new mat2d initialized with values from an existing matrix\n *\n * @param {mat2d} a matrix to clone\n * @returns {mat2d} a new 2x3 matrix\n */\nmat2d.clone = function(a) {\n    var out = new glMatrix.ARRAY_TYPE(6);\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[4] = a[4];\n    out[5] = a[5];\n    return out;\n};\n\n/**\n * Copy the values from one mat2d to another\n *\n * @param {mat2d} out the receiving matrix\n * @param {mat2d} a the source matrix\n * @returns {mat2d} out\n */\nmat2d.copy = function(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[4] = a[4];\n    out[5] = a[5];\n    return out;\n};\n\n/**\n * Set a mat2d to the identity matrix\n *\n * @param {mat2d} out the receiving matrix\n * @returns {mat2d} out\n */\nmat2d.identity = function(out) {\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 1;\n    out[4] = 0;\n    out[5] = 0;\n    return out;\n};\n\n/**\n * Inverts a mat2d\n *\n * @param {mat2d} out the receiving matrix\n * @param {mat2d} a the source matrix\n * @returns {mat2d} out\n */\nmat2d.invert = function(out, a) {\n    var aa = a[0], ab = a[1], ac = a[2], ad = a[3],\n        atx = a[4], aty = a[5];\n\n    var det = aa * ad - ab * ac;\n    if(!det){\n        return null;\n    }\n    det = 1.0 / det;\n\n    out[0] = ad * det;\n    out[1] = -ab * det;\n    out[2] = -ac * det;\n    out[3] = aa * det;\n    out[4] = (ac * aty - ad * atx) * det;\n    out[5] = (ab * atx - aa * aty) * det;\n    return out;\n};\n\n/**\n * Calculates the determinant of a mat2d\n *\n * @param {mat2d} a the source matrix\n * @returns {Number} determinant of a\n */\nmat2d.determinant = function (a) {\n    return a[0] * a[3] - a[1] * a[2];\n};\n\n/**\n * Multiplies two mat2d's\n *\n * @param {mat2d} out the receiving matrix\n * @param {mat2d} a the first operand\n * @param {mat2d} b the second operand\n * @returns {mat2d} out\n */\nmat2d.multiply = function (out, a, b) {\n    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5],\n        b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3], b4 = b[4], b5 = b[5];\n    out[0] = a0 * b0 + a2 * b1;\n    out[1] = a1 * b0 + a3 * b1;\n    out[2] = a0 * b2 + a2 * b3;\n    out[3] = a1 * b2 + a3 * b3;\n    out[4] = a0 * b4 + a2 * b5 + a4;\n    out[5] = a1 * b4 + a3 * b5 + a5;\n    return out;\n};\n\n/**\n * Alias for {@link mat2d.multiply}\n * @function\n */\nmat2d.mul = mat2d.multiply;\n\n/**\n * Rotates a mat2d by the given angle\n *\n * @param {mat2d} out the receiving matrix\n * @param {mat2d} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat2d} out\n */\nmat2d.rotate = function (out, a, rad) {\n    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5],\n        s = Math.sin(rad),\n        c = Math.cos(rad);\n    out[0] = a0 *  c + a2 * s;\n    out[1] = a1 *  c + a3 * s;\n    out[2] = a0 * -s + a2 * c;\n    out[3] = a1 * -s + a3 * c;\n    out[4] = a4;\n    out[5] = a5;\n    return out;\n};\n\n/**\n * Scales the mat2d by the dimensions in the given vec2\n *\n * @param {mat2d} out the receiving matrix\n * @param {mat2d} a the matrix to translate\n * @param {vec2} v the vec2 to scale the matrix by\n * @returns {mat2d} out\n **/\nmat2d.scale = function(out, a, v) {\n    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5],\n        v0 = v[0], v1 = v[1];\n    out[0] = a0 * v0;\n    out[1] = a1 * v0;\n    out[2] = a2 * v1;\n    out[3] = a3 * v1;\n    out[4] = a4;\n    out[5] = a5;\n    return out;\n};\n\n/**\n * Translates the mat2d by the dimensions in the given vec2\n *\n * @param {mat2d} out the receiving matrix\n * @param {mat2d} a the matrix to translate\n * @param {vec2} v the vec2 to translate the matrix by\n * @returns {mat2d} out\n **/\nmat2d.translate = function(out, a, v) {\n    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5],\n        v0 = v[0], v1 = v[1];\n    out[0] = a0;\n    out[1] = a1;\n    out[2] = a2;\n    out[3] = a3;\n    out[4] = a0 * v0 + a2 * v1 + a4;\n    out[5] = a1 * v0 + a3 * v1 + a5;\n    return out;\n};\n\n/**\n * Creates a matrix from a given angle\n * This is equivalent to (but much faster than):\n *\n *     mat2d.identity(dest);\n *     mat2d.rotate(dest, dest, rad);\n *\n * @param {mat2d} out mat2d receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat2d} out\n */\nmat2d.fromRotation = function(out, rad) {\n    var s = Math.sin(rad), c = Math.cos(rad);\n    out[0] = c;\n    out[1] = s;\n    out[2] = -s;\n    out[3] = c;\n    out[4] = 0;\n    out[5] = 0;\n    return out;\n}\n\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat2d.identity(dest);\n *     mat2d.scale(dest, dest, vec);\n *\n * @param {mat2d} out mat2d receiving operation result\n * @param {vec2} v Scaling vector\n * @returns {mat2d} out\n */\nmat2d.fromScaling = function(out, v) {\n    out[0] = v[0];\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = v[1];\n    out[4] = 0;\n    out[5] = 0;\n    return out;\n}\n\n/**\n * Creates a matrix from a vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat2d.identity(dest);\n *     mat2d.translate(dest, dest, vec);\n *\n * @param {mat2d} out mat2d receiving operation result\n * @param {vec2} v Translation vector\n * @returns {mat2d} out\n */\nmat2d.fromTranslation = function(out, v) {\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 1;\n    out[4] = v[0];\n    out[5] = v[1];\n    return out;\n}\n\n/**\n * Returns a string representation of a mat2d\n *\n * @param {mat2d} a matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\nmat2d.str = function (a) {\n    return 'mat2d(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + \n                    a[3] + ', ' + a[4] + ', ' + a[5] + ')';\n};\n\n/**\n * Returns Frobenius norm of a mat2d\n *\n * @param {mat2d} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\nmat2d.frob = function (a) { \n    return(Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + 1))\n}; \n\nmodule.exports = mat2d;\n\n},{\"./common.js\":2}],5:[function(_dereq_,module,exports){\n/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE. */\n\nvar glMatrix = _dereq_(\"./common.js\");\n\n/**\n * @class 3x3 Matrix\n * @name mat3\n */\nvar mat3 = {};\n\n/**\n * Creates a new identity mat3\n *\n * @returns {mat3} a new 3x3 matrix\n */\nmat3.create = function() {\n    var out = new glMatrix.ARRAY_TYPE(9);\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 1;\n    out[5] = 0;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 1;\n    return out;\n};\n\n/**\n * Copies the upper-left 3x3 values into the given mat3.\n *\n * @param {mat3} out the receiving 3x3 matrix\n * @param {mat4} a   the source 4x4 matrix\n * @returns {mat3} out\n */\nmat3.fromMat4 = function(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[4];\n    out[4] = a[5];\n    out[5] = a[6];\n    out[6] = a[8];\n    out[7] = a[9];\n    out[8] = a[10];\n    return out;\n};\n\n/**\n * Creates a new mat3 initialized with values from an existing matrix\n *\n * @param {mat3} a matrix to clone\n * @returns {mat3} a new 3x3 matrix\n */\nmat3.clone = function(a) {\n    var out = new glMatrix.ARRAY_TYPE(9);\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[8] = a[8];\n    return out;\n};\n\n/**\n * Copy the values from one mat3 to another\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the source matrix\n * @returns {mat3} out\n */\nmat3.copy = function(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[8] = a[8];\n    return out;\n};\n\n/**\n * Set a mat3 to the identity matrix\n *\n * @param {mat3} out the receiving matrix\n * @returns {mat3} out\n */\nmat3.identity = function(out) {\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 1;\n    out[5] = 0;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 1;\n    return out;\n};\n\n/**\n * Transpose the values of a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the source matrix\n * @returns {mat3} out\n */\nmat3.transpose = function(out, a) {\n    // If we are transposing ourselves we can skip a few steps but have to cache some values\n    if (out === a) {\n        var a01 = a[1], a02 = a[2], a12 = a[5];\n        out[1] = a[3];\n        out[2] = a[6];\n        out[3] = a01;\n        out[5] = a[7];\n        out[6] = a02;\n        out[7] = a12;\n    } else {\n        out[0] = a[0];\n        out[1] = a[3];\n        out[2] = a[6];\n        out[3] = a[1];\n        out[4] = a[4];\n        out[5] = a[7];\n        out[6] = a[2];\n        out[7] = a[5];\n        out[8] = a[8];\n    }\n    \n    return out;\n};\n\n/**\n * Inverts a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the source matrix\n * @returns {mat3} out\n */\nmat3.invert = function(out, a) {\n    var a00 = a[0], a01 = a[1], a02 = a[2],\n        a10 = a[3], a11 = a[4], a12 = a[5],\n        a20 = a[6], a21 = a[7], a22 = a[8],\n\n        b01 = a22 * a11 - a12 * a21,\n        b11 = -a22 * a10 + a12 * a20,\n        b21 = a21 * a10 - a11 * a20,\n\n        // Calculate the determinant\n        det = a00 * b01 + a01 * b11 + a02 * b21;\n\n    if (!det) { \n        return null; \n    }\n    det = 1.0 / det;\n\n    out[0] = b01 * det;\n    out[1] = (-a22 * a01 + a02 * a21) * det;\n    out[2] = (a12 * a01 - a02 * a11) * det;\n    out[3] = b11 * det;\n    out[4] = (a22 * a00 - a02 * a20) * det;\n    out[5] = (-a12 * a00 + a02 * a10) * det;\n    out[6] = b21 * det;\n    out[7] = (-a21 * a00 + a01 * a20) * det;\n    out[8] = (a11 * a00 - a01 * a10) * det;\n    return out;\n};\n\n/**\n * Calculates the adjugate of a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the source matrix\n * @returns {mat3} out\n */\nmat3.adjoint = function(out, a) {\n    var a00 = a[0], a01 = a[1], a02 = a[2],\n        a10 = a[3], a11 = a[4], a12 = a[5],\n        a20 = a[6], a21 = a[7], a22 = a[8];\n\n    out[0] = (a11 * a22 - a12 * a21);\n    out[1] = (a02 * a21 - a01 * a22);\n    out[2] = (a01 * a12 - a02 * a11);\n    out[3] = (a12 * a20 - a10 * a22);\n    out[4] = (a00 * a22 - a02 * a20);\n    out[5] = (a02 * a10 - a00 * a12);\n    out[6] = (a10 * a21 - a11 * a20);\n    out[7] = (a01 * a20 - a00 * a21);\n    out[8] = (a00 * a11 - a01 * a10);\n    return out;\n};\n\n/**\n * Calculates the determinant of a mat3\n *\n * @param {mat3} a the source matrix\n * @returns {Number} determinant of a\n */\nmat3.determinant = function (a) {\n    var a00 = a[0], a01 = a[1], a02 = a[2],\n        a10 = a[3], a11 = a[4], a12 = a[5],\n        a20 = a[6], a21 = a[7], a22 = a[8];\n\n    return a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20);\n};\n\n/**\n * Multiplies two mat3's\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the first operand\n * @param {mat3} b the second operand\n * @returns {mat3} out\n */\nmat3.multiply = function (out, a, b) {\n    var a00 = a[0], a01 = a[1], a02 = a[2],\n        a10 = a[3], a11 = a[4], a12 = a[5],\n        a20 = a[6], a21 = a[7], a22 = a[8],\n\n        b00 = b[0], b01 = b[1], b02 = b[2],\n        b10 = b[3], b11 = b[4], b12 = b[5],\n        b20 = b[6], b21 = b[7], b22 = b[8];\n\n    out[0] = b00 * a00 + b01 * a10 + b02 * a20;\n    out[1] = b00 * a01 + b01 * a11 + b02 * a21;\n    out[2] = b00 * a02 + b01 * a12 + b02 * a22;\n\n    out[3] = b10 * a00 + b11 * a10 + b12 * a20;\n    out[4] = b10 * a01 + b11 * a11 + b12 * a21;\n    out[5] = b10 * a02 + b11 * a12 + b12 * a22;\n\n    out[6] = b20 * a00 + b21 * a10 + b22 * a20;\n    out[7] = b20 * a01 + b21 * a11 + b22 * a21;\n    out[8] = b20 * a02 + b21 * a12 + b22 * a22;\n    return out;\n};\n\n/**\n * Alias for {@link mat3.multiply}\n * @function\n */\nmat3.mul = mat3.multiply;\n\n/**\n * Translate a mat3 by the given vector\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the matrix to translate\n * @param {vec2} v vector to translate by\n * @returns {mat3} out\n */\nmat3.translate = function(out, a, v) {\n    var a00 = a[0], a01 = a[1], a02 = a[2],\n        a10 = a[3], a11 = a[4], a12 = a[5],\n        a20 = a[6], a21 = a[7], a22 = a[8],\n        x = v[0], y = v[1];\n\n    out[0] = a00;\n    out[1] = a01;\n    out[2] = a02;\n\n    out[3] = a10;\n    out[4] = a11;\n    out[5] = a12;\n\n    out[6] = x * a00 + y * a10 + a20;\n    out[7] = x * a01 + y * a11 + a21;\n    out[8] = x * a02 + y * a12 + a22;\n    return out;\n};\n\n/**\n * Rotates a mat3 by the given angle\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat3} out\n */\nmat3.rotate = function (out, a, rad) {\n    var a00 = a[0], a01 = a[1], a02 = a[2],\n        a10 = a[3], a11 = a[4], a12 = a[5],\n        a20 = a[6], a21 = a[7], a22 = a[8],\n\n        s = Math.sin(rad),\n        c = Math.cos(rad);\n\n    out[0] = c * a00 + s * a10;\n    out[1] = c * a01 + s * a11;\n    out[2] = c * a02 + s * a12;\n\n    out[3] = c * a10 - s * a00;\n    out[4] = c * a11 - s * a01;\n    out[5] = c * a12 - s * a02;\n\n    out[6] = a20;\n    out[7] = a21;\n    out[8] = a22;\n    return out;\n};\n\n/**\n * Scales the mat3 by the dimensions in the given vec2\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the matrix to rotate\n * @param {vec2} v the vec2 to scale the matrix by\n * @returns {mat3} out\n **/\nmat3.scale = function(out, a, v) {\n    var x = v[0], y = v[1];\n\n    out[0] = x * a[0];\n    out[1] = x * a[1];\n    out[2] = x * a[2];\n\n    out[3] = y * a[3];\n    out[4] = y * a[4];\n    out[5] = y * a[5];\n\n    out[6] = a[6];\n    out[7] = a[7];\n    out[8] = a[8];\n    return out;\n};\n\n/**\n * Creates a matrix from a vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat3.identity(dest);\n *     mat3.translate(dest, dest, vec);\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {vec2} v Translation vector\n * @returns {mat3} out\n */\nmat3.fromTranslation = function(out, v) {\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 1;\n    out[5] = 0;\n    out[6] = v[0];\n    out[7] = v[1];\n    out[8] = 1;\n    return out;\n}\n\n/**\n * Creates a matrix from a given angle\n * This is equivalent to (but much faster than):\n *\n *     mat3.identity(dest);\n *     mat3.rotate(dest, dest, rad);\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat3} out\n */\nmat3.fromRotation = function(out, rad) {\n    var s = Math.sin(rad), c = Math.cos(rad);\n\n    out[0] = c;\n    out[1] = s;\n    out[2] = 0;\n\n    out[3] = -s;\n    out[4] = c;\n    out[5] = 0;\n\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 1;\n    return out;\n}\n\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat3.identity(dest);\n *     mat3.scale(dest, dest, vec);\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {vec2} v Scaling vector\n * @returns {mat3} out\n */\nmat3.fromScaling = function(out, v) {\n    out[0] = v[0];\n    out[1] = 0;\n    out[2] = 0;\n\n    out[3] = 0;\n    out[4] = v[1];\n    out[5] = 0;\n\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 1;\n    return out;\n}\n\n/**\n * Copies the values from a mat2d into a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {mat2d} a the matrix to copy\n * @returns {mat3} out\n **/\nmat3.fromMat2d = function(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = 0;\n\n    out[3] = a[2];\n    out[4] = a[3];\n    out[5] = 0;\n\n    out[6] = a[4];\n    out[7] = a[5];\n    out[8] = 1;\n    return out;\n};\n\n/**\n* Calculates a 3x3 matrix from the given quaternion\n*\n* @param {mat3} out mat3 receiving operation result\n* @param {quat} q Quaternion to create matrix from\n*\n* @returns {mat3} out\n*/\nmat3.fromQuat = function (out, q) {\n    var x = q[0], y = q[1], z = q[2], w = q[3],\n        x2 = x + x,\n        y2 = y + y,\n        z2 = z + z,\n\n        xx = x * x2,\n        yx = y * x2,\n        yy = y * y2,\n        zx = z * x2,\n        zy = z * y2,\n        zz = z * z2,\n        wx = w * x2,\n        wy = w * y2,\n        wz = w * z2;\n\n    out[0] = 1 - yy - zz;\n    out[3] = yx - wz;\n    out[6] = zx + wy;\n\n    out[1] = yx + wz;\n    out[4] = 1 - xx - zz;\n    out[7] = zy - wx;\n\n    out[2] = zx - wy;\n    out[5] = zy + wx;\n    out[8] = 1 - xx - yy;\n\n    return out;\n};\n\n/**\n* Calculates a 3x3 normal matrix (transpose inverse) from the 4x4 matrix\n*\n* @param {mat3} out mat3 receiving operation result\n* @param {mat4} a Mat4 to derive the normal matrix from\n*\n* @returns {mat3} out\n*/\nmat3.normalFromMat4 = function (out, a) {\n    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3],\n        a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7],\n        a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11],\n        a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15],\n\n        b00 = a00 * a11 - a01 * a10,\n        b01 = a00 * a12 - a02 * a10,\n        b02 = a00 * a13 - a03 * a10,\n        b03 = a01 * a12 - a02 * a11,\n        b04 = a01 * a13 - a03 * a11,\n        b05 = a02 * a13 - a03 * a12,\n        b06 = a20 * a31 - a21 * a30,\n        b07 = a20 * a32 - a22 * a30,\n        b08 = a20 * a33 - a23 * a30,\n        b09 = a21 * a32 - a22 * a31,\n        b10 = a21 * a33 - a23 * a31,\n        b11 = a22 * a33 - a23 * a32,\n\n        // Calculate the determinant\n        det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n    if (!det) { \n        return null; \n    }\n    det = 1.0 / det;\n\n    out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n    out[1] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n    out[2] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n\n    out[3] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n    out[4] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n    out[5] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n\n    out[6] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n    out[7] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n    out[8] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n\n    return out;\n};\n\n/**\n * Returns a string representation of a mat3\n *\n * @param {mat3} mat matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\nmat3.str = function (a) {\n    return 'mat3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + \n                    a[3] + ', ' + a[4] + ', ' + a[5] + ', ' + \n                    a[6] + ', ' + a[7] + ', ' + a[8] + ')';\n};\n\n/**\n * Returns Frobenius norm of a mat3\n *\n * @param {mat3} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\nmat3.frob = function (a) {\n    return(Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + Math.pow(a[6], 2) + Math.pow(a[7], 2) + Math.pow(a[8], 2)))\n};\n\n\nmodule.exports = mat3;\n\n},{\"./common.js\":2}],6:[function(_dereq_,module,exports){\n/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE. */\n\nvar glMatrix = _dereq_(\"./common.js\");\n\n/**\n * @class 4x4 Matrix\n * @name mat4\n */\nvar mat4 = {};\n\n/**\n * Creates a new identity mat4\n *\n * @returns {mat4} a new 4x4 matrix\n */\nmat4.create = function() {\n    var out = new glMatrix.ARRAY_TYPE(16);\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = 1;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[10] = 1;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n    out[15] = 1;\n    return out;\n};\n\n/**\n * Creates a new mat4 initialized with values from an existing matrix\n *\n * @param {mat4} a matrix to clone\n * @returns {mat4} a new 4x4 matrix\n */\nmat4.clone = function(a) {\n    var out = new glMatrix.ARRAY_TYPE(16);\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[8] = a[8];\n    out[9] = a[9];\n    out[10] = a[10];\n    out[11] = a[11];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n    return out;\n};\n\n/**\n * Copy the values from one mat4 to another\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nmat4.copy = function(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[8] = a[8];\n    out[9] = a[9];\n    out[10] = a[10];\n    out[11] = a[11];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n    return out;\n};\n\n/**\n * Set a mat4 to the identity matrix\n *\n * @param {mat4} out the receiving matrix\n * @returns {mat4} out\n */\nmat4.identity = function(out) {\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = 1;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[10] = 1;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n    out[15] = 1;\n    return out;\n};\n\n/**\n * Transpose the values of a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nmat4.transpose = function(out, a) {\n    // If we are transposing ourselves we can skip a few steps but have to cache some values\n    if (out === a) {\n        var a01 = a[1], a02 = a[2], a03 = a[3],\n            a12 = a[6], a13 = a[7],\n            a23 = a[11];\n\n        out[1] = a[4];\n        out[2] = a[8];\n        out[3] = a[12];\n        out[4] = a01;\n        out[6] = a[9];\n        out[7] = a[13];\n        out[8] = a02;\n        out[9] = a12;\n        out[11] = a[14];\n        out[12] = a03;\n        out[13] = a13;\n        out[14] = a23;\n    } else {\n        out[0] = a[0];\n        out[1] = a[4];\n        out[2] = a[8];\n        out[3] = a[12];\n        out[4] = a[1];\n        out[5] = a[5];\n        out[6] = a[9];\n        out[7] = a[13];\n        out[8] = a[2];\n        out[9] = a[6];\n        out[10] = a[10];\n        out[11] = a[14];\n        out[12] = a[3];\n        out[13] = a[7];\n        out[14] = a[11];\n        out[15] = a[15];\n    }\n    \n    return out;\n};\n\n/**\n * Inverts a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nmat4.invert = function(out, a) {\n    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3],\n        a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7],\n        a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11],\n        a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15],\n\n        b00 = a00 * a11 - a01 * a10,\n        b01 = a00 * a12 - a02 * a10,\n        b02 = a00 * a13 - a03 * a10,\n        b03 = a01 * a12 - a02 * a11,\n        b04 = a01 * a13 - a03 * a11,\n        b05 = a02 * a13 - a03 * a12,\n        b06 = a20 * a31 - a21 * a30,\n        b07 = a20 * a32 - a22 * a30,\n        b08 = a20 * a33 - a23 * a30,\n        b09 = a21 * a32 - a22 * a31,\n        b10 = a21 * a33 - a23 * a31,\n        b11 = a22 * a33 - a23 * a32,\n\n        // Calculate the determinant\n        det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n    if (!det) { \n        return null; \n    }\n    det = 1.0 / det;\n\n    out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n    out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n    out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n    out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\n    out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n    out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n    out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n    out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\n    out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n    out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n    out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n    out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\n    out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\n    out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\n    out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\n    out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\n\n    return out;\n};\n\n/**\n * Calculates the adjugate of a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nmat4.adjoint = function(out, a) {\n    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3],\n        a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7],\n        a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11],\n        a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];\n\n    out[0]  =  (a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22));\n    out[1]  = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));\n    out[2]  =  (a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12));\n    out[3]  = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));\n    out[4]  = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));\n    out[5]  =  (a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22));\n    out[6]  = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));\n    out[7]  =  (a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12));\n    out[8]  =  (a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21));\n    out[9]  = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));\n    out[10] =  (a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11));\n    out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));\n    out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));\n    out[13] =  (a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21));\n    out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));\n    out[15] =  (a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11));\n    return out;\n};\n\n/**\n * Calculates the determinant of a mat4\n *\n * @param {mat4} a the source matrix\n * @returns {Number} determinant of a\n */\nmat4.determinant = function (a) {\n    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3],\n        a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7],\n        a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11],\n        a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15],\n\n        b00 = a00 * a11 - a01 * a10,\n        b01 = a00 * a12 - a02 * a10,\n        b02 = a00 * a13 - a03 * a10,\n        b03 = a01 * a12 - a02 * a11,\n        b04 = a01 * a13 - a03 * a11,\n        b05 = a02 * a13 - a03 * a12,\n        b06 = a20 * a31 - a21 * a30,\n        b07 = a20 * a32 - a22 * a30,\n        b08 = a20 * a33 - a23 * a30,\n        b09 = a21 * a32 - a22 * a31,\n        b10 = a21 * a33 - a23 * a31,\n        b11 = a22 * a33 - a23 * a32;\n\n    // Calculate the determinant\n    return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n};\n\n/**\n * Multiplies two mat4's\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the first operand\n * @param {mat4} b the second operand\n * @returns {mat4} out\n */\nmat4.multiply = function (out, a, b) {\n    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3],\n        a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7],\n        a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11],\n        a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];\n\n    // Cache only the current line of the second matrix\n    var b0  = b[0], b1 = b[1], b2 = b[2], b3 = b[3];  \n    out[0] = b0*a00 + b1*a10 + b2*a20 + b3*a30;\n    out[1] = b0*a01 + b1*a11 + b2*a21 + b3*a31;\n    out[2] = b0*a02 + b1*a12 + b2*a22 + b3*a32;\n    out[3] = b0*a03 + b1*a13 + b2*a23 + b3*a33;\n\n    b0 = b[4]; b1 = b[5]; b2 = b[6]; b3 = b[7];\n    out[4] = b0*a00 + b1*a10 + b2*a20 + b3*a30;\n    out[5] = b0*a01 + b1*a11 + b2*a21 + b3*a31;\n    out[6] = b0*a02 + b1*a12 + b2*a22 + b3*a32;\n    out[7] = b0*a03 + b1*a13 + b2*a23 + b3*a33;\n\n    b0 = b[8]; b1 = b[9]; b2 = b[10]; b3 = b[11];\n    out[8] = b0*a00 + b1*a10 + b2*a20 + b3*a30;\n    out[9] = b0*a01 + b1*a11 + b2*a21 + b3*a31;\n    out[10] = b0*a02 + b1*a12 + b2*a22 + b3*a32;\n    out[11] = b0*a03 + b1*a13 + b2*a23 + b3*a33;\n\n    b0 = b[12]; b1 = b[13]; b2 = b[14]; b3 = b[15];\n    out[12] = b0*a00 + b1*a10 + b2*a20 + b3*a30;\n    out[13] = b0*a01 + b1*a11 + b2*a21 + b3*a31;\n    out[14] = b0*a02 + b1*a12 + b2*a22 + b3*a32;\n    out[15] = b0*a03 + b1*a13 + b2*a23 + b3*a33;\n    return out;\n};\n\n/**\n * Alias for {@link mat4.multiply}\n * @function\n */\nmat4.mul = mat4.multiply;\n\n/**\n * Translate a mat4 by the given vector\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to translate\n * @param {vec3} v vector to translate by\n * @returns {mat4} out\n */\nmat4.translate = function (out, a, v) {\n    var x = v[0], y = v[1], z = v[2],\n        a00, a01, a02, a03,\n        a10, a11, a12, a13,\n        a20, a21, a22, a23;\n\n    if (a === out) {\n        out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];\n        out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];\n        out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];\n        out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];\n    } else {\n        a00 = a[0]; a01 = a[1]; a02 = a[2]; a03 = a[3];\n        a10 = a[4]; a11 = a[5]; a12 = a[6]; a13 = a[7];\n        a20 = a[8]; a21 = a[9]; a22 = a[10]; a23 = a[11];\n\n        out[0] = a00; out[1] = a01; out[2] = a02; out[3] = a03;\n        out[4] = a10; out[5] = a11; out[6] = a12; out[7] = a13;\n        out[8] = a20; out[9] = a21; out[10] = a22; out[11] = a23;\n\n        out[12] = a00 * x + a10 * y + a20 * z + a[12];\n        out[13] = a01 * x + a11 * y + a21 * z + a[13];\n        out[14] = a02 * x + a12 * y + a22 * z + a[14];\n        out[15] = a03 * x + a13 * y + a23 * z + a[15];\n    }\n\n    return out;\n};\n\n/**\n * Scales the mat4 by the dimensions in the given vec3\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to scale\n * @param {vec3} v the vec3 to scale the matrix by\n * @returns {mat4} out\n **/\nmat4.scale = function(out, a, v) {\n    var x = v[0], y = v[1], z = v[2];\n\n    out[0] = a[0] * x;\n    out[1] = a[1] * x;\n    out[2] = a[2] * x;\n    out[3] = a[3] * x;\n    out[4] = a[4] * y;\n    out[5] = a[5] * y;\n    out[6] = a[6] * y;\n    out[7] = a[7] * y;\n    out[8] = a[8] * z;\n    out[9] = a[9] * z;\n    out[10] = a[10] * z;\n    out[11] = a[11] * z;\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n    return out;\n};\n\n/**\n * Rotates a mat4 by the given angle around the given axis\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @param {vec3} axis the axis to rotate around\n * @returns {mat4} out\n */\nmat4.rotate = function (out, a, rad, axis) {\n    var x = axis[0], y = axis[1], z = axis[2],\n        len = Math.sqrt(x * x + y * y + z * z),\n        s, c, t,\n        a00, a01, a02, a03,\n        a10, a11, a12, a13,\n        a20, a21, a22, a23,\n        b00, b01, b02,\n        b10, b11, b12,\n        b20, b21, b22;\n\n    if (Math.abs(len) < glMatrix.EPSILON) { return null; }\n    \n    len = 1 / len;\n    x *= len;\n    y *= len;\n    z *= len;\n\n    s = Math.sin(rad);\n    c = Math.cos(rad);\n    t = 1 - c;\n\n    a00 = a[0]; a01 = a[1]; a02 = a[2]; a03 = a[3];\n    a10 = a[4]; a11 = a[5]; a12 = a[6]; a13 = a[7];\n    a20 = a[8]; a21 = a[9]; a22 = a[10]; a23 = a[11];\n\n    // Construct the elements of the rotation matrix\n    b00 = x * x * t + c; b01 = y * x * t + z * s; b02 = z * x * t - y * s;\n    b10 = x * y * t - z * s; b11 = y * y * t + c; b12 = z * y * t + x * s;\n    b20 = x * z * t + y * s; b21 = y * z * t - x * s; b22 = z * z * t + c;\n\n    // Perform rotation-specific matrix multiplication\n    out[0] = a00 * b00 + a10 * b01 + a20 * b02;\n    out[1] = a01 * b00 + a11 * b01 + a21 * b02;\n    out[2] = a02 * b00 + a12 * b01 + a22 * b02;\n    out[3] = a03 * b00 + a13 * b01 + a23 * b02;\n    out[4] = a00 * b10 + a10 * b11 + a20 * b12;\n    out[5] = a01 * b10 + a11 * b11 + a21 * b12;\n    out[6] = a02 * b10 + a12 * b11 + a22 * b12;\n    out[7] = a03 * b10 + a13 * b11 + a23 * b12;\n    out[8] = a00 * b20 + a10 * b21 + a20 * b22;\n    out[9] = a01 * b20 + a11 * b21 + a21 * b22;\n    out[10] = a02 * b20 + a12 * b21 + a22 * b22;\n    out[11] = a03 * b20 + a13 * b21 + a23 * b22;\n\n    if (a !== out) { // If the source and destination differ, copy the unchanged last row\n        out[12] = a[12];\n        out[13] = a[13];\n        out[14] = a[14];\n        out[15] = a[15];\n    }\n    return out;\n};\n\n/**\n * Rotates a matrix by the given angle around the X axis\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nmat4.rotateX = function (out, a, rad) {\n    var s = Math.sin(rad),\n        c = Math.cos(rad),\n        a10 = a[4],\n        a11 = a[5],\n        a12 = a[6],\n        a13 = a[7],\n        a20 = a[8],\n        a21 = a[9],\n        a22 = a[10],\n        a23 = a[11];\n\n    if (a !== out) { // If the source and destination differ, copy the unchanged rows\n        out[0]  = a[0];\n        out[1]  = a[1];\n        out[2]  = a[2];\n        out[3]  = a[3];\n        out[12] = a[12];\n        out[13] = a[13];\n        out[14] = a[14];\n        out[15] = a[15];\n    }\n\n    // Perform axis-specific matrix multiplication\n    out[4] = a10 * c + a20 * s;\n    out[5] = a11 * c + a21 * s;\n    out[6] = a12 * c + a22 * s;\n    out[7] = a13 * c + a23 * s;\n    out[8] = a20 * c - a10 * s;\n    out[9] = a21 * c - a11 * s;\n    out[10] = a22 * c - a12 * s;\n    out[11] = a23 * c - a13 * s;\n    return out;\n};\n\n/**\n * Rotates a matrix by the given angle around the Y axis\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nmat4.rotateY = function (out, a, rad) {\n    var s = Math.sin(rad),\n        c = Math.cos(rad),\n        a00 = a[0],\n        a01 = a[1],\n        a02 = a[2],\n        a03 = a[3],\n        a20 = a[8],\n        a21 = a[9],\n        a22 = a[10],\n        a23 = a[11];\n\n    if (a !== out) { // If the source and destination differ, copy the unchanged rows\n        out[4]  = a[4];\n        out[5]  = a[5];\n        out[6]  = a[6];\n        out[7]  = a[7];\n        out[12] = a[12];\n        out[13] = a[13];\n        out[14] = a[14];\n        out[15] = a[15];\n    }\n\n    // Perform axis-specific matrix multiplication\n    out[0] = a00 * c - a20 * s;\n    out[1] = a01 * c - a21 * s;\n    out[2] = a02 * c - a22 * s;\n    out[3] = a03 * c - a23 * s;\n    out[8] = a00 * s + a20 * c;\n    out[9] = a01 * s + a21 * c;\n    out[10] = a02 * s + a22 * c;\n    out[11] = a03 * s + a23 * c;\n    return out;\n};\n\n/**\n * Rotates a matrix by the given angle around the Z axis\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nmat4.rotateZ = function (out, a, rad) {\n    var s = Math.sin(rad),\n        c = Math.cos(rad),\n        a00 = a[0],\n        a01 = a[1],\n        a02 = a[2],\n        a03 = a[3],\n        a10 = a[4],\n        a11 = a[5],\n        a12 = a[6],\n        a13 = a[7];\n\n    if (a !== out) { // If the source and destination differ, copy the unchanged last row\n        out[8]  = a[8];\n        out[9]  = a[9];\n        out[10] = a[10];\n        out[11] = a[11];\n        out[12] = a[12];\n        out[13] = a[13];\n        out[14] = a[14];\n        out[15] = a[15];\n    }\n\n    // Perform axis-specific matrix multiplication\n    out[0] = a00 * c + a10 * s;\n    out[1] = a01 * c + a11 * s;\n    out[2] = a02 * c + a12 * s;\n    out[3] = a03 * c + a13 * s;\n    out[4] = a10 * c - a00 * s;\n    out[5] = a11 * c - a01 * s;\n    out[6] = a12 * c - a02 * s;\n    out[7] = a13 * c - a03 * s;\n    return out;\n};\n\n/**\n * Creates a matrix from a vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, dest, vec);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {vec3} v Translation vector\n * @returns {mat4} out\n */\nmat4.fromTranslation = function(out, v) {\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = 1;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[10] = 1;\n    out[11] = 0;\n    out[12] = v[0];\n    out[13] = v[1];\n    out[14] = v[2];\n    out[15] = 1;\n    return out;\n}\n\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.scale(dest, dest, vec);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {vec3} v Scaling vector\n * @returns {mat4} out\n */\nmat4.fromScaling = function(out, v) {\n    out[0] = v[0];\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = v[1];\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[10] = v[2];\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n    out[15] = 1;\n    return out;\n}\n\n/**\n * Creates a matrix from a given angle around a given axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotate(dest, dest, rad, axis);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @param {vec3} axis the axis to rotate around\n * @returns {mat4} out\n */\nmat4.fromRotation = function(out, rad, axis) {\n    var x = axis[0], y = axis[1], z = axis[2],\n        len = Math.sqrt(x * x + y * y + z * z),\n        s, c, t;\n    \n    if (Math.abs(len) < glMatrix.EPSILON) { return null; }\n    \n    len = 1 / len;\n    x *= len;\n    y *= len;\n    z *= len;\n    \n    s = Math.sin(rad);\n    c = Math.cos(rad);\n    t = 1 - c;\n    \n    // Perform rotation-specific matrix multiplication\n    out[0] = x * x * t + c;\n    out[1] = y * x * t + z * s;\n    out[2] = z * x * t - y * s;\n    out[3] = 0;\n    out[4] = x * y * t - z * s;\n    out[5] = y * y * t + c;\n    out[6] = z * y * t + x * s;\n    out[7] = 0;\n    out[8] = x * z * t + y * s;\n    out[9] = y * z * t - x * s;\n    out[10] = z * z * t + c;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n    out[15] = 1;\n    return out;\n}\n\n/**\n * Creates a matrix from the given angle around the X axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateX(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nmat4.fromXRotation = function(out, rad) {\n    var s = Math.sin(rad),\n        c = Math.cos(rad);\n    \n    // Perform axis-specific matrix multiplication\n    out[0]  = 1;\n    out[1]  = 0;\n    out[2]  = 0;\n    out[3]  = 0;\n    out[4] = 0;\n    out[5] = c;\n    out[6] = s;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = -s;\n    out[10] = c;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n    out[15] = 1;\n    return out;\n}\n\n/**\n * Creates a matrix from the given angle around the Y axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateY(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nmat4.fromYRotation = function(out, rad) {\n    var s = Math.sin(rad),\n        c = Math.cos(rad);\n    \n    // Perform axis-specific matrix multiplication\n    out[0]  = c;\n    out[1]  = 0;\n    out[2]  = -s;\n    out[3]  = 0;\n    out[4] = 0;\n    out[5] = 1;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = s;\n    out[9] = 0;\n    out[10] = c;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n    out[15] = 1;\n    return out;\n}\n\n/**\n * Creates a matrix from the given angle around the Z axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateZ(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nmat4.fromZRotation = function(out, rad) {\n    var s = Math.sin(rad),\n        c = Math.cos(rad);\n    \n    // Perform axis-specific matrix multiplication\n    out[0]  = c;\n    out[1]  = s;\n    out[2]  = 0;\n    out[3]  = 0;\n    out[4] = -s;\n    out[5] = c;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[10] = 1;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n    out[15] = 1;\n    return out;\n}\n\n/**\n * Creates a matrix from a quaternion rotation and vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     var quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {vec3} v Translation vector\n * @returns {mat4} out\n */\nmat4.fromRotationTranslation = function (out, q, v) {\n    // Quaternion math\n    var x = q[0], y = q[1], z = q[2], w = q[3],\n        x2 = x + x,\n        y2 = y + y,\n        z2 = z + z,\n\n        xx = x * x2,\n        xy = x * y2,\n        xz = x * z2,\n        yy = y * y2,\n        yz = y * z2,\n        zz = z * z2,\n        wx = w * x2,\n        wy = w * y2,\n        wz = w * z2;\n\n    out[0] = 1 - (yy + zz);\n    out[1] = xy + wz;\n    out[2] = xz - wy;\n    out[3] = 0;\n    out[4] = xy - wz;\n    out[5] = 1 - (xx + zz);\n    out[6] = yz + wx;\n    out[7] = 0;\n    out[8] = xz + wy;\n    out[9] = yz - wx;\n    out[10] = 1 - (xx + yy);\n    out[11] = 0;\n    out[12] = v[0];\n    out[13] = v[1];\n    out[14] = v[2];\n    out[15] = 1;\n    \n    return out;\n};\n\n/**\n * Creates a matrix from a quaternion rotation, vector translation and vector scale\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     var quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *     mat4.scale(dest, scale)\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {vec3} v Translation vector\n * @param {vec3} s Scaling vector\n * @returns {mat4} out\n */\nmat4.fromRotationTranslationScale = function (out, q, v, s) {\n    // Quaternion math\n    var x = q[0], y = q[1], z = q[2], w = q[3],\n        x2 = x + x,\n        y2 = y + y,\n        z2 = z + z,\n\n        xx = x * x2,\n        xy = x * y2,\n        xz = x * z2,\n        yy = y * y2,\n        yz = y * z2,\n        zz = z * z2,\n        wx = w * x2,\n        wy = w * y2,\n        wz = w * z2,\n        sx = s[0],\n        sy = s[1],\n        sz = s[2];\n\n    out[0] = (1 - (yy + zz)) * sx;\n    out[1] = (xy + wz) * sx;\n    out[2] = (xz - wy) * sx;\n    out[3] = 0;\n    out[4] = (xy - wz) * sy;\n    out[5] = (1 - (xx + zz)) * sy;\n    out[6] = (yz + wx) * sy;\n    out[7] = 0;\n    out[8] = (xz + wy) * sz;\n    out[9] = (yz - wx) * sz;\n    out[10] = (1 - (xx + yy)) * sz;\n    out[11] = 0;\n    out[12] = v[0];\n    out[13] = v[1];\n    out[14] = v[2];\n    out[15] = 1;\n    \n    return out;\n};\n\n/**\n * Creates a matrix from a quaternion rotation, vector translation and vector scale, rotating and scaling around the given origin\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     mat4.translate(dest, origin);\n *     var quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *     mat4.scale(dest, scale)\n *     mat4.translate(dest, negativeOrigin);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {vec3} v Translation vector\n * @param {vec3} s Scaling vector\n * @param {vec3} o The origin vector around which to scale and rotate\n * @returns {mat4} out\n */\nmat4.fromRotationTranslationScaleOrigin = function (out, q, v, s, o) {\n  // Quaternion math\n  var x = q[0], y = q[1], z = q[2], w = q[3],\n      x2 = x + x,\n      y2 = y + y,\n      z2 = z + z,\n\n      xx = x * x2,\n      xy = x * y2,\n      xz = x * z2,\n      yy = y * y2,\n      yz = y * z2,\n      zz = z * z2,\n      wx = w * x2,\n      wy = w * y2,\n      wz = w * z2,\n      \n      sx = s[0],\n      sy = s[1],\n      sz = s[2],\n\n      ox = o[0],\n      oy = o[1],\n      oz = o[2];\n      \n  out[0] = (1 - (yy + zz)) * sx;\n  out[1] = (xy + wz) * sx;\n  out[2] = (xz - wy) * sx;\n  out[3] = 0;\n  out[4] = (xy - wz) * sy;\n  out[5] = (1 - (xx + zz)) * sy;\n  out[6] = (yz + wx) * sy;\n  out[7] = 0;\n  out[8] = (xz + wy) * sz;\n  out[9] = (yz - wx) * sz;\n  out[10] = (1 - (xx + yy)) * sz;\n  out[11] = 0;\n  out[12] = v[0] + ox - (out[0] * ox + out[4] * oy + out[8] * oz);\n  out[13] = v[1] + oy - (out[1] * ox + out[5] * oy + out[9] * oz);\n  out[14] = v[2] + oz - (out[2] * ox + out[6] * oy + out[10] * oz);\n  out[15] = 1;\n        \n  return out;\n};\n\nmat4.fromQuat = function (out, q) {\n    var x = q[0], y = q[1], z = q[2], w = q[3],\n        x2 = x + x,\n        y2 = y + y,\n        z2 = z + z,\n\n        xx = x * x2,\n        yx = y * x2,\n        yy = y * y2,\n        zx = z * x2,\n        zy = z * y2,\n        zz = z * z2,\n        wx = w * x2,\n        wy = w * y2,\n        wz = w * z2;\n\n    out[0] = 1 - yy - zz;\n    out[1] = yx + wz;\n    out[2] = zx - wy;\n    out[3] = 0;\n\n    out[4] = yx - wz;\n    out[5] = 1 - xx - zz;\n    out[6] = zy + wx;\n    out[7] = 0;\n\n    out[8] = zx + wy;\n    out[9] = zy - wx;\n    out[10] = 1 - xx - yy;\n    out[11] = 0;\n\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n    out[15] = 1;\n\n    return out;\n};\n\n/**\n * Generates a frustum matrix with the given bounds\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {Number} left Left bound of the frustum\n * @param {Number} right Right bound of the frustum\n * @param {Number} bottom Bottom bound of the frustum\n * @param {Number} top Top bound of the frustum\n * @param {Number} near Near bound of the frustum\n * @param {Number} far Far bound of the frustum\n * @returns {mat4} out\n */\nmat4.frustum = function (out, left, right, bottom, top, near, far) {\n    var rl = 1 / (right - left),\n        tb = 1 / (top - bottom),\n        nf = 1 / (near - far);\n    out[0] = (near * 2) * rl;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = (near * 2) * tb;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = (right + left) * rl;\n    out[9] = (top + bottom) * tb;\n    out[10] = (far + near) * nf;\n    out[11] = -1;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = (far * near * 2) * nf;\n    out[15] = 0;\n    return out;\n};\n\n/**\n * Generates a perspective projection matrix with the given bounds\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} fovy Vertical field of view in radians\n * @param {number} aspect Aspect ratio. typically viewport width/height\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\nmat4.perspective = function (out, fovy, aspect, near, far) {\n    var f = 1.0 / Math.tan(fovy / 2),\n        nf = 1 / (near - far);\n    out[0] = f / aspect;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = f;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[10] = (far + near) * nf;\n    out[11] = -1;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = (2 * far * near) * nf;\n    out[15] = 0;\n    return out;\n};\n\n/**\n * Generates a perspective projection matrix with the given field of view.\n * This is primarily useful for generating projection matrices to be used\n * with the still experiemental WebVR API.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} fov Object containing the following values: upDegrees, downDegrees, leftDegrees, rightDegrees\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\nmat4.perspectiveFromFieldOfView = function (out, fov, near, far) {\n    var upTan = Math.tan(fov.upDegrees * Math.PI/180.0),\n        downTan = Math.tan(fov.downDegrees * Math.PI/180.0),\n        leftTan = Math.tan(fov.leftDegrees * Math.PI/180.0),\n        rightTan = Math.tan(fov.rightDegrees * Math.PI/180.0),\n        xScale = 2.0 / (leftTan + rightTan),\n        yScale = 2.0 / (upTan + downTan);\n\n    out[0] = xScale;\n    out[1] = 0.0;\n    out[2] = 0.0;\n    out[3] = 0.0;\n    out[4] = 0.0;\n    out[5] = yScale;\n    out[6] = 0.0;\n    out[7] = 0.0;\n    out[8] = -((leftTan - rightTan) * xScale * 0.5);\n    out[9] = ((upTan - downTan) * yScale * 0.5);\n    out[10] = far / (near - far);\n    out[11] = -1.0;\n    out[12] = 0.0;\n    out[13] = 0.0;\n    out[14] = (far * near) / (near - far);\n    out[15] = 0.0;\n    return out;\n}\n\n/**\n * Generates a orthogonal projection matrix with the given bounds\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} left Left bound of the frustum\n * @param {number} right Right bound of the frustum\n * @param {number} bottom Bottom bound of the frustum\n * @param {number} top Top bound of the frustum\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\nmat4.ortho = function (out, left, right, bottom, top, near, far) {\n    var lr = 1 / (left - right),\n        bt = 1 / (bottom - top),\n        nf = 1 / (near - far);\n    out[0] = -2 * lr;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = -2 * bt;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[10] = 2 * nf;\n    out[11] = 0;\n    out[12] = (left + right) * lr;\n    out[13] = (top + bottom) * bt;\n    out[14] = (far + near) * nf;\n    out[15] = 1;\n    return out;\n};\n\n/**\n * Generates a look-at matrix with the given eye position, focal point, and up axis\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {vec3} eye Position of the viewer\n * @param {vec3} center Point the viewer is looking at\n * @param {vec3} up vec3 pointing up\n * @returns {mat4} out\n */\nmat4.lookAt = function (out, eye, center, up) {\n    var x0, x1, x2, y0, y1, y2, z0, z1, z2, len,\n        eyex = eye[0],\n        eyey = eye[1],\n        eyez = eye[2],\n        upx = up[0],\n        upy = up[1],\n        upz = up[2],\n        centerx = center[0],\n        centery = center[1],\n        centerz = center[2];\n\n    if (Math.abs(eyex - centerx) < glMatrix.EPSILON &&\n        Math.abs(eyey - centery) < glMatrix.EPSILON &&\n        Math.abs(eyez - centerz) < glMatrix.EPSILON) {\n        return mat4.identity(out);\n    }\n\n    z0 = eyex - centerx;\n    z1 = eyey - centery;\n    z2 = eyez - centerz;\n\n    len = 1 / Math.sqrt(z0 * z0 + z1 * z1 + z2 * z2);\n    z0 *= len;\n    z1 *= len;\n    z2 *= len;\n\n    x0 = upy * z2 - upz * z1;\n    x1 = upz * z0 - upx * z2;\n    x2 = upx * z1 - upy * z0;\n    len = Math.sqrt(x0 * x0 + x1 * x1 + x2 * x2);\n    if (!len) {\n        x0 = 0;\n        x1 = 0;\n        x2 = 0;\n    } else {\n        len = 1 / len;\n        x0 *= len;\n        x1 *= len;\n        x2 *= len;\n    }\n\n    y0 = z1 * x2 - z2 * x1;\n    y1 = z2 * x0 - z0 * x2;\n    y2 = z0 * x1 - z1 * x0;\n\n    len = Math.sqrt(y0 * y0 + y1 * y1 + y2 * y2);\n    if (!len) {\n        y0 = 0;\n        y1 = 0;\n        y2 = 0;\n    } else {\n        len = 1 / len;\n        y0 *= len;\n        y1 *= len;\n        y2 *= len;\n    }\n\n    out[0] = x0;\n    out[1] = y0;\n    out[2] = z0;\n    out[3] = 0;\n    out[4] = x1;\n    out[5] = y1;\n    out[6] = z1;\n    out[7] = 0;\n    out[8] = x2;\n    out[9] = y2;\n    out[10] = z2;\n    out[11] = 0;\n    out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);\n    out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);\n    out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);\n    out[15] = 1;\n\n    return out;\n};\n\n/**\n * Returns a string representation of a mat4\n *\n * @param {mat4} mat matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\nmat4.str = function (a) {\n    return 'mat4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' +\n                    a[4] + ', ' + a[5] + ', ' + a[6] + ', ' + a[7] + ', ' +\n                    a[8] + ', ' + a[9] + ', ' + a[10] + ', ' + a[11] + ', ' + \n                    a[12] + ', ' + a[13] + ', ' + a[14] + ', ' + a[15] + ')';\n};\n\n/**\n * Returns Frobenius norm of a mat4\n *\n * @param {mat4} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\nmat4.frob = function (a) {\n    return(Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + Math.pow(a[6], 2) + Math.pow(a[7], 2) + Math.pow(a[8], 2) + Math.pow(a[9], 2) + Math.pow(a[10], 2) + Math.pow(a[11], 2) + Math.pow(a[12], 2) + Math.pow(a[13], 2) + Math.pow(a[14], 2) + Math.pow(a[15], 2) ))\n};\n\n\nmodule.exports = mat4;\n\n},{\"./common.js\":2}],7:[function(_dereq_,module,exports){\n/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE. */\n\nvar glMatrix = _dereq_(\"./common.js\");\nvar mat3 = _dereq_(\"./mat3.js\");\nvar vec3 = _dereq_(\"./vec3.js\");\nvar vec4 = _dereq_(\"./vec4.js\");\n\n/**\n * @class Quaternion\n * @name quat\n */\nvar quat = {};\n\n/**\n * Creates a new identity quat\n *\n * @returns {quat} a new quaternion\n */\nquat.create = function() {\n    var out = new glMatrix.ARRAY_TYPE(4);\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 1;\n    return out;\n};\n\n/**\n * Sets a quaternion to represent the shortest rotation from one\n * vector to another.\n *\n * Both vectors are assumed to be unit length.\n *\n * @param {quat} out the receiving quaternion.\n * @param {vec3} a the initial vector\n * @param {vec3} b the destination vector\n * @returns {quat} out\n */\nquat.rotationTo = (function() {\n    var tmpvec3 = vec3.create();\n    var xUnitVec3 = vec3.fromValues(1,0,0);\n    var yUnitVec3 = vec3.fromValues(0,1,0);\n\n    return function(out, a, b) {\n        var dot = vec3.dot(a, b);\n        if (dot < -0.999999) {\n            vec3.cross(tmpvec3, xUnitVec3, a);\n            if (vec3.length(tmpvec3) < 0.000001)\n                vec3.cross(tmpvec3, yUnitVec3, a);\n            vec3.normalize(tmpvec3, tmpvec3);\n            quat.setAxisAngle(out, tmpvec3, Math.PI);\n            return out;\n        } else if (dot > 0.999999) {\n            out[0] = 0;\n            out[1] = 0;\n            out[2] = 0;\n            out[3] = 1;\n            return out;\n        } else {\n            vec3.cross(tmpvec3, a, b);\n            out[0] = tmpvec3[0];\n            out[1] = tmpvec3[1];\n            out[2] = tmpvec3[2];\n            out[3] = 1 + dot;\n            return quat.normalize(out, out);\n        }\n    };\n})();\n\n/**\n * Sets the specified quaternion with values corresponding to the given\n * axes. Each axis is a vec3 and is expected to be unit length and\n * perpendicular to all other specified axes.\n *\n * @param {vec3} view  the vector representing the viewing direction\n * @param {vec3} right the vector representing the local \"right\" direction\n * @param {vec3} up    the vector representing the local \"up\" direction\n * @returns {quat} out\n */\nquat.setAxes = (function() {\n    var matr = mat3.create();\n\n    return function(out, view, right, up) {\n        matr[0] = right[0];\n        matr[3] = right[1];\n        matr[6] = right[2];\n\n        matr[1] = up[0];\n        matr[4] = up[1];\n        matr[7] = up[2];\n\n        matr[2] = -view[0];\n        matr[5] = -view[1];\n        matr[8] = -view[2];\n\n        return quat.normalize(out, quat.fromMat3(out, matr));\n    };\n})();\n\n/**\n * Creates a new quat initialized with values from an existing quaternion\n *\n * @param {quat} a quaternion to clone\n * @returns {quat} a new quaternion\n * @function\n */\nquat.clone = vec4.clone;\n\n/**\n * Creates a new quat initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {quat} a new quaternion\n * @function\n */\nquat.fromValues = vec4.fromValues;\n\n/**\n * Copy the values from one quat to another\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the source quaternion\n * @returns {quat} out\n * @function\n */\nquat.copy = vec4.copy;\n\n/**\n * Set the components of a quat to the given values\n *\n * @param {quat} out the receiving quaternion\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {quat} out\n * @function\n */\nquat.set = vec4.set;\n\n/**\n * Set a quat to the identity quaternion\n *\n * @param {quat} out the receiving quaternion\n * @returns {quat} out\n */\nquat.identity = function(out) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 1;\n    return out;\n};\n\n/**\n * Sets a quat from the given angle and rotation axis,\n * then returns it.\n *\n * @param {quat} out the receiving quaternion\n * @param {vec3} axis the axis around which to rotate\n * @param {Number} rad the angle in radians\n * @returns {quat} out\n **/\nquat.setAxisAngle = function(out, axis, rad) {\n    rad = rad * 0.5;\n    var s = Math.sin(rad);\n    out[0] = s * axis[0];\n    out[1] = s * axis[1];\n    out[2] = s * axis[2];\n    out[3] = Math.cos(rad);\n    return out;\n};\n\n/**\n * Adds two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @returns {quat} out\n * @function\n */\nquat.add = vec4.add;\n\n/**\n * Multiplies two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @returns {quat} out\n */\nquat.multiply = function(out, a, b) {\n    var ax = a[0], ay = a[1], az = a[2], aw = a[3],\n        bx = b[0], by = b[1], bz = b[2], bw = b[3];\n\n    out[0] = ax * bw + aw * bx + ay * bz - az * by;\n    out[1] = ay * bw + aw * by + az * bx - ax * bz;\n    out[2] = az * bw + aw * bz + ax * by - ay * bx;\n    out[3] = aw * bw - ax * bx - ay * by - az * bz;\n    return out;\n};\n\n/**\n * Alias for {@link quat.multiply}\n * @function\n */\nquat.mul = quat.multiply;\n\n/**\n * Scales a quat by a scalar number\n *\n * @param {quat} out the receiving vector\n * @param {quat} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {quat} out\n * @function\n */\nquat.scale = vec4.scale;\n\n/**\n * Rotates a quaternion by the given angle about the X axis\n *\n * @param {quat} out quat receiving operation result\n * @param {quat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\nquat.rotateX = function (out, a, rad) {\n    rad *= 0.5; \n\n    var ax = a[0], ay = a[1], az = a[2], aw = a[3],\n        bx = Math.sin(rad), bw = Math.cos(rad);\n\n    out[0] = ax * bw + aw * bx;\n    out[1] = ay * bw + az * bx;\n    out[2] = az * bw - ay * bx;\n    out[3] = aw * bw - ax * bx;\n    return out;\n};\n\n/**\n * Rotates a quaternion by the given angle about the Y axis\n *\n * @param {quat} out quat receiving operation result\n * @param {quat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\nquat.rotateY = function (out, a, rad) {\n    rad *= 0.5; \n\n    var ax = a[0], ay = a[1], az = a[2], aw = a[3],\n        by = Math.sin(rad), bw = Math.cos(rad);\n\n    out[0] = ax * bw - az * by;\n    out[1] = ay * bw + aw * by;\n    out[2] = az * bw + ax * by;\n    out[3] = aw * bw - ay * by;\n    return out;\n};\n\n/**\n * Rotates a quaternion by the given angle about the Z axis\n *\n * @param {quat} out quat receiving operation result\n * @param {quat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\nquat.rotateZ = function (out, a, rad) {\n    rad *= 0.5; \n\n    var ax = a[0], ay = a[1], az = a[2], aw = a[3],\n        bz = Math.sin(rad), bw = Math.cos(rad);\n\n    out[0] = ax * bw + ay * bz;\n    out[1] = ay * bw - ax * bz;\n    out[2] = az * bw + aw * bz;\n    out[3] = aw * bw - az * bz;\n    return out;\n};\n\n/**\n * Calculates the W component of a quat from the X, Y, and Z components.\n * Assumes that quaternion is 1 unit in length.\n * Any existing W component will be ignored.\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a quat to calculate W component of\n * @returns {quat} out\n */\nquat.calculateW = function (out, a) {\n    var x = a[0], y = a[1], z = a[2];\n\n    out[0] = x;\n    out[1] = y;\n    out[2] = z;\n    out[3] = Math.sqrt(Math.abs(1.0 - x * x - y * y - z * z));\n    return out;\n};\n\n/**\n * Calculates the dot product of two quat's\n *\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @returns {Number} dot product of a and b\n * @function\n */\nquat.dot = vec4.dot;\n\n/**\n * Performs a linear interpolation between two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @param {Number} t interpolation amount between the two inputs\n * @returns {quat} out\n * @function\n */\nquat.lerp = vec4.lerp;\n\n/**\n * Performs a spherical linear interpolation between two quat\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @param {Number} t interpolation amount between the two inputs\n * @returns {quat} out\n */\nquat.slerp = function (out, a, b, t) {\n    // benchmarks:\n    //    http://jsperf.com/quaternion-slerp-implementations\n\n    var ax = a[0], ay = a[1], az = a[2], aw = a[3],\n        bx = b[0], by = b[1], bz = b[2], bw = b[3];\n\n    var        omega, cosom, sinom, scale0, scale1;\n\n    // calc cosine\n    cosom = ax * bx + ay * by + az * bz + aw * bw;\n    // adjust signs (if necessary)\n    if ( cosom < 0.0 ) {\n        cosom = -cosom;\n        bx = - bx;\n        by = - by;\n        bz = - bz;\n        bw = - bw;\n    }\n    // calculate coefficients\n    if ( (1.0 - cosom) > 0.000001 ) {\n        // standard case (slerp)\n        omega  = Math.acos(cosom);\n        sinom  = Math.sin(omega);\n        scale0 = Math.sin((1.0 - t) * omega) / sinom;\n        scale1 = Math.sin(t * omega) / sinom;\n    } else {        \n        // \"from\" and \"to\" quaternions are very close \n        //  ... so we can do a linear interpolation\n        scale0 = 1.0 - t;\n        scale1 = t;\n    }\n    // calculate final values\n    out[0] = scale0 * ax + scale1 * bx;\n    out[1] = scale0 * ay + scale1 * by;\n    out[2] = scale0 * az + scale1 * bz;\n    out[3] = scale0 * aw + scale1 * bw;\n    \n    return out;\n};\n\n/**\n * Performs a spherical linear interpolation with two control points\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @param {quat} c the third operand\n * @param {quat} d the fourth operand\n * @param {Number} t interpolation amount\n * @returns {quat} out\n */\nquat.sqlerp = (function () {\n  var temp1 = quat.create();\n  var temp2 = quat.create();\n  \n  return function (out, a, b, c, d, t) {\n    quat.slerp(temp1, a, d, t);\n    quat.slerp(temp2, b, c, t);\n    quat.slerp(out, temp1, temp2, 2 * t * (1 - t));\n    \n    return out;\n  };\n}());\n\n/**\n * Calculates the inverse of a quat\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a quat to calculate inverse of\n * @returns {quat} out\n */\nquat.invert = function(out, a) {\n    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3],\n        dot = a0*a0 + a1*a1 + a2*a2 + a3*a3,\n        invDot = dot ? 1.0/dot : 0;\n    \n    // TODO: Would be faster to return [0,0,0,0] immediately if dot == 0\n\n    out[0] = -a0*invDot;\n    out[1] = -a1*invDot;\n    out[2] = -a2*invDot;\n    out[3] = a3*invDot;\n    return out;\n};\n\n/**\n * Calculates the conjugate of a quat\n * If the quaternion is normalized, this function is faster than quat.inverse and produces the same result.\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a quat to calculate conjugate of\n * @returns {quat} out\n */\nquat.conjugate = function (out, a) {\n    out[0] = -a[0];\n    out[1] = -a[1];\n    out[2] = -a[2];\n    out[3] = a[3];\n    return out;\n};\n\n/**\n * Calculates the length of a quat\n *\n * @param {quat} a vector to calculate length of\n * @returns {Number} length of a\n * @function\n */\nquat.length = vec4.length;\n\n/**\n * Alias for {@link quat.length}\n * @function\n */\nquat.len = quat.length;\n\n/**\n * Calculates the squared length of a quat\n *\n * @param {quat} a vector to calculate squared length of\n * @returns {Number} squared length of a\n * @function\n */\nquat.squaredLength = vec4.squaredLength;\n\n/**\n * Alias for {@link quat.squaredLength}\n * @function\n */\nquat.sqrLen = quat.squaredLength;\n\n/**\n * Normalize a quat\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a quaternion to normalize\n * @returns {quat} out\n * @function\n */\nquat.normalize = vec4.normalize;\n\n/**\n * Creates a quaternion from the given 3x3 rotation matrix.\n *\n * NOTE: The resultant quaternion is not normalized, so you should be sure\n * to renormalize the quaternion yourself where necessary.\n *\n * @param {quat} out the receiving quaternion\n * @param {mat3} m rotation matrix\n * @returns {quat} out\n * @function\n */\nquat.fromMat3 = function(out, m) {\n    // Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes\n    // article \"Quaternion Calculus and Fast Animation\".\n    var fTrace = m[0] + m[4] + m[8];\n    var fRoot;\n\n    if ( fTrace > 0.0 ) {\n        // |w| > 1/2, may as well choose w > 1/2\n        fRoot = Math.sqrt(fTrace + 1.0);  // 2w\n        out[3] = 0.5 * fRoot;\n        fRoot = 0.5/fRoot;  // 1/(4w)\n        out[0] = (m[5]-m[7])*fRoot;\n        out[1] = (m[6]-m[2])*fRoot;\n        out[2] = (m[1]-m[3])*fRoot;\n    } else {\n        // |w| <= 1/2\n        var i = 0;\n        if ( m[4] > m[0] )\n          i = 1;\n        if ( m[8] > m[i*3+i] )\n          i = 2;\n        var j = (i+1)%3;\n        var k = (i+2)%3;\n        \n        fRoot = Math.sqrt(m[i*3+i]-m[j*3+j]-m[k*3+k] + 1.0);\n        out[i] = 0.5 * fRoot;\n        fRoot = 0.5 / fRoot;\n        out[3] = (m[j*3+k] - m[k*3+j]) * fRoot;\n        out[j] = (m[j*3+i] + m[i*3+j]) * fRoot;\n        out[k] = (m[k*3+i] + m[i*3+k]) * fRoot;\n    }\n    \n    return out;\n};\n\n/**\n * Returns a string representation of a quatenion\n *\n * @param {quat} vec vector to represent as a string\n * @returns {String} string representation of the vector\n */\nquat.str = function (a) {\n    return 'quat(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';\n};\n\nmodule.exports = quat;\n\n},{\"./common.js\":2,\"./mat3.js\":5,\"./vec3.js\":9,\"./vec4.js\":10}],8:[function(_dereq_,module,exports){\n/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE. */\n\nvar glMatrix = _dereq_(\"./common.js\");\n\n/**\n * @class 2 Dimensional Vector\n * @name vec2\n */\nvar vec2 = {};\n\n/**\n * Creates a new, empty vec2\n *\n * @returns {vec2} a new 2D vector\n */\nvec2.create = function() {\n    var out = new glMatrix.ARRAY_TYPE(2);\n    out[0] = 0;\n    out[1] = 0;\n    return out;\n};\n\n/**\n * Creates a new vec2 initialized with values from an existing vector\n *\n * @param {vec2} a vector to clone\n * @returns {vec2} a new 2D vector\n */\nvec2.clone = function(a) {\n    var out = new glMatrix.ARRAY_TYPE(2);\n    out[0] = a[0];\n    out[1] = a[1];\n    return out;\n};\n\n/**\n * Creates a new vec2 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @returns {vec2} a new 2D vector\n */\nvec2.fromValues = function(x, y) {\n    var out = new glMatrix.ARRAY_TYPE(2);\n    out[0] = x;\n    out[1] = y;\n    return out;\n};\n\n/**\n * Copy the values from one vec2 to another\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the source vector\n * @returns {vec2} out\n */\nvec2.copy = function(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    return out;\n};\n\n/**\n * Set the components of a vec2 to the given values\n *\n * @param {vec2} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @returns {vec2} out\n */\nvec2.set = function(out, x, y) {\n    out[0] = x;\n    out[1] = y;\n    return out;\n};\n\n/**\n * Adds two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nvec2.add = function(out, a, b) {\n    out[0] = a[0] + b[0];\n    out[1] = a[1] + b[1];\n    return out;\n};\n\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nvec2.subtract = function(out, a, b) {\n    out[0] = a[0] - b[0];\n    out[1] = a[1] - b[1];\n    return out;\n};\n\n/**\n * Alias for {@link vec2.subtract}\n * @function\n */\nvec2.sub = vec2.subtract;\n\n/**\n * Multiplies two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nvec2.multiply = function(out, a, b) {\n    out[0] = a[0] * b[0];\n    out[1] = a[1] * b[1];\n    return out;\n};\n\n/**\n * Alias for {@link vec2.multiply}\n * @function\n */\nvec2.mul = vec2.multiply;\n\n/**\n * Divides two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nvec2.divide = function(out, a, b) {\n    out[0] = a[0] / b[0];\n    out[1] = a[1] / b[1];\n    return out;\n};\n\n/**\n * Alias for {@link vec2.divide}\n * @function\n */\nvec2.div = vec2.divide;\n\n/**\n * Returns the minimum of two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nvec2.min = function(out, a, b) {\n    out[0] = Math.min(a[0], b[0]);\n    out[1] = Math.min(a[1], b[1]);\n    return out;\n};\n\n/**\n * Returns the maximum of two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nvec2.max = function(out, a, b) {\n    out[0] = Math.max(a[0], b[0]);\n    out[1] = Math.max(a[1], b[1]);\n    return out;\n};\n\n/**\n * Scales a vec2 by a scalar number\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec2} out\n */\nvec2.scale = function(out, a, b) {\n    out[0] = a[0] * b;\n    out[1] = a[1] * b;\n    return out;\n};\n\n/**\n * Adds two vec2's after scaling the second operand by a scalar value\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec2} out\n */\nvec2.scaleAndAdd = function(out, a, b, scale) {\n    out[0] = a[0] + (b[0] * scale);\n    out[1] = a[1] + (b[1] * scale);\n    return out;\n};\n\n/**\n * Calculates the euclidian distance between two vec2's\n *\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {Number} distance between a and b\n */\nvec2.distance = function(a, b) {\n    var x = b[0] - a[0],\n        y = b[1] - a[1];\n    return Math.sqrt(x*x + y*y);\n};\n\n/**\n * Alias for {@link vec2.distance}\n * @function\n */\nvec2.dist = vec2.distance;\n\n/**\n * Calculates the squared euclidian distance between two vec2's\n *\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {Number} squared distance between a and b\n */\nvec2.squaredDistance = function(a, b) {\n    var x = b[0] - a[0],\n        y = b[1] - a[1];\n    return x*x + y*y;\n};\n\n/**\n * Alias for {@link vec2.squaredDistance}\n * @function\n */\nvec2.sqrDist = vec2.squaredDistance;\n\n/**\n * Calculates the length of a vec2\n *\n * @param {vec2} a vector to calculate length of\n * @returns {Number} length of a\n */\nvec2.length = function (a) {\n    var x = a[0],\n        y = a[1];\n    return Math.sqrt(x*x + y*y);\n};\n\n/**\n * Alias for {@link vec2.length}\n * @function\n */\nvec2.len = vec2.length;\n\n/**\n * Calculates the squared length of a vec2\n *\n * @param {vec2} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\nvec2.squaredLength = function (a) {\n    var x = a[0],\n        y = a[1];\n    return x*x + y*y;\n};\n\n/**\n * Alias for {@link vec2.squaredLength}\n * @function\n */\nvec2.sqrLen = vec2.squaredLength;\n\n/**\n * Negates the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to negate\n * @returns {vec2} out\n */\nvec2.negate = function(out, a) {\n    out[0] = -a[0];\n    out[1] = -a[1];\n    return out;\n};\n\n/**\n * Returns the inverse of the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to invert\n * @returns {vec2} out\n */\nvec2.inverse = function(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  return out;\n};\n\n/**\n * Normalize a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to normalize\n * @returns {vec2} out\n */\nvec2.normalize = function(out, a) {\n    var x = a[0],\n        y = a[1];\n    var len = x*x + y*y;\n    if (len > 0) {\n        //TODO: evaluate use of glm_invsqrt here?\n        len = 1 / Math.sqrt(len);\n        out[0] = a[0] * len;\n        out[1] = a[1] * len;\n    }\n    return out;\n};\n\n/**\n * Calculates the dot product of two vec2's\n *\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {Number} dot product of a and b\n */\nvec2.dot = function (a, b) {\n    return a[0] * b[0] + a[1] * b[1];\n};\n\n/**\n * Computes the cross product of two vec2's\n * Note that the cross product must by definition produce a 3D vector\n *\n * @param {vec3} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec3} out\n */\nvec2.cross = function(out, a, b) {\n    var z = a[0] * b[1] - a[1] * b[0];\n    out[0] = out[1] = 0;\n    out[2] = z;\n    return out;\n};\n\n/**\n * Performs a linear interpolation between two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @param {Number} t interpolation amount between the two inputs\n * @returns {vec2} out\n */\nvec2.lerp = function (out, a, b, t) {\n    var ax = a[0],\n        ay = a[1];\n    out[0] = ax + t * (b[0] - ax);\n    out[1] = ay + t * (b[1] - ay);\n    return out;\n};\n\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec2} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec2} out\n */\nvec2.random = function (out, scale) {\n    scale = scale || 1.0;\n    var r = glMatrix.RANDOM() * 2.0 * Math.PI;\n    out[0] = Math.cos(r) * scale;\n    out[1] = Math.sin(r) * scale;\n    return out;\n};\n\n/**\n * Transforms the vec2 with a mat2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to transform\n * @param {mat2} m matrix to transform with\n * @returns {vec2} out\n */\nvec2.transformMat2 = function(out, a, m) {\n    var x = a[0],\n        y = a[1];\n    out[0] = m[0] * x + m[2] * y;\n    out[1] = m[1] * x + m[3] * y;\n    return out;\n};\n\n/**\n * Transforms the vec2 with a mat2d\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to transform\n * @param {mat2d} m matrix to transform with\n * @returns {vec2} out\n */\nvec2.transformMat2d = function(out, a, m) {\n    var x = a[0],\n        y = a[1];\n    out[0] = m[0] * x + m[2] * y + m[4];\n    out[1] = m[1] * x + m[3] * y + m[5];\n    return out;\n};\n\n/**\n * Transforms the vec2 with a mat3\n * 3rd vector component is implicitly '1'\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to transform\n * @param {mat3} m matrix to transform with\n * @returns {vec2} out\n */\nvec2.transformMat3 = function(out, a, m) {\n    var x = a[0],\n        y = a[1];\n    out[0] = m[0] * x + m[3] * y + m[6];\n    out[1] = m[1] * x + m[4] * y + m[7];\n    return out;\n};\n\n/**\n * Transforms the vec2 with a mat4\n * 3rd vector component is implicitly '0'\n * 4th vector component is implicitly '1'\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to transform\n * @param {mat4} m matrix to transform with\n * @returns {vec2} out\n */\nvec2.transformMat4 = function(out, a, m) {\n    var x = a[0], \n        y = a[1];\n    out[0] = m[0] * x + m[4] * y + m[12];\n    out[1] = m[1] * x + m[5] * y + m[13];\n    return out;\n};\n\n/**\n * Perform some operation over an array of vec2s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec2. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec2s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\nvec2.forEach = (function() {\n    var vec = vec2.create();\n\n    return function(a, stride, offset, count, fn, arg) {\n        var i, l;\n        if(!stride) {\n            stride = 2;\n        }\n\n        if(!offset) {\n            offset = 0;\n        }\n        \n        if(count) {\n            l = Math.min((count * stride) + offset, a.length);\n        } else {\n            l = a.length;\n        }\n\n        for(i = offset; i < l; i += stride) {\n            vec[0] = a[i]; vec[1] = a[i+1];\n            fn(vec, vec, arg);\n            a[i] = vec[0]; a[i+1] = vec[1];\n        }\n        \n        return a;\n    };\n})();\n\n/**\n * Returns a string representation of a vector\n *\n * @param {vec2} vec vector to represent as a string\n * @returns {String} string representation of the vector\n */\nvec2.str = function (a) {\n    return 'vec2(' + a[0] + ', ' + a[1] + ')';\n};\n\nmodule.exports = vec2;\n\n},{\"./common.js\":2}],9:[function(_dereq_,module,exports){\n/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE. */\n\nvar glMatrix = _dereq_(\"./common.js\");\n\n/**\n * @class 3 Dimensional Vector\n * @name vec3\n */\nvar vec3 = {};\n\n/**\n * Creates a new, empty vec3\n *\n * @returns {vec3} a new 3D vector\n */\nvec3.create = function() {\n    var out = new glMatrix.ARRAY_TYPE(3);\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n    return out;\n};\n\n/**\n * Creates a new vec3 initialized with values from an existing vector\n *\n * @param {vec3} a vector to clone\n * @returns {vec3} a new 3D vector\n */\nvec3.clone = function(a) {\n    var out = new glMatrix.ARRAY_TYPE(3);\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    return out;\n};\n\n/**\n * Creates a new vec3 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} a new 3D vector\n */\nvec3.fromValues = function(x, y, z) {\n    var out = new glMatrix.ARRAY_TYPE(3);\n    out[0] = x;\n    out[1] = y;\n    out[2] = z;\n    return out;\n};\n\n/**\n * Copy the values from one vec3 to another\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the source vector\n * @returns {vec3} out\n */\nvec3.copy = function(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    return out;\n};\n\n/**\n * Set the components of a vec3 to the given values\n *\n * @param {vec3} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} out\n */\nvec3.set = function(out, x, y, z) {\n    out[0] = x;\n    out[1] = y;\n    out[2] = z;\n    return out;\n};\n\n/**\n * Adds two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nvec3.add = function(out, a, b) {\n    out[0] = a[0] + b[0];\n    out[1] = a[1] + b[1];\n    out[2] = a[2] + b[2];\n    return out;\n};\n\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nvec3.subtract = function(out, a, b) {\n    out[0] = a[0] - b[0];\n    out[1] = a[1] - b[1];\n    out[2] = a[2] - b[2];\n    return out;\n};\n\n/**\n * Alias for {@link vec3.subtract}\n * @function\n */\nvec3.sub = vec3.subtract;\n\n/**\n * Multiplies two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nvec3.multiply = function(out, a, b) {\n    out[0] = a[0] * b[0];\n    out[1] = a[1] * b[1];\n    out[2] = a[2] * b[2];\n    return out;\n};\n\n/**\n * Alias for {@link vec3.multiply}\n * @function\n */\nvec3.mul = vec3.multiply;\n\n/**\n * Divides two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nvec3.divide = function(out, a, b) {\n    out[0] = a[0] / b[0];\n    out[1] = a[1] / b[1];\n    out[2] = a[2] / b[2];\n    return out;\n};\n\n/**\n * Alias for {@link vec3.divide}\n * @function\n */\nvec3.div = vec3.divide;\n\n/**\n * Returns the minimum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nvec3.min = function(out, a, b) {\n    out[0] = Math.min(a[0], b[0]);\n    out[1] = Math.min(a[1], b[1]);\n    out[2] = Math.min(a[2], b[2]);\n    return out;\n};\n\n/**\n * Returns the maximum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nvec3.max = function(out, a, b) {\n    out[0] = Math.max(a[0], b[0]);\n    out[1] = Math.max(a[1], b[1]);\n    out[2] = Math.max(a[2], b[2]);\n    return out;\n};\n\n/**\n * Scales a vec3 by a scalar number\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec3} out\n */\nvec3.scale = function(out, a, b) {\n    out[0] = a[0] * b;\n    out[1] = a[1] * b;\n    out[2] = a[2] * b;\n    return out;\n};\n\n/**\n * Adds two vec3's after scaling the second operand by a scalar value\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec3} out\n */\nvec3.scaleAndAdd = function(out, a, b, scale) {\n    out[0] = a[0] + (b[0] * scale);\n    out[1] = a[1] + (b[1] * scale);\n    out[2] = a[2] + (b[2] * scale);\n    return out;\n};\n\n/**\n * Calculates the euclidian distance between two vec3's\n *\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {Number} distance between a and b\n */\nvec3.distance = function(a, b) {\n    var x = b[0] - a[0],\n        y = b[1] - a[1],\n        z = b[2] - a[2];\n    return Math.sqrt(x*x + y*y + z*z);\n};\n\n/**\n * Alias for {@link vec3.distance}\n * @function\n */\nvec3.dist = vec3.distance;\n\n/**\n * Calculates the squared euclidian distance between two vec3's\n *\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {Number} squared distance between a and b\n */\nvec3.squaredDistance = function(a, b) {\n    var x = b[0] - a[0],\n        y = b[1] - a[1],\n        z = b[2] - a[2];\n    return x*x + y*y + z*z;\n};\n\n/**\n * Alias for {@link vec3.squaredDistance}\n * @function\n */\nvec3.sqrDist = vec3.squaredDistance;\n\n/**\n * Calculates the length of a vec3\n *\n * @param {vec3} a vector to calculate length of\n * @returns {Number} length of a\n */\nvec3.length = function (a) {\n    var x = a[0],\n        y = a[1],\n        z = a[2];\n    return Math.sqrt(x*x + y*y + z*z);\n};\n\n/**\n * Alias for {@link vec3.length}\n * @function\n */\nvec3.len = vec3.length;\n\n/**\n * Calculates the squared length of a vec3\n *\n * @param {vec3} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\nvec3.squaredLength = function (a) {\n    var x = a[0],\n        y = a[1],\n        z = a[2];\n    return x*x + y*y + z*z;\n};\n\n/**\n * Alias for {@link vec3.squaredLength}\n * @function\n */\nvec3.sqrLen = vec3.squaredLength;\n\n/**\n * Negates the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to negate\n * @returns {vec3} out\n */\nvec3.negate = function(out, a) {\n    out[0] = -a[0];\n    out[1] = -a[1];\n    out[2] = -a[2];\n    return out;\n};\n\n/**\n * Returns the inverse of the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to invert\n * @returns {vec3} out\n */\nvec3.inverse = function(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  return out;\n};\n\n/**\n * Normalize a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to normalize\n * @returns {vec3} out\n */\nvec3.normalize = function(out, a) {\n    var x = a[0],\n        y = a[1],\n        z = a[2];\n    var len = x*x + y*y + z*z;\n    if (len > 0) {\n        //TODO: evaluate use of glm_invsqrt here?\n        len = 1 / Math.sqrt(len);\n        out[0] = a[0] * len;\n        out[1] = a[1] * len;\n        out[2] = a[2] * len;\n    }\n    return out;\n};\n\n/**\n * Calculates the dot product of two vec3's\n *\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {Number} dot product of a and b\n */\nvec3.dot = function (a, b) {\n    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n};\n\n/**\n * Computes the cross product of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nvec3.cross = function(out, a, b) {\n    var ax = a[0], ay = a[1], az = a[2],\n        bx = b[0], by = b[1], bz = b[2];\n\n    out[0] = ay * bz - az * by;\n    out[1] = az * bx - ax * bz;\n    out[2] = ax * by - ay * bx;\n    return out;\n};\n\n/**\n * Performs a linear interpolation between two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @param {Number} t interpolation amount between the two inputs\n * @returns {vec3} out\n */\nvec3.lerp = function (out, a, b, t) {\n    var ax = a[0],\n        ay = a[1],\n        az = a[2];\n    out[0] = ax + t * (b[0] - ax);\n    out[1] = ay + t * (b[1] - ay);\n    out[2] = az + t * (b[2] - az);\n    return out;\n};\n\n/**\n * Performs a hermite interpolation with two control points\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @param {vec3} c the third operand\n * @param {vec3} d the fourth operand\n * @param {Number} t interpolation amount between the two inputs\n * @returns {vec3} out\n */\nvec3.hermite = function (out, a, b, c, d, t) {\n  var factorTimes2 = t * t,\n      factor1 = factorTimes2 * (2 * t - 3) + 1,\n      factor2 = factorTimes2 * (t - 2) + t,\n      factor3 = factorTimes2 * (t - 1),\n      factor4 = factorTimes2 * (3 - 2 * t);\n  \n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  \n  return out;\n};\n\n/**\n * Performs a bezier interpolation with two control points\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @param {vec3} c the third operand\n * @param {vec3} d the fourth operand\n * @param {Number} t interpolation amount between the two inputs\n * @returns {vec3} out\n */\nvec3.bezier = function (out, a, b, c, d, t) {\n  var inverseFactor = 1 - t,\n      inverseFactorTimesTwo = inverseFactor * inverseFactor,\n      factorTimes2 = t * t,\n      factor1 = inverseFactorTimesTwo * inverseFactor,\n      factor2 = 3 * t * inverseFactorTimesTwo,\n      factor3 = 3 * factorTimes2 * inverseFactor,\n      factor4 = factorTimes2 * t;\n  \n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  \n  return out;\n};\n\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec3} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec3} out\n */\nvec3.random = function (out, scale) {\n    scale = scale || 1.0;\n\n    var r = glMatrix.RANDOM() * 2.0 * Math.PI;\n    var z = (glMatrix.RANDOM() * 2.0) - 1.0;\n    var zScale = Math.sqrt(1.0-z*z) * scale;\n\n    out[0] = Math.cos(r) * zScale;\n    out[1] = Math.sin(r) * zScale;\n    out[2] = z * scale;\n    return out;\n};\n\n/**\n * Transforms the vec3 with a mat4.\n * 4th vector component is implicitly '1'\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to transform\n * @param {mat4} m matrix to transform with\n * @returns {vec3} out\n */\nvec3.transformMat4 = function(out, a, m) {\n    var x = a[0], y = a[1], z = a[2],\n        w = m[3] * x + m[7] * y + m[11] * z + m[15];\n    w = w || 1.0;\n    out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\n    out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\n    out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\n    return out;\n};\n\n/**\n * Transforms the vec3 with a mat3.\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to transform\n * @param {mat4} m the 3x3 matrix to transform with\n * @returns {vec3} out\n */\nvec3.transformMat3 = function(out, a, m) {\n    var x = a[0], y = a[1], z = a[2];\n    out[0] = x * m[0] + y * m[3] + z * m[6];\n    out[1] = x * m[1] + y * m[4] + z * m[7];\n    out[2] = x * m[2] + y * m[5] + z * m[8];\n    return out;\n};\n\n/**\n * Transforms the vec3 with a quat\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to transform\n * @param {quat} q quaternion to transform with\n * @returns {vec3} out\n */\nvec3.transformQuat = function(out, a, q) {\n    // benchmarks: http://jsperf.com/quaternion-transform-vec3-implementations\n\n    var x = a[0], y = a[1], z = a[2],\n        qx = q[0], qy = q[1], qz = q[2], qw = q[3],\n\n        // calculate quat * vec\n        ix = qw * x + qy * z - qz * y,\n        iy = qw * y + qz * x - qx * z,\n        iz = qw * z + qx * y - qy * x,\n        iw = -qx * x - qy * y - qz * z;\n\n    // calculate result * inverse quat\n    out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n    out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n    out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n    return out;\n};\n\n/**\n * Rotate a 3D vector around the x-axis\n * @param {vec3} out The receiving vec3\n * @param {vec3} a The vec3 point to rotate\n * @param {vec3} b The origin of the rotation\n * @param {Number} c The angle of rotation\n * @returns {vec3} out\n */\nvec3.rotateX = function(out, a, b, c){\n   var p = [], r=[];\n\t  //Translate point to the origin\n\t  p[0] = a[0] - b[0];\n\t  p[1] = a[1] - b[1];\n  \tp[2] = a[2] - b[2];\n\n\t  //perform rotation\n\t  r[0] = p[0];\n\t  r[1] = p[1]*Math.cos(c) - p[2]*Math.sin(c);\n\t  r[2] = p[1]*Math.sin(c) + p[2]*Math.cos(c);\n\n\t  //translate to correct position\n\t  out[0] = r[0] + b[0];\n\t  out[1] = r[1] + b[1];\n\t  out[2] = r[2] + b[2];\n\n  \treturn out;\n};\n\n/**\n * Rotate a 3D vector around the y-axis\n * @param {vec3} out The receiving vec3\n * @param {vec3} a The vec3 point to rotate\n * @param {vec3} b The origin of the rotation\n * @param {Number} c The angle of rotation\n * @returns {vec3} out\n */\nvec3.rotateY = function(out, a, b, c){\n  \tvar p = [], r=[];\n  \t//Translate point to the origin\n  \tp[0] = a[0] - b[0];\n  \tp[1] = a[1] - b[1];\n  \tp[2] = a[2] - b[2];\n  \n  \t//perform rotation\n  \tr[0] = p[2]*Math.sin(c) + p[0]*Math.cos(c);\n  \tr[1] = p[1];\n  \tr[2] = p[2]*Math.cos(c) - p[0]*Math.sin(c);\n  \n  \t//translate to correct position\n  \tout[0] = r[0] + b[0];\n  \tout[1] = r[1] + b[1];\n  \tout[2] = r[2] + b[2];\n  \n  \treturn out;\n};\n\n/**\n * Rotate a 3D vector around the z-axis\n * @param {vec3} out The receiving vec3\n * @param {vec3} a The vec3 point to rotate\n * @param {vec3} b The origin of the rotation\n * @param {Number} c The angle of rotation\n * @returns {vec3} out\n */\nvec3.rotateZ = function(out, a, b, c){\n  \tvar p = [], r=[];\n  \t//Translate point to the origin\n  \tp[0] = a[0] - b[0];\n  \tp[1] = a[1] - b[1];\n  \tp[2] = a[2] - b[2];\n  \n  \t//perform rotation\n  \tr[0] = p[0]*Math.cos(c) - p[1]*Math.sin(c);\n  \tr[1] = p[0]*Math.sin(c) + p[1]*Math.cos(c);\n  \tr[2] = p[2];\n  \n  \t//translate to correct position\n  \tout[0] = r[0] + b[0];\n  \tout[1] = r[1] + b[1];\n  \tout[2] = r[2] + b[2];\n  \n  \treturn out;\n};\n\n/**\n * Perform some operation over an array of vec3s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\nvec3.forEach = (function() {\n    var vec = vec3.create();\n\n    return function(a, stride, offset, count, fn, arg) {\n        var i, l;\n        if(!stride) {\n            stride = 3;\n        }\n\n        if(!offset) {\n            offset = 0;\n        }\n        \n        if(count) {\n            l = Math.min((count * stride) + offset, a.length);\n        } else {\n            l = a.length;\n        }\n\n        for(i = offset; i < l; i += stride) {\n            vec[0] = a[i]; vec[1] = a[i+1]; vec[2] = a[i+2];\n            fn(vec, vec, arg);\n            a[i] = vec[0]; a[i+1] = vec[1]; a[i+2] = vec[2];\n        }\n        \n        return a;\n    };\n})();\n\n/**\n * Get the angle between two 3D vectors\n * @param {vec3} a The first operand\n * @param {vec3} b The second operand\n * @returns {Number} The angle in radians\n */\nvec3.angle = function(a, b) {\n   \n    var tempA = vec3.fromValues(a[0], a[1], a[2]);\n    var tempB = vec3.fromValues(b[0], b[1], b[2]);\n \n    vec3.normalize(tempA, tempA);\n    vec3.normalize(tempB, tempB);\n \n    var cosine = vec3.dot(tempA, tempB);\n\n    if(cosine > 1.0){\n        return 0;\n    } else {\n        return Math.acos(cosine);\n    }     \n};\n\n/**\n * Returns a string representation of a vector\n *\n * @param {vec3} vec vector to represent as a string\n * @returns {String} string representation of the vector\n */\nvec3.str = function (a) {\n    return 'vec3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ')';\n};\n\nmodule.exports = vec3;\n\n},{\"./common.js\":2}],10:[function(_dereq_,module,exports){\n/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE. */\n\nvar glMatrix = _dereq_(\"./common.js\");\n\n/**\n * @class 4 Dimensional Vector\n * @name vec4\n */\nvar vec4 = {};\n\n/**\n * Creates a new, empty vec4\n *\n * @returns {vec4} a new 4D vector\n */\nvec4.create = function() {\n    var out = new glMatrix.ARRAY_TYPE(4);\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    return out;\n};\n\n/**\n * Creates a new vec4 initialized with values from an existing vector\n *\n * @param {vec4} a vector to clone\n * @returns {vec4} a new 4D vector\n */\nvec4.clone = function(a) {\n    var out = new glMatrix.ARRAY_TYPE(4);\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    return out;\n};\n\n/**\n * Creates a new vec4 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {vec4} a new 4D vector\n */\nvec4.fromValues = function(x, y, z, w) {\n    var out = new glMatrix.ARRAY_TYPE(4);\n    out[0] = x;\n    out[1] = y;\n    out[2] = z;\n    out[3] = w;\n    return out;\n};\n\n/**\n * Copy the values from one vec4 to another\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the source vector\n * @returns {vec4} out\n */\nvec4.copy = function(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    return out;\n};\n\n/**\n * Set the components of a vec4 to the given values\n *\n * @param {vec4} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {vec4} out\n */\nvec4.set = function(out, x, y, z, w) {\n    out[0] = x;\n    out[1] = y;\n    out[2] = z;\n    out[3] = w;\n    return out;\n};\n\n/**\n * Adds two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {vec4} out\n */\nvec4.add = function(out, a, b) {\n    out[0] = a[0] + b[0];\n    out[1] = a[1] + b[1];\n    out[2] = a[2] + b[2];\n    out[3] = a[3] + b[3];\n    return out;\n};\n\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {vec4} out\n */\nvec4.subtract = function(out, a, b) {\n    out[0] = a[0] - b[0];\n    out[1] = a[1] - b[1];\n    out[2] = a[2] - b[2];\n    out[3] = a[3] - b[3];\n    return out;\n};\n\n/**\n * Alias for {@link vec4.subtract}\n * @function\n */\nvec4.sub = vec4.subtract;\n\n/**\n * Multiplies two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {vec4} out\n */\nvec4.multiply = function(out, a, b) {\n    out[0] = a[0] * b[0];\n    out[1] = a[1] * b[1];\n    out[2] = a[2] * b[2];\n    out[3] = a[3] * b[3];\n    return out;\n};\n\n/**\n * Alias for {@link vec4.multiply}\n * @function\n */\nvec4.mul = vec4.multiply;\n\n/**\n * Divides two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {vec4} out\n */\nvec4.divide = function(out, a, b) {\n    out[0] = a[0] / b[0];\n    out[1] = a[1] / b[1];\n    out[2] = a[2] / b[2];\n    out[3] = a[3] / b[3];\n    return out;\n};\n\n/**\n * Alias for {@link vec4.divide}\n * @function\n */\nvec4.div = vec4.divide;\n\n/**\n * Returns the minimum of two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {vec4} out\n */\nvec4.min = function(out, a, b) {\n    out[0] = Math.min(a[0], b[0]);\n    out[1] = Math.min(a[1], b[1]);\n    out[2] = Math.min(a[2], b[2]);\n    out[3] = Math.min(a[3], b[3]);\n    return out;\n};\n\n/**\n * Returns the maximum of two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {vec4} out\n */\nvec4.max = function(out, a, b) {\n    out[0] = Math.max(a[0], b[0]);\n    out[1] = Math.max(a[1], b[1]);\n    out[2] = Math.max(a[2], b[2]);\n    out[3] = Math.max(a[3], b[3]);\n    return out;\n};\n\n/**\n * Scales a vec4 by a scalar number\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec4} out\n */\nvec4.scale = function(out, a, b) {\n    out[0] = a[0] * b;\n    out[1] = a[1] * b;\n    out[2] = a[2] * b;\n    out[3] = a[3] * b;\n    return out;\n};\n\n/**\n * Adds two vec4's after scaling the second operand by a scalar value\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec4} out\n */\nvec4.scaleAndAdd = function(out, a, b, scale) {\n    out[0] = a[0] + (b[0] * scale);\n    out[1] = a[1] + (b[1] * scale);\n    out[2] = a[2] + (b[2] * scale);\n    out[3] = a[3] + (b[3] * scale);\n    return out;\n};\n\n/**\n * Calculates the euclidian distance between two vec4's\n *\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {Number} distance between a and b\n */\nvec4.distance = function(a, b) {\n    var x = b[0] - a[0],\n        y = b[1] - a[1],\n        z = b[2] - a[2],\n        w = b[3] - a[3];\n    return Math.sqrt(x*x + y*y + z*z + w*w);\n};\n\n/**\n * Alias for {@link vec4.distance}\n * @function\n */\nvec4.dist = vec4.distance;\n\n/**\n * Calculates the squared euclidian distance between two vec4's\n *\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {Number} squared distance between a and b\n */\nvec4.squaredDistance = function(a, b) {\n    var x = b[0] - a[0],\n        y = b[1] - a[1],\n        z = b[2] - a[2],\n        w = b[3] - a[3];\n    return x*x + y*y + z*z + w*w;\n};\n\n/**\n * Alias for {@link vec4.squaredDistance}\n * @function\n */\nvec4.sqrDist = vec4.squaredDistance;\n\n/**\n * Calculates the length of a vec4\n *\n * @param {vec4} a vector to calculate length of\n * @returns {Number} length of a\n */\nvec4.length = function (a) {\n    var x = a[0],\n        y = a[1],\n        z = a[2],\n        w = a[3];\n    return Math.sqrt(x*x + y*y + z*z + w*w);\n};\n\n/**\n * Alias for {@link vec4.length}\n * @function\n */\nvec4.len = vec4.length;\n\n/**\n * Calculates the squared length of a vec4\n *\n * @param {vec4} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\nvec4.squaredLength = function (a) {\n    var x = a[0],\n        y = a[1],\n        z = a[2],\n        w = a[3];\n    return x*x + y*y + z*z + w*w;\n};\n\n/**\n * Alias for {@link vec4.squaredLength}\n * @function\n */\nvec4.sqrLen = vec4.squaredLength;\n\n/**\n * Negates the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a vector to negate\n * @returns {vec4} out\n */\nvec4.negate = function(out, a) {\n    out[0] = -a[0];\n    out[1] = -a[1];\n    out[2] = -a[2];\n    out[3] = -a[3];\n    return out;\n};\n\n/**\n * Returns the inverse of the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a vector to invert\n * @returns {vec4} out\n */\nvec4.inverse = function(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  out[3] = 1.0 / a[3];\n  return out;\n};\n\n/**\n * Normalize a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a vector to normalize\n * @returns {vec4} out\n */\nvec4.normalize = function(out, a) {\n    var x = a[0],\n        y = a[1],\n        z = a[2],\n        w = a[3];\n    var len = x*x + y*y + z*z + w*w;\n    if (len > 0) {\n        len = 1 / Math.sqrt(len);\n        out[0] = x * len;\n        out[1] = y * len;\n        out[2] = z * len;\n        out[3] = w * len;\n    }\n    return out;\n};\n\n/**\n * Calculates the dot product of two vec4's\n *\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {Number} dot product of a and b\n */\nvec4.dot = function (a, b) {\n    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];\n};\n\n/**\n * Performs a linear interpolation between two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @param {Number} t interpolation amount between the two inputs\n * @returns {vec4} out\n */\nvec4.lerp = function (out, a, b, t) {\n    var ax = a[0],\n        ay = a[1],\n        az = a[2],\n        aw = a[3];\n    out[0] = ax + t * (b[0] - ax);\n    out[1] = ay + t * (b[1] - ay);\n    out[2] = az + t * (b[2] - az);\n    out[3] = aw + t * (b[3] - aw);\n    return out;\n};\n\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec4} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec4} out\n */\nvec4.random = function (out, scale) {\n    scale = scale || 1.0;\n\n    //TODO: This is a pretty awful way of doing this. Find something better.\n    out[0] = glMatrix.RANDOM();\n    out[1] = glMatrix.RANDOM();\n    out[2] = glMatrix.RANDOM();\n    out[3] = glMatrix.RANDOM();\n    vec4.normalize(out, out);\n    vec4.scale(out, out, scale);\n    return out;\n};\n\n/**\n * Transforms the vec4 with a mat4.\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the vector to transform\n * @param {mat4} m matrix to transform with\n * @returns {vec4} out\n */\nvec4.transformMat4 = function(out, a, m) {\n    var x = a[0], y = a[1], z = a[2], w = a[3];\n    out[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;\n    out[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;\n    out[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;\n    out[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;\n    return out;\n};\n\n/**\n * Transforms the vec4 with a quat\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the vector to transform\n * @param {quat} q quaternion to transform with\n * @returns {vec4} out\n */\nvec4.transformQuat = function(out, a, q) {\n    var x = a[0], y = a[1], z = a[2],\n        qx = q[0], qy = q[1], qz = q[2], qw = q[3],\n\n        // calculate quat * vec\n        ix = qw * x + qy * z - qz * y,\n        iy = qw * y + qz * x - qx * z,\n        iz = qw * z + qx * y - qy * x,\n        iw = -qx * x - qy * y - qz * z;\n\n    // calculate result * inverse quat\n    out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n    out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n    out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n    out[3] = a[3];\n    return out;\n};\n\n/**\n * Perform some operation over an array of vec4s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec4. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec4s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\nvec4.forEach = (function() {\n    var vec = vec4.create();\n\n    return function(a, stride, offset, count, fn, arg) {\n        var i, l;\n        if(!stride) {\n            stride = 4;\n        }\n\n        if(!offset) {\n            offset = 0;\n        }\n        \n        if(count) {\n            l = Math.min((count * stride) + offset, a.length);\n        } else {\n            l = a.length;\n        }\n\n        for(i = offset; i < l; i += stride) {\n            vec[0] = a[i]; vec[1] = a[i+1]; vec[2] = a[i+2]; vec[3] = a[i+3];\n            fn(vec, vec, arg);\n            a[i] = vec[0]; a[i+1] = vec[1]; a[i+2] = vec[2]; a[i+3] = vec[3];\n        }\n        \n        return a;\n    };\n})();\n\n/**\n * Returns a string representation of a vector\n *\n * @param {vec4} vec vector to represent as a string\n * @returns {String} string representation of the vector\n */\nvec4.str = function (a) {\n    return 'vec4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';\n};\n\nmodule.exports = vec4;\n\n},{\"./common.js\":2}],11:[function(_dereq_,module,exports){\n'use strict';\n\nvar _createClass = function () {\n\tfunction defineProperties(target, props) {\n\t\tfor (var i = 0; i < props.length; i++) {\n\t\t\tvar descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\"value\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);\n\t\t}\n\t}return function (Constructor, protoProps, staticProps) {\n\t\tif (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;\n\t};\n}(); // alfrid.js\n\n//\tTOOLS\n\n//\tCAMERAS\n\nvar _glMatrix = _dereq_('gl-matrix');\n\nvar _glMatrix2 = _interopRequireDefault(_glMatrix);\n\nvar _GLTool = _dereq_('./alfrid/GLTool');\n\nvar _GLTool2 = _interopRequireDefault(_GLTool);\n\nvar _GLShader = _dereq_('./alfrid/GLShader');\n\nvar _GLShader2 = _interopRequireDefault(_GLShader);\n\nvar _Mesh = _dereq_('./alfrid/Mesh');\n\nvar _Mesh2 = _interopRequireDefault(_Mesh);\n\nvar _Scheduler = _dereq_('./alfrid/tools/Scheduler');\n\nvar _Scheduler2 = _interopRequireDefault(_Scheduler);\n\nvar _EventDispatcher = _dereq_('./alfrid/tools/EventDispatcher');\n\nvar _EventDispatcher2 = _interopRequireDefault(_EventDispatcher);\n\nvar _EaseNumber = _dereq_('./alfrid/tools/EaseNumber');\n\nvar _EaseNumber2 = _interopRequireDefault(_EaseNumber);\n\nvar _Camera = _dereq_('./alfrid/cameras/Camera');\n\nvar _Camera2 = _interopRequireDefault(_Camera);\n\nvar _CameraOrtho = _dereq_('./alfrid/cameras/CameraOrtho');\n\nvar _CameraOrtho2 = _interopRequireDefault(_CameraOrtho);\n\nvar _CameraPerspective = _dereq_('./alfrid/cameras/CameraPerspective');\n\nvar _CameraPerspective2 = _interopRequireDefault(_CameraPerspective);\n\nfunction _interopRequireDefault(obj) {\n\treturn obj && obj.__esModule ? obj : { default: obj };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n\tif (!(instance instanceof Constructor)) {\n\t\tthrow new TypeError(\"Cannot call a class as a function\");\n\t}\n}\n\nvar VERSION = '1.0.0';\n\nvar alfrid = function () {\n\tfunction alfrid() {\n\t\t_classCallCheck(this, alfrid);\n\n\t\tthis.glm = _glMatrix2.default;\n\t\tthis.GL = _GLTool2.default;\n\t\tthis.GLTool = _GLTool2.default;\n\t\tthis.GLShader = _GLShader2.default;\n\t\tthis.Mesh = _Mesh2.default;\n\t\tthis.Scheduler = _Scheduler2.default;\n\t\tthis.EventDispatcher = _EventDispatcher2.default;\n\t\tthis.EaseNumber = _EaseNumber2.default;\n\t\tthis.Camera = _Camera2.default;\n\t\tthis.CameraOrtho = _CameraOrtho2.default;\n\t\tthis.CameraPerspective = _CameraPerspective2.default;\n\n\t\t//\tNOT SUPER SURE I'VE DONE THIS IS A GOOD WAY\n\n\t\tfor (var s in _glMatrix2.default) {\n\t\t\tif (_glMatrix2.default[s]) {\n\t\t\t\twindow[s] = _glMatrix2.default[s];\n\t\t\t}\n\t\t}\n\n\t\t//\tTESTING CODES\n\t}\n\n\t_createClass(alfrid, [{\n\t\tkey: 'log',\n\t\tvalue: function log() {\n\t\t\tif (navigator.userAgent.indexOf('Chrome') > -1) {\n\t\t\t\tconsole.log('%clib alfrid : VERSION ' + VERSION, 'background: #193441; color: #FCFFF5');\n\t\t\t} else {\n\t\t\t\tconsole.log('lib alfrid : VERSION ', VERSION);\n\t\t\t}\n\t\t\tconsole.log('%cClasses : ', 'color: #193441');\n\n\t\t\tfor (var s in this) {\n\t\t\t\tif (this[s]) {\n\t\t\t\t\tconsole.log('%c - ' + s, 'color: #3E606F');\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}]);\n\n\treturn alfrid;\n}();\n\nvar b = new alfrid();\n\nmodule.exports = b;\n\n},{\"./alfrid/GLShader\":12,\"./alfrid/GLTool\":13,\"./alfrid/Mesh\":14,\"./alfrid/cameras/Camera\":15,\"./alfrid/cameras/CameraOrtho\":16,\"./alfrid/cameras/CameraPerspective\":17,\"./alfrid/tools/EaseNumber\":18,\"./alfrid/tools/EventDispatcher\":19,\"./alfrid/tools/Scheduler\":20,\"gl-matrix\":1}],12:[function(_dereq_,module,exports){\n// GLShader.js\n\n'use strict';\n\nvar _createClass = function () {\n\tfunction defineProperties(target, props) {\n\t\tfor (var i = 0; i < props.length; i++) {\n\t\t\tvar descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\"value\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);\n\t\t}\n\t}return function (Constructor, protoProps, staticProps) {\n\t\tif (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;\n\t};\n}();\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\n\nvar _GLTool = _dereq_('./GLTool');\n\nvar _GLTool2 = _interopRequireDefault(_GLTool);\n\nfunction _interopRequireDefault(obj) {\n\treturn obj && obj.__esModule ? obj : { default: obj };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n\tif (!(instance instanceof Constructor)) {\n\t\tthrow new TypeError(\"Cannot call a class as a function\");\n\t}\n}\n\n\n\nvar addLineNumbers = function addLineNumbers(string) {\n\tvar lines = string.split('\\n');\n\tfor (var i = 0; i < lines.length; i++) {\n\t\tlines[i] = i + 1 + ': ' + lines[i];\n\t}\n\treturn lines.join('\\n');\n};\n\nvar gl = undefined;\nvar defaultVertexShader = \"#define GLSLIFY 1\\n// basic.vert\\n\\n#define SHADER_NAME BASIC_VERTEX\\n\\nprecision highp float;\\nattribute vec3 aVertexPosition;\\nattribute vec2 aTextureCoord;\\n\\nuniform mat4 uModelMatrix;\\nuniform mat4 uViewMatrix;\\nuniform mat4 uProjectionMatrix;\\n\\nvarying vec2 vTextureCoord;\\n\\nvoid main(void) {\\n    gl_Position = uProjectionMatrix * uViewMatrix * uModelMatrix * vec4(aVertexPosition, 1.0);\\n    vTextureCoord = aTextureCoord;\\n}\";\nvar defaultFragmentShader = \"#define GLSLIFY 1\\n// basic.frag\\n\\n#define SHADER_NAME BASIC_FRAGMENT\\n\\nprecision highp float;\\nvarying vec2 vTextureCoord;\\n// uniform sampler2D texture;\\n\\nvoid main(void) {\\n    gl_FragColor = vec4(vTextureCoord, 0.0, 1.0);\\n}\";\n\nvar GLShader = function () {\n\tfunction GLShader() {\n\t\tvar strVertexShader = arguments.length <= 0 || arguments[0] === undefined ? defaultVertexShader : arguments[0];\n\t\tvar strFragmentShader = arguments.length <= 1 || arguments[1] === undefined ? defaultFragmentShader : arguments[1];\n\n\t\t_classCallCheck(this, GLShader);\n\n\t\tgl = _GLTool2.default.gl;\n\t\tthis.parameters = [];\n\t\tthis.uniformValues = {};\n\t\tthis.uniformTextures = [];\n\n\t\tvar vsShader = this._createShaderProgram(strVertexShader, true);\n\t\tvar fsShader = this._createShaderProgram(strFragmentShader, false);\n\t\tthis._attachShaderProgram(vsShader, fsShader);\n\t}\n\n\t_createClass(GLShader, [{\n\t\tkey: 'bind',\n\t\tvalue: function bind() {\n\t\t\tgl.useProgram(this.shaderProgram);\n\n\t\t\t//\tDEFAULT MATRICES\n\t\t\t/*\n   if(this.shaderProgram.pMatrixUniform === undefined) {\tthis.shaderProgram.pMatrixUniform = gl.getUniformLocation(this.shaderProgram, 'uPMatrix');}\n   if(this.shaderProgram.mvMatrixUniform === undefined) {\tthis.shaderProgram.mvMatrixUniform = gl.getUniformLocation(this.shaderProgram, 'uMVMatrix');}\n   if(this.shaderProgram.normalMatrixUniform === undefined) {\tthis.shaderProgram.normalMatrixUniform = gl.getUniformLocation(this.shaderProgram, 'uNormalMatrix');}\n   if(this.shaderProgram.invertMVMatrixUniform === undefined) {\tthis.shaderProgram.invertMVMatrixUniform = gl.getUniformLocation(this.shaderProgram, 'uInvertMVMatrix');}\n   */\n\n\t\t\t_GLTool2.default.useShader(this);\n\t\t\t// GL.setShaderProgram(this.shaderProgram);\n\n\t\t\tthis.uniformTextures = [];\n\t\t}\n\t}, {\n\t\tkey: 'uniform',\n\t\tvalue: function uniform(mName, mType, mValue) {\n\t\t\tvar hasUniform = false;\n\t\t\tvar oUniform = undefined;\n\t\t\tfor (var i = 0; i < this.parameters.length; i++) {\n\t\t\t\toUniform = this.parameters[i];\n\t\t\t\tif (oUniform.name === mName) {\n\t\t\t\t\toUniform.value = mValue;\n\t\t\t\t\thasUniform = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!hasUniform) {\n\t\t\t\tthis.shaderProgram[mName] = gl.getUniformLocation(this.shaderProgram, mName);\n\t\t\t\tthis.parameters.push({ name: mName, type: mType, value: mValue, uniformLoc: this.shaderProgram[mName] });\n\t\t\t} else {\n\t\t\t\tthis.shaderProgram[mName] = oUniform.uniformLoc;\n\t\t\t}\n\n\t\t\tif (mType.indexOf('Matrix') === -1) {\n\t\t\t\tgl[mType](this.shaderProgram[mName], mValue);\n\t\t\t} else {\n\t\t\t\tgl[mType](this.shaderProgram[mName], false, mValue);\n\t\t\t\tthis.uniformValues[mName] = mValue;\n\t\t\t}\n\t\t}\n\t}, {\n\t\tkey: '_createShaderProgram',\n\t\tvalue: function _createShaderProgram(mShaderStr, isVertexShader) {\n\t\t\tvar shaderType = isVertexShader ? _GLTool2.default.VERTEX_SHADER : _GLTool2.default.FRAGMENT_SHADER;\n\t\t\tvar shader = gl.createShader(shaderType);\n\n\t\t\tgl.shaderSource(shader, mShaderStr);\n\t\t\tgl.compileShader(shader);\n\n\t\t\tif (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\n\t\t\t\tconsole.warn('Error in Shader : ', gl.getShaderInfoLog(shader));\n\t\t\t\tconsole.log(addLineNumbers(mShaderStr));\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\treturn shader;\n\t\t}\n\t}, {\n\t\tkey: '_attachShaderProgram',\n\t\tvalue: function _attachShaderProgram(mVertexShader, mFragmentShader) {\n\t\t\tthis.shaderProgram = gl.createProgram();\n\t\t\tgl.attachShader(this.shaderProgram, mVertexShader);\n\t\t\tgl.attachShader(this.shaderProgram, mFragmentShader);\n\t\t\tgl.linkProgram(this.shaderProgram);\n\t\t}\n\t}]);\n\n\treturn GLShader;\n}();\n\nexports.default = GLShader;\n\n},{\"./GLTool\":13}],13:[function(_dereq_,module,exports){\n'use strict';\n\nvar _createClass = function () {\n\tfunction defineProperties(target, props) {\n\t\tfor (var i = 0; i < props.length; i++) {\n\t\t\tvar descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\"value\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);\n\t\t}\n\t}return function (Constructor, protoProps, staticProps) {\n\t\tif (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;\n\t};\n}(); // GLTool.js\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\n\nvar _glMatrix = _dereq_('gl-matrix');\n\nvar _glMatrix2 = _interopRequireDefault(_glMatrix);\n\nfunction _interopRequireDefault(obj) {\n\treturn obj && obj.__esModule ? obj : { default: obj };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n\tif (!(instance instanceof Constructor)) {\n\t\tthrow new TypeError(\"Cannot call a class as a function\");\n\t}\n}\n\nvar GLTool = function () {\n\tfunction GLTool() {\n\t\t_classCallCheck(this, GLTool);\n\n\t\tthis.canvas;\n\t\tthis._viewport = [0, 0, 0, 0];\n\t\tthis._enabledVertexAttribute = [];\n\t\tthis.identityMatrix = _glMatrix2.default.mat4.create();\n\t\tthis._normalMatrix = _glMatrix2.default.mat3.create();\n\t\tthis._inverseViewMatrix = _glMatrix2.default.mat4.create();\n\t\tthis._matrix = _glMatrix2.default.mat4.create();\n\t\t_glMatrix2.default.mat4.identity(this.identityMatrix, this.identityMatrix);\n\t}\n\n\t//\tINITIALIZE\n\n\t_createClass(GLTool, [{\n\t\tkey: 'init',\n\t\tvalue: function init(mCanvas) {\n\t\t\tvar mParameters = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n\t\t\tif (this.canvas !== undefined) {\n\t\t\t\tthis.destroy();\n\t\t\t}\n\n\t\t\tthis.canvas = mCanvas;\n\t\t\tthis.setSize(window.innerWidth, window.innerHeight);\n\t\t\tthis.gl = this.canvas.getContext('webgl', mParameters) || this.canvas.getContext('experimental-webgl', mParameters);\n\n\t\t\t//\textensions\n\t\t\tvar extensions = ['EXT_shader_texture_lod', 'GL_EXT_shader_texture_lod', 'EXT_sRGB', 'WEBKIT_WEBGL_depth_texture', 'EXT_frag_depth', 'OES_texture_float', 'OES_texture_half_float', 'OES_texture_float_linear', 'OES_texture_half_float_linear', 'OES_standard_derivatives'];\n\t\t\tthis.extensions = {};\n\t\t\tfor (var i = 0; i < extensions.length; i++) {\n\t\t\t\tthis.extensions[extensions[i]] = this.gl.getExtension(extensions[i]);\n\t\t\t}\n\n\t\t\t//\tCopy gl Attributes\n\t\t\tvar gl = this.gl;\n\t\t\tthis.VERTEX_SHADER = gl.VERTEX_SHADER;\n\t\t\tthis.FRAGMENT_SHADER = gl.FRAGMENT_SHADER;\n\t\t\tthis.COMPILE_STATUS = gl.COMPILE_STATUS;\n\t\t\tthis.DEPTH_TEST = gl.DEPTH_TEST;\n\t\t\tthis.CULL_FACE = gl.CULL_FACE;\n\t\t\tthis.BLEND = gl.BLEND;\n\n\t\t\tthis.enable(this.DEPTH_TEST);\n\t\t\tthis.enable(this.CULL_FACE);\n\t\t\tthis.enable(this.BLEND);\n\t\t}\n\n\t\t//\tPUBLIC METHODS\n\n\t}, {\n\t\tkey: 'setViewport',\n\t\tvalue: function setViewport(x, y, w, h) {\n\t\t\tvar hasChanged = false;\n\t\t\tif (x !== this._viewport[0]) {\n\t\t\t\thasChanged = true;\n\t\t\t}\n\t\t\tif (y !== this._viewport[1]) {\n\t\t\t\thasChanged = true;\n\t\t\t}\n\t\t\tif (w !== this._viewport[2]) {\n\t\t\t\thasChanged = true;\n\t\t\t}\n\t\t\tif (h !== this._viewport[3]) {\n\t\t\t\thasChanged = true;\n\t\t\t}\n\n\t\t\tif (hasChanged) {\n\t\t\t\tthis.gl.viewport(x, y, w, h);\n\t\t\t\tthis._viewport = [x, y, w, h];\n\t\t\t}\n\t\t}\n\t}, {\n\t\tkey: 'clear',\n\t\tvalue: function clear(r, g, b, a) {\n\t\t\tthis.gl.clearColor(r, g, b, a);\n\t\t\tthis.gl.clear(this.gl.COLOR_BUFFER_BIT | this.gl.DEPTH_BUFFER_BIT);\n\t\t}\n\t}, {\n\t\tkey: 'setMatrices',\n\t\tvalue: function setMatrices(mCamera) {\n\t\t\tthis.camera = mCamera;\n\t\t\tthis.rotate(this.identityMatrix);\n\t\t}\n\t}, {\n\t\tkey: 'useShader',\n\t\tvalue: function useShader(mShader) {\n\t\t\tthis.shader = mShader;\n\t\t\tthis.shaderProgram = this.shader.shaderProgram;\n\t\t}\n\t}, {\n\t\tkey: 'rotate',\n\t\tvalue: function rotate(mRotation) {\n\t\t\t_glMatrix2.default.mat4.copy(this._matrix, mRotation);\n\n\t\t\t_glMatrix2.default.mat4.multiply(this._matrix, this.camera.matrix, this._matrix);\n\t\t\t_glMatrix2.default.mat3.fromMat4(this._normalMatrix, this._matrix);\n\t\t\t_glMatrix2.default.mat3.invert(this._normalMatrix, this._normalMatrix);\n\t\t\t_glMatrix2.default.mat3.transpose(this._normalMatrix, this._normalMatrix);\n\n\t\t\t_glMatrix2.default.mat3.fromMat4(this._inverseViewMatrix, this._matrix);\n\t\t\t_glMatrix2.default.mat3.invert(this._inverseViewMatrix, this._inverseViewMatrix);\n\t\t}\n\t}, {\n\t\tkey: 'draw',\n\t\tvalue: function draw(mMesh) {\n\t\t\tfunction getAttribLoc(gl, shaderProgram, name) {\n\t\t\t\tif (shaderProgram.cacheAttribLoc === undefined) {\n\t\t\t\t\tshaderProgram.cacheAttribLoc = {};\n\t\t\t\t}\n\t\t\t\tif (shaderProgram.cacheAttribLoc[name] === undefined) {\n\t\t\t\t\tshaderProgram.cacheAttribLoc[name] = gl.getAttribLocation(shaderProgram, name);\n\t\t\t\t}\n\n\t\t\t\treturn shaderProgram.cacheAttribLoc[name];\n\t\t\t}\n\n\t\t\t//\tATTRIBUTES\n\t\t\tfor (var i = 0; i < mMesh.attributes.length; i++) {\n\n\t\t\t\tvar attribute = mMesh.attributes[i];\n\t\t\t\tthis.gl.bindBuffer(this.gl.ARRAY_BUFFER, attribute.buffer);\n\t\t\t\tvar attrPosition = getAttribLoc(this.gl, this.shaderProgram, attribute.name);\n\t\t\t\tthis.gl.vertexAttribPointer(attrPosition, attribute.itemSize, this.gl.FLOAT, false, 0, 0);\n\n\t\t\t\tif (this._enabledVertexAttribute.indexOf(attrPosition) === -1) {\n\t\t\t\t\tthis.gl.enableVertexAttribArray(attrPosition);\n\t\t\t\t\tthis._enabledVertexAttribute.push(attrPosition);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t//\tDEFAULT MATRICES\n\t\t\tthis.shader.uniform('uProjectionMatrix', 'uniformMatrix4fv', this.camera.projection);\n\t\t\tthis.shader.uniform('uModelMatrix', 'uniformMatrix4fv', this.identityMatrix);\n\t\t\tthis.shader.uniform('uViewMatrix', 'uniformMatrix4fv', this.camera.matrix);\n\t\t\tthis.shader.uniform('uNormalMatrix', 'uniformMatrix3fv', this._normalMatrix);\n\t\t\tthis.shader.uniform('uViewMatrixInverse', 'uniformMatrix4fv', this._inverseViewMatrix);\n\n\t\t\t//\tDRAWING\n\t\t\tif (mMesh.drawType === this.gl.POINTS) {\n\t\t\t\tthis.gl.drawArrays(mMesh.drawType, 0, mMesh.vertexSize);\n\t\t\t} else {\n\t\t\t\tthis.gl.drawElements(mMesh.drawType, mMesh.iBuffer.numItems, this.gl.UNSIGNED_SHORT, 0);\n\t\t\t}\n\t\t}\n\t}, {\n\t\tkey: 'setSize',\n\t\tvalue: function setSize(mWidth, mHeight) {\n\t\t\tthis._width = mWidth;\n\t\t\tthis._height = mHeight;\n\t\t\tthis.canvas.width = this._width;\n\t\t\tthis.canvas.height = this._height;\n\t\t\tthis._aspectRatio = this._width / this._height;\n\t\t}\n\t}, {\n\t\tkey: 'displayExtensions',\n\t\tvalue: function displayExtensions() {\n\t\t\tconsole.log('Extensions : ', this.extensions);\n\t\t\tfor (var ext in this.extensions) {\n\t\t\t\tif (this.extensions[ext]) {\n\t\t\t\t\tconsole.log(ext, ':', this.extensions[ext]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t//\tBLEND MODES\n\n\t}, {\n\t\tkey: 'enableAlphaBlending',\n\t\tvalue: function enableAlphaBlending() {\n\t\t\tthis.gl.blendFunc(this.gl.SRC_ALPHA, this.gl.ONE_MINUS_SRC_ALPHA);\n\t\t}\n\t}, {\n\t\tkey: 'enableAdditiveBlending',\n\t\tvalue: function enableAdditiveBlending() {\n\t\t\tthis.gl.blendFunc(this.gl.ONE, this.gl.ONE);\n\t\t}\n\n\t\t//\tGL NATIVE FUNCTIONS\n\n\t}, {\n\t\tkey: 'enable',\n\t\tvalue: function enable(mParameter) {\n\t\t\tthis.gl.enable(mParameter);\n\t\t}\n\t}, {\n\t\tkey: 'disable',\n\t\tvalue: function disable(mParameter) {\n\t\t\tthis.gl.disable(mParameter);\n\t\t}\n\t}, {\n\t\tkey: 'viewport',\n\t\tvalue: function viewport(x, y, w, h) {\n\t\t\tthis.setViewport(x, y, w, h);\n\t\t}\n\n\t\t//\tGETTER AND SETTERS\n\n\t}, {\n\t\tkey: 'destroy',\n\n\t\t//\tDESTROY\n\n\t\tvalue: function destroy() {\n\t\t\tthis.canvas = null;\n\t\t\tif (this.canvas.parentNode) {\n\t\t\t\ttry {\n\t\t\t\t\tthis.canvas.parentNode.removeChild(this.canvas);\n\t\t\t\t} catch (e) {\n\t\t\t\t\tconsole.log('Error : ', e);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}, {\n\t\tkey: 'width',\n\t\tget: function get() {\n\t\t\treturn this._width;\n\t\t}\n\t}, {\n\t\tkey: 'height',\n\t\tget: function get() {\n\t\t\treturn this._height;\n\t\t}\n\t}, {\n\t\tkey: 'aspectRatio',\n\t\tget: function get() {\n\t\t\treturn this._aspectRatio;\n\t\t}\n\t}]);\n\n\treturn GLTool;\n}();\n\nvar GL = new GLTool();\n\nexports.default = GL;\n\n},{\"gl-matrix\":1}],14:[function(_dereq_,module,exports){\n'use strict';\n\nvar _createClass = function () {\n\tfunction defineProperties(target, props) {\n\t\tfor (var i = 0; i < props.length; i++) {\n\t\t\tvar descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\"value\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);\n\t\t}\n\t}return function (Constructor, protoProps, staticProps) {\n\t\tif (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;\n\t};\n}(); // Mesh.js\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\n\nvar _GLTool = _dereq_('./GLTool');\n\nvar _GLTool2 = _interopRequireDefault(_GLTool);\n\nfunction _interopRequireDefault(obj) {\n\treturn obj && obj.__esModule ? obj : { default: obj };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n\tif (!(instance instanceof Constructor)) {\n\t\tthrow new TypeError(\"Cannot call a class as a function\");\n\t}\n}\n\nvar gl = undefined;\n\nvar Mesh = function () {\n\tfunction Mesh() {\n\t\tvar mDrawType = arguments.length <= 0 || arguments[0] === undefined ? _GLTool2.default.gl.TRIANGLES : arguments[0];\n\n\t\t_classCallCheck(this, Mesh);\n\n\t\tgl = _GLTool2.default.gl;\n\t\tthis.drawType = mDrawType;\n\t\tthis._attributes = [];\n\t}\n\n\t_createClass(Mesh, [{\n\t\tkey: 'bufferVertex',\n\t\tvalue: function bufferVertex(mArrayVertices) {\n\t\t\tvar isDynamic = arguments.length <= 1 || arguments[1] === undefined ? false : arguments[1];\n\n\t\t\tthis.bufferData(mArrayVertices, 'aVertexPosition', 3, isDynamic);\n\t\t}\n\t}, {\n\t\tkey: 'bufferTexCoords',\n\t\tvalue: function bufferTexCoords(mArrayTexCoords) {\n\t\t\tvar isDynamic = arguments.length <= 1 || arguments[1] === undefined ? false : arguments[1];\n\n\t\t\tthis.bufferData(mArrayTexCoords, 'aTextureCoord', 2, isDynamic);\n\t\t}\n\t}, {\n\t\tkey: 'bufferIndices',\n\t\tvalue: function bufferIndices(mArrayIndices) {\n\t\t\tvar isDynamic = arguments.length <= 1 || arguments[1] === undefined ? false : arguments[1];\n\n\t\t\tvar drawType = isDynamic ? gl.DYNAMIC_DRAW : gl.STATIC_DRAW;\n\t\t\tthis._indices = mArrayIndices;\n\t\t\tthis.iBuffer = gl.createBuffer();\n\t\t\tgl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.iBuffer);\n\t\t\tgl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(mArrayIndices), drawType);\n\t\t\tthis.iBuffer.itemSize = 1;\n\t\t\tthis.iBuffer.numItems = mArrayIndices.length;\n\t\t}\n\t}, {\n\t\tkey: 'bufferData',\n\t\tvalue: function bufferData(mData, mName, mItemSize) {\n\t\t\tvar isDynamic = arguments.length <= 3 || arguments[3] === undefined ? false : arguments[3];\n\n\t\t\tvar index = -1,\n\t\t\t    i = 0;\n\t\t\tvar drawType = isDynamic ? gl.DYNAMIC_DRAW : gl.STATIC_DRAW;\n\t\t\tvar bufferData = [];\n\t\t\tvar buffer = undefined,\n\t\t\t    dataArray = undefined;\n\n\t\t\t//\tCheck for existing attributes\n\t\t\tfor (i = 0; i < this._attributes.length; i++) {\n\t\t\t\tif (this._attributes[i].name === mName) {\n\t\t\t\t\tthis._attributes[i].data = mData;\n\t\t\t\t\tindex = i;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t//\tflatten buffer data\t\t\n\t\t\tfor (i = 0; i < mData.length; i++) {\n\t\t\t\tfor (var j = 0; j < mData[i].length; j++) {\n\t\t\t\t\tbufferData.push(mData[i][j]);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (index === -1) {\n\n\t\t\t\t//\tattribute not exist yet, create new buffer\n\t\t\t\tbuffer = gl.createBuffer();\n\t\t\t\tgl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n\n\t\t\t\tdataArray = new Float32Array(bufferData);\n\t\t\t\tgl.bufferData(gl.ARRAY_BUFFER, dataArray, drawType);\n\t\t\t\tthis._attributes.push({ name: mName, data: mData, itemSize: mItemSize, buffer: buffer, dataArray: dataArray });\n\t\t\t} else {\n\n\t\t\t\t//\tattribute existed, replace with new data\n\t\t\t\tbuffer = this._attributes[index].buffer;\n\t\t\t\tgl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n\t\t\t\tdataArray = this._attributes[index].dataArray;\n\t\t\t\tfor (i = 0; i < bufferData.length; i++) {\n\t\t\t\t\tdataArray[i] = bufferData[i];\n\t\t\t\t}\n\t\t\t\tgl.bufferData(gl.ARRAY_BUFFER, dataArray, drawType);\n\t\t\t}\n\t\t}\n\t}, {\n\t\tkey: 'attributes',\n\t\tget: function get() {\n\t\t\treturn this._attributes;\n\t\t}\n\t}]);\n\n\treturn Mesh;\n}();\n\nexports.default = Mesh;\n\n},{\"./GLTool\":13}],15:[function(_dereq_,module,exports){\n'use strict';\n\nvar _createClass = function () {\n\tfunction defineProperties(target, props) {\n\t\tfor (var i = 0; i < props.length; i++) {\n\t\t\tvar descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\"value\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);\n\t\t}\n\t}return function (Constructor, protoProps, staticProps) {\n\t\tif (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;\n\t};\n}(); // Camera.js\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\n\nvar _glMatrix = _dereq_('gl-matrix');\n\nvar _glMatrix2 = _interopRequireDefault(_glMatrix);\n\nfunction _interopRequireDefault(obj) {\n\treturn obj && obj.__esModule ? obj : { default: obj };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n\tif (!(instance instanceof Constructor)) {\n\t\tthrow new TypeError(\"Cannot call a class as a function\");\n\t}\n}\n\nvar Camera = function () {\n\tfunction Camera() {\n\t\t_classCallCheck(this, Camera);\n\n\t\t//\tVIEW MATRIX\n\t\tthis._matrix = _glMatrix2.default.mat4.create();\n\n\t\t//\tPROJECTION MATRIX\n\t\tthis._projection = _glMatrix2.default.mat4.create();\n\n\t\t//\tPOSITION OF CAMERA\n\t\tthis.position = _glMatrix2.default.vec3.create();\n\t}\n\n\t_createClass(Camera, [{\n\t\tkey: 'lookAt',\n\t\tvalue: function lookAt(aEye, aCenter, aUp) {\n\t\t\t_glMatrix2.default.vec3.copy(this.position, aEye);\n\t\t\t_glMatrix2.default.mat4.identity(this._matrix);\n\t\t\t_glMatrix2.default.mat4.lookAt(this._matrix, aEye, aCenter, aUp);\n\t\t}\n\n\t\t//\tGETTERS\n\n\t}, {\n\t\tkey: 'matrix',\n\t\tget: function get() {\n\t\t\treturn this._matrix;\n\t\t}\n\t}, {\n\t\tkey: 'projection',\n\t\tget: function get() {\n\t\t\treturn this._projection;\n\t\t}\n\t}]);\n\n\treturn Camera;\n}();\n\nexports.default = Camera;\n\n},{\"gl-matrix\":1}],16:[function(_dereq_,module,exports){\n'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n\nvar _createClass = function () {\n\tfunction defineProperties(target, props) {\n\t\tfor (var i = 0; i < props.length; i++) {\n\t\t\tvar descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\"value\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);\n\t\t}\n\t}return function (Constructor, protoProps, staticProps) {\n\t\tif (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;\n\t};\n}();\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\n\nvar _Camera2 = _dereq_('./Camera');\n\nvar _Camera3 = _interopRequireDefault(_Camera2);\n\nvar _glMatrix = _dereq_('gl-matrix');\n\nvar _glMatrix2 = _interopRequireDefault(_glMatrix);\n\nfunction _interopRequireDefault(obj) {\n\treturn obj && obj.__esModule ? obj : { default: obj };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n\tif (!(instance instanceof Constructor)) {\n\t\tthrow new TypeError(\"Cannot call a class as a function\");\n\t}\n}\n\nfunction _possibleConstructorReturn(self, call) {\n\tif (!self) {\n\t\tthrow new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n\t}return call && ((typeof call === \"undefined\" ? \"undefined\" : _typeof(call)) === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n\tif (typeof superClass !== \"function\" && superClass !== null) {\n\t\tthrow new TypeError(\"Super expression must either be null or a function, not \" + (typeof superClass === \"undefined\" ? \"undefined\" : _typeof(superClass)));\n\t}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n} // CameraOrtho.js\n\nvar CameraOrtho = function (_Camera) {\n\t_inherits(CameraOrtho, _Camera);\n\n\tfunction CameraOrtho() {\n\t\t_classCallCheck(this, CameraOrtho);\n\n\t\tvar _this = _possibleConstructorReturn(this, Object.getPrototypeOf(CameraOrtho).call(this));\n\n\t\tvar eye = _glMatrix2.default.vec3.clone([0, 0, 5]);\n\t\tvar center = _glMatrix2.default.vec3.create();\n\t\tvar up = _glMatrix2.default.vec3.clone([0, -1, 0]);\n\t\t_this.lookAt(eye, center, up);\n\t\t_this.ortho(1, -1, 1, -1);\n\t\treturn _this;\n\t}\n\n\t_createClass(CameraOrtho, [{\n\t\tkey: 'setBoundary',\n\t\tvalue: function setBoundary(left, right, top, bottom) {\n\n\t\t\tthis.ortho(left, right, top, bottom);\n\t\t}\n\t}, {\n\t\tkey: 'ortho',\n\t\tvalue: function ortho(left, right, top, bottom) {\n\t\t\tthis.left = left;\n\t\t\tthis.right = right;\n\t\t\tthis.top = top;\n\t\t\tthis.bottom = bottom;\n\t\t\t_glMatrix2.default.mat4.ortho(this._projection, left, right, top, bottom, 0, 10000);\n\t\t}\n\t}]);\n\n\treturn CameraOrtho;\n}(_Camera3.default);\n\nexports.default = CameraOrtho;\n\n},{\"./Camera\":15,\"gl-matrix\":1}],17:[function(_dereq_,module,exports){\n'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n\nvar _createClass = function () {\n\tfunction defineProperties(target, props) {\n\t\tfor (var i = 0; i < props.length; i++) {\n\t\t\tvar descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\"value\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);\n\t\t}\n\t}return function (Constructor, protoProps, staticProps) {\n\t\tif (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;\n\t};\n}();\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\n\nvar _Camera2 = _dereq_('./Camera');\n\nvar _Camera3 = _interopRequireDefault(_Camera2);\n\nvar _glMatrix = _dereq_('gl-matrix');\n\nvar _glMatrix2 = _interopRequireDefault(_glMatrix);\n\nfunction _interopRequireDefault(obj) {\n\treturn obj && obj.__esModule ? obj : { default: obj };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n\tif (!(instance instanceof Constructor)) {\n\t\tthrow new TypeError(\"Cannot call a class as a function\");\n\t}\n}\n\nfunction _possibleConstructorReturn(self, call) {\n\tif (!self) {\n\t\tthrow new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n\t}return call && ((typeof call === \"undefined\" ? \"undefined\" : _typeof(call)) === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n\tif (typeof superClass !== \"function\" && superClass !== null) {\n\t\tthrow new TypeError(\"Super expression must either be null or a function, not \" + (typeof superClass === \"undefined\" ? \"undefined\" : _typeof(superClass)));\n\t}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n} // CameraPerspective.js\n\nvar CameraPerspective = function (_Camera) {\n\t_inherits(CameraPerspective, _Camera);\n\n\tfunction CameraPerspective() {\n\t\t_classCallCheck(this, CameraPerspective);\n\n\t\treturn _possibleConstructorReturn(this, Object.getPrototypeOf(CameraPerspective).call(this));\n\t}\n\n\t_createClass(CameraPerspective, [{\n\t\tkey: 'setPerspective',\n\t\tvalue: function setPerspective(mFov, mAspectRatio, mNear, mFar) {\n\n\t\t\tthis._fov = mFov;\n\t\t\tthis._near = mNear;\n\t\t\tthis._far = mFar;\n\t\t\tthis._aspectRatio = mAspectRatio;\n\t\t\t_glMatrix2.default.mat4.perspective(this._projection, mFov, mAspectRatio, mNear, mFar);\n\t\t}\n\t}, {\n\t\tkey: 'setAspectRatio',\n\t\tvalue: function setAspectRatio(mAspectRatio) {\n\t\t\tthis._aspectRatio = mAspectRatio;\n\t\t\t_glMatrix2.default.mat4.perspective(this.projection, this._fov, mAspectRatio, this._near, this._far);\n\t\t}\n\t}]);\n\n\treturn CameraPerspective;\n}(_Camera3.default);\n\nexports.default = CameraPerspective;\n\n},{\"./Camera\":15,\"gl-matrix\":1}],18:[function(_dereq_,module,exports){\n'use strict';\n\nvar _createClass = function () {\n\tfunction defineProperties(target, props) {\n\t\tfor (var i = 0; i < props.length; i++) {\n\t\t\tvar descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\"value\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);\n\t\t}\n\t}return function (Constructor, protoProps, staticProps) {\n\t\tif (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;\n\t};\n}(); // EaseNumber.js\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\n\nvar _Scheduler = _dereq_('./Scheduler');\n\nvar _Scheduler2 = _interopRequireDefault(_Scheduler);\n\nfunction _interopRequireDefault(obj) {\n\treturn obj && obj.__esModule ? obj : { default: obj };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n\tif (!(instance instanceof Constructor)) {\n\t\tthrow new TypeError(\"Cannot call a class as a function\");\n\t}\n}\n\nvar EaseNumber = function () {\n\tfunction EaseNumber(mValue, mEasing) {\n\t\tvar _this = this;\n\n\t\t_classCallCheck(this, EaseNumber);\n\n\t\tthis.easing = mEasing;\n\t\tthis._value = mValue;\n\t\tthis._targetValue = mValue;\n\t\t_Scheduler2.default.addEF(function () {\n\t\t\treturn _this._update();\n\t\t});\n\t}\n\n\t_createClass(EaseNumber, [{\n\t\tkey: '_update',\n\t\tvalue: function _update() {\n\t\t\tthis._checkLimit();\n\t\t\tthis._value += (this._targetValue - this._value) * this.easing;\n\t\t}\n\t}, {\n\t\tkey: 'setTo',\n\t\tvalue: function setTo(mValue) {\n\t\t\tthis._targetValue = this._value = mValue;\n\t\t}\n\t}, {\n\t\tkey: 'add',\n\t\tvalue: function add(mAdd) {\n\t\t\tthis._targetValue += mAdd;\n\t\t}\n\t}, {\n\t\tkey: 'limit',\n\t\tvalue: function limit(mMin, mMax) {\n\t\t\tif (mMin > mMax) {\n\t\t\t\tthis.limit(mMax, mMin);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis._min = mMin;\n\t\t\tthis._max = mMax;\n\n\t\t\tthis._checkLimit();\n\t\t}\n\t}, {\n\t\tkey: '_checkLimit',\n\t\tvalue: function _checkLimit() {\n\t\t\tif (this._min !== undefined && this._targetValue < this._min) {\n\t\t\t\tthis._targetValue = this._min;\n\t\t\t}\n\n\t\t\tif (this._max !== undefined && this._targetValue > this._max) {\n\t\t\t\tthis._targetValue = this._max;\n\t\t\t}\n\t\t}\n\n\t\t//\tGETTERS / SETTERS\n\n\t}, {\n\t\tkey: 'value',\n\t\tset: function set(mValue) {\n\t\t\tthis._targetValue = mValue;\n\t\t},\n\t\tget: function get() {\n\t\t\treturn this._value;\n\t\t}\n\t}, {\n\t\tkey: 'targetValue',\n\t\tget: function get() {\n\t\t\treturn this._targetValue;\n\t\t}\n\t}]);\n\n\treturn EaseNumber;\n}();\n\nexports.default = EaseNumber;\n\n},{\"./Scheduler\":20}],19:[function(_dereq_,module,exports){\n'use strict';\n\nvar _createClass = function () {\n\tfunction defineProperties(target, props) {\n\t\tfor (var i = 0; i < props.length; i++) {\n\t\t\tvar descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\"value\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);\n\t\t}\n\t}return function (Constructor, protoProps, staticProps) {\n\t\tif (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;\n\t};\n}();\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\n\nfunction _classCallCheck(instance, Constructor) {\n\tif (!(instance instanceof Constructor)) {\n\t\tthrow new TypeError(\"Cannot call a class as a function\");\n\t}\n}\n\n// EventDispatcher.js\n\nvar supportsCustomEvents = true;\ntry {\n\tvar newTestCustomEvent = document.createEvent('CustomEvent');\n\tnewTestCustomEvent = null;\n} catch (e) {\n\tsupportsCustomEvents = false;\n}\n\nvar EventDispatcher = function () {\n\tfunction EventDispatcher() {\n\t\t_classCallCheck(this, EventDispatcher);\n\t}\n\n\t_createClass(EventDispatcher, [{\n\t\tkey: 'addEventListener',\n\t\tvalue: function addEventListener(aEventType, aFunction) {\n\n\t\t\tif (this._eventListeners === null) {\n\t\t\t\tthis._eventListeners = {};\n\t\t\t}\n\t\t\tif (!this._eventListeners[aEventType]) {\n\t\t\t\tthis._eventListeners[aEventType] = [];\n\t\t\t}\n\t\t\tthis._eventListeners[aEventType].push(aFunction);\n\n\t\t\treturn this;\n\t\t}\n\t}, {\n\t\tkey: 'removeEventListener',\n\t\tvalue: function removeEventListener(aEventType, aFunction) {\n\t\t\tif (this._eventListeners === null) {\n\t\t\t\tthis._eventListeners = {};\n\t\t\t}\n\t\t\tvar currentArray = this._eventListeners[aEventType];\n\n\t\t\tif (typeof currentArray === 'undefined') {\n\t\t\t\treturn this;\n\t\t\t}\n\n\t\t\tvar currentArrayLength = currentArray.length;\n\t\t\tfor (var i = 0; i < currentArrayLength; i++) {\n\t\t\t\tif (currentArray[i] === aFunction) {\n\t\t\t\t\tcurrentArray.splice(i, 1);\n\t\t\t\t\ti--;\n\t\t\t\t\tcurrentArrayLength--;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn this;\n\t\t}\n\t}, {\n\t\tkey: 'dispatchEvent',\n\t\tvalue: function dispatchEvent(aEvent) {\n\t\t\tif (this._eventListeners === null) {\n\t\t\t\tthis._eventListeners = {};\n\t\t\t}\n\t\t\tvar eventType = aEvent.type;\n\n\t\t\ttry {\n\t\t\t\tif (aEvent.target === null) {\n\t\t\t\t\taEvent.target = this;\n\t\t\t\t}\n\t\t\t\taEvent.currentTarget = this;\n\t\t\t} catch (theError) {\n\t\t\t\tvar newEvent = { 'type': eventType, 'detail': aEvent.detail, 'dispatcher': this };\n\t\t\t\treturn this.dispatchEvent(newEvent);\n\t\t\t}\n\n\t\t\tvar currentEventListeners = this._eventListeners[eventType];\n\t\t\tif (currentEventListeners !== null && currentEventListeners !== undefined) {\n\t\t\t\tvar currentArray = this._copyArray(currentEventListeners);\n\t\t\t\tvar currentArrayLength = currentArray.length;\n\t\t\t\tfor (var i = 0; i < currentArrayLength; i++) {\n\t\t\t\t\tvar currentFunction = currentArray[i];\n\t\t\t\t\tcurrentFunction.call(this, aEvent);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn this;\n\t\t}\n\t}, {\n\t\tkey: 'dispatchCustomEvent',\n\t\tvalue: function dispatchCustomEvent(aEventType, aDetail) {\n\t\t\tvar newEvent = undefined;\n\t\t\tif (supportsCustomEvents) {\n\t\t\t\tnewEvent = document.createEvent('CustomEvent');\n\t\t\t\tnewEvent.dispatcher = this;\n\t\t\t\tnewEvent.initCustomEvent(aEventType, false, false, aDetail);\n\t\t\t} else {\n\t\t\t\tnewEvent = { 'type': aEventType, 'detail': aDetail, 'dispatcher': this };\n\t\t\t}\n\t\t\treturn this.dispatchEvent(newEvent);\n\t\t}\n\t}, {\n\t\tkey: '_destroy',\n\t\tvalue: function _destroy() {\n\t\t\tif (this._eventListeners !== null) {\n\t\t\t\tfor (var objectName in this._eventListeners) {\n\t\t\t\t\tif (this._eventListeners.hasOwnProperty(objectName)) {\n\t\t\t\t\t\tvar currentArray = this._eventListeners[objectName];\n\t\t\t\t\t\tvar currentArrayLength = currentArray.length;\n\t\t\t\t\t\tfor (var i = 0; i < currentArrayLength; i++) {\n\t\t\t\t\t\t\tcurrentArray[i] = null;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdelete this._eventListeners[objectName];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tthis._eventListeners = null;\n\t\t\t}\n\t\t}\n\t}, {\n\t\tkey: '_copyArray',\n\t\tvalue: function _copyArray(aArray) {\n\t\t\tvar currentArray = new Array(aArray.length);\n\t\t\tvar currentArrayLength = currentArray.length;\n\t\t\tfor (var i = 0; i < currentArrayLength; i++) {\n\t\t\t\tcurrentArray[i] = aArray[i];\n\t\t\t}\n\t\t\treturn currentArray;\n\t\t}\n\t}]);\n\n\treturn EventDispatcher;\n}();\n\nexports.default = EventDispatcher;\n\n},{}],20:[function(_dereq_,module,exports){\n// Scheduler.js\n\n'use strict';\n\nvar _createClass = function () {\n\tfunction defineProperties(target, props) {\n\t\tfor (var i = 0; i < props.length; i++) {\n\t\t\tvar descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\"value\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);\n\t\t}\n\t}return function (Constructor, protoProps, staticProps) {\n\t\tif (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;\n\t};\n}();\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\n\nfunction _classCallCheck(instance, Constructor) {\n\tif (!(instance instanceof Constructor)) {\n\t\tthrow new TypeError(\"Cannot call a class as a function\");\n\t}\n}\n\nif (window.requestAnimFrame === undefined) {\n\twindow.requestAnimFrame = function () {\n\t\treturn window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame || function (callback) {\n\t\t\twindow.setTimeout(callback, 1000 / 60);\n\t\t};\n\t}();\n}\n\nvar FRAMERATE = 60;\n\nvar Scheduler = function () {\n\tfunction Scheduler() {\n\t\t_classCallCheck(this, Scheduler);\n\n\t\tthis._delayTasks = [];\n\t\tthis._nextTasks = [];\n\t\tthis._deferTasks = [];\n\t\tthis._highTasks = [];\n\t\tthis._usurpTask = [];\n\t\tthis._enterframeTasks = [];\n\t\tthis._idTable = 0;\n\n\t\tthis._loop();\n\t}\n\n\t//\tPUBLIC METHODS\n\n\t_createClass(Scheduler, [{\n\t\tkey: 'addEF',\n\t\tvalue: function addEF(func, params) {\n\t\t\tparams = params || [];\n\t\t\tvar id = this._idTable;\n\t\t\tthis._enterframeTasks[id] = { func: func, params: params };\n\t\t\tthis._idTable++;\n\t\t\treturn id;\n\t\t}\n\t}, {\n\t\tkey: 'removeEF',\n\t\tvalue: function removeEF(id) {\n\t\t\tif (this._enterframeTasks[id] !== undefined) {\n\t\t\t\tthis._enterframeTasks[id] = null;\n\t\t\t}\n\t\t\treturn -1;\n\t\t}\n\t}, {\n\t\tkey: 'delay',\n\t\tvalue: function delay(func, params, _delay) {\n\t\t\tvar time = new Date().getTime();\n\t\t\tvar t = { func: func, params: params, delay: _delay, time: time };\n\t\t\tthis._delayTasks.push(t);\n\t\t}\n\t}, {\n\t\tkey: 'defer',\n\t\tvalue: function defer(func, params) {\n\t\t\tvar t = { func: func, params: params };\n\t\t\tthis._deferTasks.push(t);\n\t\t}\n\t}, {\n\t\tkey: 'next',\n\t\tvalue: function next(func, params) {\n\t\t\tvar t = { func: func, params: params };\n\t\t\tthis._nextTasks.push(t);\n\t\t}\n\t}, {\n\t\tkey: 'usurp',\n\t\tvalue: function usurp(func, params) {\n\t\t\tvar t = { func: func, params: params };\n\t\t\tthis._usurpTask.push(t);\n\t\t}\n\n\t\t//\tPRIVATE METHODS\n\n\t}, {\n\t\tkey: '_process',\n\t\tvalue: function _process() {\n\t\t\tvar i = 0,\n\t\t\t    task = undefined,\n\t\t\t    interval = undefined,\n\t\t\t    current = undefined;\n\t\t\tfor (i = 0; i < this._enterframeTasks.length; i++) {\n\t\t\t\ttask = this._enterframeTasks[i];\n\t\t\t\tif (task !== null && task !== undefined) {\n\t\t\t\t\t// task.func.apply(task.scope, task.params);\n\t\t\t\t\t// console.log(task.func());\n\t\t\t\t\ttask.func(task.params);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\twhile (this._highTasks.length > 0) {\n\t\t\t\ttask = this._highTasks.pop();\n\t\t\t\ttask.func(task.params);\n\t\t\t\t// task.func.apply(task.scope, task.params);\n\t\t\t}\n\n\t\t\tvar startTime = new Date().getTime();\n\n\t\t\tfor (i = 0; i < this._delayTasks.length; i++) {\n\t\t\t\ttask = this._delayTasks[i];\n\t\t\t\tif (startTime - task.time > task.delay) {\n\t\t\t\t\t// task.func.apply(task.scope, task.params);\n\t\t\t\t\ttask.func(task.params);\n\t\t\t\t\tthis._delayTasks.splice(i, 1);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tstartTime = new Date().getTime();\n\t\t\tinterval = 1000 / FRAMERATE;\n\t\t\twhile (this._deferTasks.length > 0) {\n\t\t\t\ttask = this._deferTasks.shift();\n\t\t\t\tcurrent = new Date().getTime();\n\t\t\t\tif (current - startTime < interval) {\n\t\t\t\t\t// task.func.apply(task.scope, task.params);\n\t\t\t\t\ttask.func(task.params);\n\t\t\t\t} else {\n\t\t\t\t\tthis._deferTasks.unshift(task);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tstartTime = new Date().getTime();\n\t\t\tinterval = 1000 / FRAMERATE;\n\t\t\twhile (this._usurpTask.length > 0) {\n\t\t\t\ttask = this._usurpTask.shift();\n\t\t\t\tcurrent = new Date().getTime();\n\t\t\t\tif (current - startTime < interval) {\n\t\t\t\t\t// task.func.apply(task.scope, task.params);\n\t\t\t\t\ttask.func(task.params);\n\t\t\t\t} else {\n\t\t\t\t\t// this._usurpTask.unshift(task);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis._highTasks = this._highTasks.concat(this._nextTasks);\n\t\t\tthis._nextTasks = [];\n\t\t\tthis._usurpTask = [];\n\t\t}\n\t}, {\n\t\tkey: '_loop',\n\t\tvalue: function _loop() {\n\t\t\tvar _this = this;\n\n\t\t\tthis._process();\n\t\t\twindow.requestAnimFrame(function () {\n\t\t\t\treturn _this._loop();\n\t\t\t});\n\t\t}\n\t}]);\n\n\treturn Scheduler;\n}();\n\nvar scheduler = new Scheduler();\n\nexports.default = scheduler;\n\n},{}]},{},[11])(11)\n});\n\n","/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE. */\n\n/**\n * @class Common utilities\n * @name glMatrix\n */\nvar glMatrix = {};\n\n// Constants\nglMatrix.EPSILON = 0.000001;\nglMatrix.ARRAY_TYPE = (typeof Float32Array !== 'undefined') ? Float32Array : Array;\nglMatrix.RANDOM = Math.random;\n\n/**\n * Sets the type of array used when creating new vectors and matrices\n *\n * @param {Type} type Array type, such as Float32Array or Array\n */\nglMatrix.setMatrixArrayType = function(type) {\n    GLMAT_ARRAY_TYPE = type;\n}\n\nvar degree = Math.PI / 180;\n\n/**\n* Convert Degree To Radian\n*\n* @param {Number} Angle in Degrees\n*/\nglMatrix.toRadian = function(a){\n     return a * degree;\n}\n\nmodule.exports = glMatrix;\n","/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE. */\n\nvar glMatrix = require(\"./common.js\");\n\n/**\n * @class 2x2 Matrix\n * @name mat2\n */\nvar mat2 = {};\n\n/**\n * Creates a new identity mat2\n *\n * @returns {mat2} a new 2x2 matrix\n */\nmat2.create = function() {\n    var out = new glMatrix.ARRAY_TYPE(4);\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 1;\n    return out;\n};\n\n/**\n * Creates a new mat2 initialized with values from an existing matrix\n *\n * @param {mat2} a matrix to clone\n * @returns {mat2} a new 2x2 matrix\n */\nmat2.clone = function(a) {\n    var out = new glMatrix.ARRAY_TYPE(4);\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    return out;\n};\n\n/**\n * Copy the values from one mat2 to another\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the source matrix\n * @returns {mat2} out\n */\nmat2.copy = function(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    return out;\n};\n\n/**\n * Set a mat2 to the identity matrix\n *\n * @param {mat2} out the receiving matrix\n * @returns {mat2} out\n */\nmat2.identity = function(out) {\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 1;\n    return out;\n};\n\n/**\n * Transpose the values of a mat2\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the source matrix\n * @returns {mat2} out\n */\nmat2.transpose = function(out, a) {\n    // If we are transposing ourselves we can skip a few steps but have to cache some values\n    if (out === a) {\n        var a1 = a[1];\n        out[1] = a[2];\n        out[2] = a1;\n    } else {\n        out[0] = a[0];\n        out[1] = a[2];\n        out[2] = a[1];\n        out[3] = a[3];\n    }\n    \n    return out;\n};\n\n/**\n * Inverts a mat2\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the source matrix\n * @returns {mat2} out\n */\nmat2.invert = function(out, a) {\n    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3],\n\n        // Calculate the determinant\n        det = a0 * a3 - a2 * a1;\n\n    if (!det) {\n        return null;\n    }\n    det = 1.0 / det;\n    \n    out[0] =  a3 * det;\n    out[1] = -a1 * det;\n    out[2] = -a2 * det;\n    out[3] =  a0 * det;\n\n    return out;\n};\n\n/**\n * Calculates the adjugate of a mat2\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the source matrix\n * @returns {mat2} out\n */\nmat2.adjoint = function(out, a) {\n    // Caching this value is nessecary if out == a\n    var a0 = a[0];\n    out[0] =  a[3];\n    out[1] = -a[1];\n    out[2] = -a[2];\n    out[3] =  a0;\n\n    return out;\n};\n\n/**\n * Calculates the determinant of a mat2\n *\n * @param {mat2} a the source matrix\n * @returns {Number} determinant of a\n */\nmat2.determinant = function (a) {\n    return a[0] * a[3] - a[2] * a[1];\n};\n\n/**\n * Multiplies two mat2's\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the first operand\n * @param {mat2} b the second operand\n * @returns {mat2} out\n */\nmat2.multiply = function (out, a, b) {\n    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];\n    var b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3];\n    out[0] = a0 * b0 + a2 * b1;\n    out[1] = a1 * b0 + a3 * b1;\n    out[2] = a0 * b2 + a2 * b3;\n    out[3] = a1 * b2 + a3 * b3;\n    return out;\n};\n\n/**\n * Alias for {@link mat2.multiply}\n * @function\n */\nmat2.mul = mat2.multiply;\n\n/**\n * Rotates a mat2 by the given angle\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat2} out\n */\nmat2.rotate = function (out, a, rad) {\n    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3],\n        s = Math.sin(rad),\n        c = Math.cos(rad);\n    out[0] = a0 *  c + a2 * s;\n    out[1] = a1 *  c + a3 * s;\n    out[2] = a0 * -s + a2 * c;\n    out[3] = a1 * -s + a3 * c;\n    return out;\n};\n\n/**\n * Scales the mat2 by the dimensions in the given vec2\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the matrix to rotate\n * @param {vec2} v the vec2 to scale the matrix by\n * @returns {mat2} out\n **/\nmat2.scale = function(out, a, v) {\n    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3],\n        v0 = v[0], v1 = v[1];\n    out[0] = a0 * v0;\n    out[1] = a1 * v0;\n    out[2] = a2 * v1;\n    out[3] = a3 * v1;\n    return out;\n};\n\n/**\n * Creates a matrix from a given angle\n * This is equivalent to (but much faster than):\n *\n *     mat2.identity(dest);\n *     mat2.rotate(dest, dest, rad);\n *\n * @param {mat2} out mat2 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat2} out\n */\nmat2.fromRotation = function(out, rad) {\n    var s = Math.sin(rad),\n        c = Math.cos(rad);\n    out[0] = c;\n    out[1] = s;\n    out[2] = -s;\n    out[3] = c;\n    return out;\n}\n\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat2.identity(dest);\n *     mat2.scale(dest, dest, vec);\n *\n * @param {mat2} out mat2 receiving operation result\n * @param {vec2} v Scaling vector\n * @returns {mat2} out\n */\nmat2.fromScaling = function(out, v) {\n    out[0] = v[0];\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = v[1];\n    return out;\n}\n\n/**\n * Returns a string representation of a mat2\n *\n * @param {mat2} mat matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\nmat2.str = function (a) {\n    return 'mat2(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';\n};\n\n/**\n * Returns Frobenius norm of a mat2\n *\n * @param {mat2} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\nmat2.frob = function (a) {\n    return(Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2)))\n};\n\n/**\n * Returns L, D and U matrices (Lower triangular, Diagonal and Upper triangular) by factorizing the input matrix\n * @param {mat2} L the lower triangular matrix \n * @param {mat2} D the diagonal matrix \n * @param {mat2} U the upper triangular matrix \n * @param {mat2} a the input matrix to factorize\n */\n\nmat2.LDU = function (L, D, U, a) { \n    L[2] = a[2]/a[0]; \n    U[0] = a[0]; \n    U[1] = a[1]; \n    U[3] = a[3] - L[2] * U[1]; \n    return [L, D, U];       \n}; \n\n\nmodule.exports = mat2;\n","/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE. */\n\nvar glMatrix = require(\"./common.js\");\n\n/**\n * @class 2x3 Matrix\n * @name mat2d\n * \n * @description \n * A mat2d contains six elements defined as:\n * <pre>\n * [a, c, tx,\n *  b, d, ty]\n * </pre>\n * This is a short form for the 3x3 matrix:\n * <pre>\n * [a, c, tx,\n *  b, d, ty,\n *  0, 0, 1]\n * </pre>\n * The last row is ignored so the array is shorter and operations are faster.\n */\nvar mat2d = {};\n\n/**\n * Creates a new identity mat2d\n *\n * @returns {mat2d} a new 2x3 matrix\n */\nmat2d.create = function() {\n    var out = new glMatrix.ARRAY_TYPE(6);\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 1;\n    out[4] = 0;\n    out[5] = 0;\n    return out;\n};\n\n/**\n * Creates a new mat2d initialized with values from an existing matrix\n *\n * @param {mat2d} a matrix to clone\n * @returns {mat2d} a new 2x3 matrix\n */\nmat2d.clone = function(a) {\n    var out = new glMatrix.ARRAY_TYPE(6);\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[4] = a[4];\n    out[5] = a[5];\n    return out;\n};\n\n/**\n * Copy the values from one mat2d to another\n *\n * @param {mat2d} out the receiving matrix\n * @param {mat2d} a the source matrix\n * @returns {mat2d} out\n */\nmat2d.copy = function(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[4] = a[4];\n    out[5] = a[5];\n    return out;\n};\n\n/**\n * Set a mat2d to the identity matrix\n *\n * @param {mat2d} out the receiving matrix\n * @returns {mat2d} out\n */\nmat2d.identity = function(out) {\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 1;\n    out[4] = 0;\n    out[5] = 0;\n    return out;\n};\n\n/**\n * Inverts a mat2d\n *\n * @param {mat2d} out the receiving matrix\n * @param {mat2d} a the source matrix\n * @returns {mat2d} out\n */\nmat2d.invert = function(out, a) {\n    var aa = a[0], ab = a[1], ac = a[2], ad = a[3],\n        atx = a[4], aty = a[5];\n\n    var det = aa * ad - ab * ac;\n    if(!det){\n        return null;\n    }\n    det = 1.0 / det;\n\n    out[0] = ad * det;\n    out[1] = -ab * det;\n    out[2] = -ac * det;\n    out[3] = aa * det;\n    out[4] = (ac * aty - ad * atx) * det;\n    out[5] = (ab * atx - aa * aty) * det;\n    return out;\n};\n\n/**\n * Calculates the determinant of a mat2d\n *\n * @param {mat2d} a the source matrix\n * @returns {Number} determinant of a\n */\nmat2d.determinant = function (a) {\n    return a[0] * a[3] - a[1] * a[2];\n};\n\n/**\n * Multiplies two mat2d's\n *\n * @param {mat2d} out the receiving matrix\n * @param {mat2d} a the first operand\n * @param {mat2d} b the second operand\n * @returns {mat2d} out\n */\nmat2d.multiply = function (out, a, b) {\n    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5],\n        b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3], b4 = b[4], b5 = b[5];\n    out[0] = a0 * b0 + a2 * b1;\n    out[1] = a1 * b0 + a3 * b1;\n    out[2] = a0 * b2 + a2 * b3;\n    out[3] = a1 * b2 + a3 * b3;\n    out[4] = a0 * b4 + a2 * b5 + a4;\n    out[5] = a1 * b4 + a3 * b5 + a5;\n    return out;\n};\n\n/**\n * Alias for {@link mat2d.multiply}\n * @function\n */\nmat2d.mul = mat2d.multiply;\n\n/**\n * Rotates a mat2d by the given angle\n *\n * @param {mat2d} out the receiving matrix\n * @param {mat2d} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat2d} out\n */\nmat2d.rotate = function (out, a, rad) {\n    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5],\n        s = Math.sin(rad),\n        c = Math.cos(rad);\n    out[0] = a0 *  c + a2 * s;\n    out[1] = a1 *  c + a3 * s;\n    out[2] = a0 * -s + a2 * c;\n    out[3] = a1 * -s + a3 * c;\n    out[4] = a4;\n    out[5] = a5;\n    return out;\n};\n\n/**\n * Scales the mat2d by the dimensions in the given vec2\n *\n * @param {mat2d} out the receiving matrix\n * @param {mat2d} a the matrix to translate\n * @param {vec2} v the vec2 to scale the matrix by\n * @returns {mat2d} out\n **/\nmat2d.scale = function(out, a, v) {\n    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5],\n        v0 = v[0], v1 = v[1];\n    out[0] = a0 * v0;\n    out[1] = a1 * v0;\n    out[2] = a2 * v1;\n    out[3] = a3 * v1;\n    out[4] = a4;\n    out[5] = a5;\n    return out;\n};\n\n/**\n * Translates the mat2d by the dimensions in the given vec2\n *\n * @param {mat2d} out the receiving matrix\n * @param {mat2d} a the matrix to translate\n * @param {vec2} v the vec2 to translate the matrix by\n * @returns {mat2d} out\n **/\nmat2d.translate = function(out, a, v) {\n    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5],\n        v0 = v[0], v1 = v[1];\n    out[0] = a0;\n    out[1] = a1;\n    out[2] = a2;\n    out[3] = a3;\n    out[4] = a0 * v0 + a2 * v1 + a4;\n    out[5] = a1 * v0 + a3 * v1 + a5;\n    return out;\n};\n\n/**\n * Creates a matrix from a given angle\n * This is equivalent to (but much faster than):\n *\n *     mat2d.identity(dest);\n *     mat2d.rotate(dest, dest, rad);\n *\n * @param {mat2d} out mat2d receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat2d} out\n */\nmat2d.fromRotation = function(out, rad) {\n    var s = Math.sin(rad), c = Math.cos(rad);\n    out[0] = c;\n    out[1] = s;\n    out[2] = -s;\n    out[3] = c;\n    out[4] = 0;\n    out[5] = 0;\n    return out;\n}\n\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat2d.identity(dest);\n *     mat2d.scale(dest, dest, vec);\n *\n * @param {mat2d} out mat2d receiving operation result\n * @param {vec2} v Scaling vector\n * @returns {mat2d} out\n */\nmat2d.fromScaling = function(out, v) {\n    out[0] = v[0];\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = v[1];\n    out[4] = 0;\n    out[5] = 0;\n    return out;\n}\n\n/**\n * Creates a matrix from a vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat2d.identity(dest);\n *     mat2d.translate(dest, dest, vec);\n *\n * @param {mat2d} out mat2d receiving operation result\n * @param {vec2} v Translation vector\n * @returns {mat2d} out\n */\nmat2d.fromTranslation = function(out, v) {\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 1;\n    out[4] = v[0];\n    out[5] = v[1];\n    return out;\n}\n\n/**\n * Returns a string representation of a mat2d\n *\n * @param {mat2d} a matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\nmat2d.str = function (a) {\n    return 'mat2d(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + \n                    a[3] + ', ' + a[4] + ', ' + a[5] + ')';\n};\n\n/**\n * Returns Frobenius norm of a mat2d\n *\n * @param {mat2d} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\nmat2d.frob = function (a) { \n    return(Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + 1))\n}; \n\nmodule.exports = mat2d;\n","/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE. */\n\nvar glMatrix = require(\"./common.js\");\n\n/**\n * @class 3x3 Matrix\n * @name mat3\n */\nvar mat3 = {};\n\n/**\n * Creates a new identity mat3\n *\n * @returns {mat3} a new 3x3 matrix\n */\nmat3.create = function() {\n    var out = new glMatrix.ARRAY_TYPE(9);\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 1;\n    out[5] = 0;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 1;\n    return out;\n};\n\n/**\n * Copies the upper-left 3x3 values into the given mat3.\n *\n * @param {mat3} out the receiving 3x3 matrix\n * @param {mat4} a   the source 4x4 matrix\n * @returns {mat3} out\n */\nmat3.fromMat4 = function(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[4];\n    out[4] = a[5];\n    out[5] = a[6];\n    out[6] = a[8];\n    out[7] = a[9];\n    out[8] = a[10];\n    return out;\n};\n\n/**\n * Creates a new mat3 initialized with values from an existing matrix\n *\n * @param {mat3} a matrix to clone\n * @returns {mat3} a new 3x3 matrix\n */\nmat3.clone = function(a) {\n    var out = new glMatrix.ARRAY_TYPE(9);\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[8] = a[8];\n    return out;\n};\n\n/**\n * Copy the values from one mat3 to another\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the source matrix\n * @returns {mat3} out\n */\nmat3.copy = function(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[8] = a[8];\n    return out;\n};\n\n/**\n * Set a mat3 to the identity matrix\n *\n * @param {mat3} out the receiving matrix\n * @returns {mat3} out\n */\nmat3.identity = function(out) {\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 1;\n    out[5] = 0;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 1;\n    return out;\n};\n\n/**\n * Transpose the values of a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the source matrix\n * @returns {mat3} out\n */\nmat3.transpose = function(out, a) {\n    // If we are transposing ourselves we can skip a few steps but have to cache some values\n    if (out === a) {\n        var a01 = a[1], a02 = a[2], a12 = a[5];\n        out[1] = a[3];\n        out[2] = a[6];\n        out[3] = a01;\n        out[5] = a[7];\n        out[6] = a02;\n        out[7] = a12;\n    } else {\n        out[0] = a[0];\n        out[1] = a[3];\n        out[2] = a[6];\n        out[3] = a[1];\n        out[4] = a[4];\n        out[5] = a[7];\n        out[6] = a[2];\n        out[7] = a[5];\n        out[8] = a[8];\n    }\n    \n    return out;\n};\n\n/**\n * Inverts a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the source matrix\n * @returns {mat3} out\n */\nmat3.invert = function(out, a) {\n    var a00 = a[0], a01 = a[1], a02 = a[2],\n        a10 = a[3], a11 = a[4], a12 = a[5],\n        a20 = a[6], a21 = a[7], a22 = a[8],\n\n        b01 = a22 * a11 - a12 * a21,\n        b11 = -a22 * a10 + a12 * a20,\n        b21 = a21 * a10 - a11 * a20,\n\n        // Calculate the determinant\n        det = a00 * b01 + a01 * b11 + a02 * b21;\n\n    if (!det) { \n        return null; \n    }\n    det = 1.0 / det;\n\n    out[0] = b01 * det;\n    out[1] = (-a22 * a01 + a02 * a21) * det;\n    out[2] = (a12 * a01 - a02 * a11) * det;\n    out[3] = b11 * det;\n    out[4] = (a22 * a00 - a02 * a20) * det;\n    out[5] = (-a12 * a00 + a02 * a10) * det;\n    out[6] = b21 * det;\n    out[7] = (-a21 * a00 + a01 * a20) * det;\n    out[8] = (a11 * a00 - a01 * a10) * det;\n    return out;\n};\n\n/**\n * Calculates the adjugate of a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the source matrix\n * @returns {mat3} out\n */\nmat3.adjoint = function(out, a) {\n    var a00 = a[0], a01 = a[1], a02 = a[2],\n        a10 = a[3], a11 = a[4], a12 = a[5],\n        a20 = a[6], a21 = a[7], a22 = a[8];\n\n    out[0] = (a11 * a22 - a12 * a21);\n    out[1] = (a02 * a21 - a01 * a22);\n    out[2] = (a01 * a12 - a02 * a11);\n    out[3] = (a12 * a20 - a10 * a22);\n    out[4] = (a00 * a22 - a02 * a20);\n    out[5] = (a02 * a10 - a00 * a12);\n    out[6] = (a10 * a21 - a11 * a20);\n    out[7] = (a01 * a20 - a00 * a21);\n    out[8] = (a00 * a11 - a01 * a10);\n    return out;\n};\n\n/**\n * Calculates the determinant of a mat3\n *\n * @param {mat3} a the source matrix\n * @returns {Number} determinant of a\n */\nmat3.determinant = function (a) {\n    var a00 = a[0], a01 = a[1], a02 = a[2],\n        a10 = a[3], a11 = a[4], a12 = a[5],\n        a20 = a[6], a21 = a[7], a22 = a[8];\n\n    return a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20);\n};\n\n/**\n * Multiplies two mat3's\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the first operand\n * @param {mat3} b the second operand\n * @returns {mat3} out\n */\nmat3.multiply = function (out, a, b) {\n    var a00 = a[0], a01 = a[1], a02 = a[2],\n        a10 = a[3], a11 = a[4], a12 = a[5],\n        a20 = a[6], a21 = a[7], a22 = a[8],\n\n        b00 = b[0], b01 = b[1], b02 = b[2],\n        b10 = b[3], b11 = b[4], b12 = b[5],\n        b20 = b[6], b21 = b[7], b22 = b[8];\n\n    out[0] = b00 * a00 + b01 * a10 + b02 * a20;\n    out[1] = b00 * a01 + b01 * a11 + b02 * a21;\n    out[2] = b00 * a02 + b01 * a12 + b02 * a22;\n\n    out[3] = b10 * a00 + b11 * a10 + b12 * a20;\n    out[4] = b10 * a01 + b11 * a11 + b12 * a21;\n    out[5] = b10 * a02 + b11 * a12 + b12 * a22;\n\n    out[6] = b20 * a00 + b21 * a10 + b22 * a20;\n    out[7] = b20 * a01 + b21 * a11 + b22 * a21;\n    out[8] = b20 * a02 + b21 * a12 + b22 * a22;\n    return out;\n};\n\n/**\n * Alias for {@link mat3.multiply}\n * @function\n */\nmat3.mul = mat3.multiply;\n\n/**\n * Translate a mat3 by the given vector\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the matrix to translate\n * @param {vec2} v vector to translate by\n * @returns {mat3} out\n */\nmat3.translate = function(out, a, v) {\n    var a00 = a[0], a01 = a[1], a02 = a[2],\n        a10 = a[3], a11 = a[4], a12 = a[5],\n        a20 = a[6], a21 = a[7], a22 = a[8],\n        x = v[0], y = v[1];\n\n    out[0] = a00;\n    out[1] = a01;\n    out[2] = a02;\n\n    out[3] = a10;\n    out[4] = a11;\n    out[5] = a12;\n\n    out[6] = x * a00 + y * a10 + a20;\n    out[7] = x * a01 + y * a11 + a21;\n    out[8] = x * a02 + y * a12 + a22;\n    return out;\n};\n\n/**\n * Rotates a mat3 by the given angle\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat3} out\n */\nmat3.rotate = function (out, a, rad) {\n    var a00 = a[0], a01 = a[1], a02 = a[2],\n        a10 = a[3], a11 = a[4], a12 = a[5],\n        a20 = a[6], a21 = a[7], a22 = a[8],\n\n        s = Math.sin(rad),\n        c = Math.cos(rad);\n\n    out[0] = c * a00 + s * a10;\n    out[1] = c * a01 + s * a11;\n    out[2] = c * a02 + s * a12;\n\n    out[3] = c * a10 - s * a00;\n    out[4] = c * a11 - s * a01;\n    out[5] = c * a12 - s * a02;\n\n    out[6] = a20;\n    out[7] = a21;\n    out[8] = a22;\n    return out;\n};\n\n/**\n * Scales the mat3 by the dimensions in the given vec2\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the matrix to rotate\n * @param {vec2} v the vec2 to scale the matrix by\n * @returns {mat3} out\n **/\nmat3.scale = function(out, a, v) {\n    var x = v[0], y = v[1];\n\n    out[0] = x * a[0];\n    out[1] = x * a[1];\n    out[2] = x * a[2];\n\n    out[3] = y * a[3];\n    out[4] = y * a[4];\n    out[5] = y * a[5];\n\n    out[6] = a[6];\n    out[7] = a[7];\n    out[8] = a[8];\n    return out;\n};\n\n/**\n * Creates a matrix from a vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat3.identity(dest);\n *     mat3.translate(dest, dest, vec);\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {vec2} v Translation vector\n * @returns {mat3} out\n */\nmat3.fromTranslation = function(out, v) {\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 1;\n    out[5] = 0;\n    out[6] = v[0];\n    out[7] = v[1];\n    out[8] = 1;\n    return out;\n}\n\n/**\n * Creates a matrix from a given angle\n * This is equivalent to (but much faster than):\n *\n *     mat3.identity(dest);\n *     mat3.rotate(dest, dest, rad);\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat3} out\n */\nmat3.fromRotation = function(out, rad) {\n    var s = Math.sin(rad), c = Math.cos(rad);\n\n    out[0] = c;\n    out[1] = s;\n    out[2] = 0;\n\n    out[3] = -s;\n    out[4] = c;\n    out[5] = 0;\n\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 1;\n    return out;\n}\n\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat3.identity(dest);\n *     mat3.scale(dest, dest, vec);\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {vec2} v Scaling vector\n * @returns {mat3} out\n */\nmat3.fromScaling = function(out, v) {\n    out[0] = v[0];\n    out[1] = 0;\n    out[2] = 0;\n\n    out[3] = 0;\n    out[4] = v[1];\n    out[5] = 0;\n\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 1;\n    return out;\n}\n\n/**\n * Copies the values from a mat2d into a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {mat2d} a the matrix to copy\n * @returns {mat3} out\n **/\nmat3.fromMat2d = function(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = 0;\n\n    out[3] = a[2];\n    out[4] = a[3];\n    out[5] = 0;\n\n    out[6] = a[4];\n    out[7] = a[5];\n    out[8] = 1;\n    return out;\n};\n\n/**\n* Calculates a 3x3 matrix from the given quaternion\n*\n* @param {mat3} out mat3 receiving operation result\n* @param {quat} q Quaternion to create matrix from\n*\n* @returns {mat3} out\n*/\nmat3.fromQuat = function (out, q) {\n    var x = q[0], y = q[1], z = q[2], w = q[3],\n        x2 = x + x,\n        y2 = y + y,\n        z2 = z + z,\n\n        xx = x * x2,\n        yx = y * x2,\n        yy = y * y2,\n        zx = z * x2,\n        zy = z * y2,\n        zz = z * z2,\n        wx = w * x2,\n        wy = w * y2,\n        wz = w * z2;\n\n    out[0] = 1 - yy - zz;\n    out[3] = yx - wz;\n    out[6] = zx + wy;\n\n    out[1] = yx + wz;\n    out[4] = 1 - xx - zz;\n    out[7] = zy - wx;\n\n    out[2] = zx - wy;\n    out[5] = zy + wx;\n    out[8] = 1 - xx - yy;\n\n    return out;\n};\n\n/**\n* Calculates a 3x3 normal matrix (transpose inverse) from the 4x4 matrix\n*\n* @param {mat3} out mat3 receiving operation result\n* @param {mat4} a Mat4 to derive the normal matrix from\n*\n* @returns {mat3} out\n*/\nmat3.normalFromMat4 = function (out, a) {\n    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3],\n        a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7],\n        a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11],\n        a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15],\n\n        b00 = a00 * a11 - a01 * a10,\n        b01 = a00 * a12 - a02 * a10,\n        b02 = a00 * a13 - a03 * a10,\n        b03 = a01 * a12 - a02 * a11,\n        b04 = a01 * a13 - a03 * a11,\n        b05 = a02 * a13 - a03 * a12,\n        b06 = a20 * a31 - a21 * a30,\n        b07 = a20 * a32 - a22 * a30,\n        b08 = a20 * a33 - a23 * a30,\n        b09 = a21 * a32 - a22 * a31,\n        b10 = a21 * a33 - a23 * a31,\n        b11 = a22 * a33 - a23 * a32,\n\n        // Calculate the determinant\n        det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n    if (!det) { \n        return null; \n    }\n    det = 1.0 / det;\n\n    out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n    out[1] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n    out[2] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n\n    out[3] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n    out[4] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n    out[5] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n\n    out[6] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n    out[7] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n    out[8] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n\n    return out;\n};\n\n/**\n * Returns a string representation of a mat3\n *\n * @param {mat3} mat matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\nmat3.str = function (a) {\n    return 'mat3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + \n                    a[3] + ', ' + a[4] + ', ' + a[5] + ', ' + \n                    a[6] + ', ' + a[7] + ', ' + a[8] + ')';\n};\n\n/**\n * Returns Frobenius norm of a mat3\n *\n * @param {mat3} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\nmat3.frob = function (a) {\n    return(Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + Math.pow(a[6], 2) + Math.pow(a[7], 2) + Math.pow(a[8], 2)))\n};\n\n\nmodule.exports = mat3;\n","/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE. */\n\nvar glMatrix = require(\"./common.js\");\n\n/**\n * @class 4x4 Matrix\n * @name mat4\n */\nvar mat4 = {};\n\n/**\n * Creates a new identity mat4\n *\n * @returns {mat4} a new 4x4 matrix\n */\nmat4.create = function() {\n    var out = new glMatrix.ARRAY_TYPE(16);\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = 1;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[10] = 1;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n    out[15] = 1;\n    return out;\n};\n\n/**\n * Creates a new mat4 initialized with values from an existing matrix\n *\n * @param {mat4} a matrix to clone\n * @returns {mat4} a new 4x4 matrix\n */\nmat4.clone = function(a) {\n    var out = new glMatrix.ARRAY_TYPE(16);\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[8] = a[8];\n    out[9] = a[9];\n    out[10] = a[10];\n    out[11] = a[11];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n    return out;\n};\n\n/**\n * Copy the values from one mat4 to another\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nmat4.copy = function(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[8] = a[8];\n    out[9] = a[9];\n    out[10] = a[10];\n    out[11] = a[11];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n    return out;\n};\n\n/**\n * Set a mat4 to the identity matrix\n *\n * @param {mat4} out the receiving matrix\n * @returns {mat4} out\n */\nmat4.identity = function(out) {\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = 1;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[10] = 1;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n    out[15] = 1;\n    return out;\n};\n\n/**\n * Transpose the values of a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nmat4.transpose = function(out, a) {\n    // If we are transposing ourselves we can skip a few steps but have to cache some values\n    if (out === a) {\n        var a01 = a[1], a02 = a[2], a03 = a[3],\n            a12 = a[6], a13 = a[7],\n            a23 = a[11];\n\n        out[1] = a[4];\n        out[2] = a[8];\n        out[3] = a[12];\n        out[4] = a01;\n        out[6] = a[9];\n        out[7] = a[13];\n        out[8] = a02;\n        out[9] = a12;\n        out[11] = a[14];\n        out[12] = a03;\n        out[13] = a13;\n        out[14] = a23;\n    } else {\n        out[0] = a[0];\n        out[1] = a[4];\n        out[2] = a[8];\n        out[3] = a[12];\n        out[4] = a[1];\n        out[5] = a[5];\n        out[6] = a[9];\n        out[7] = a[13];\n        out[8] = a[2];\n        out[9] = a[6];\n        out[10] = a[10];\n        out[11] = a[14];\n        out[12] = a[3];\n        out[13] = a[7];\n        out[14] = a[11];\n        out[15] = a[15];\n    }\n    \n    return out;\n};\n\n/**\n * Inverts a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nmat4.invert = function(out, a) {\n    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3],\n        a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7],\n        a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11],\n        a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15],\n\n        b00 = a00 * a11 - a01 * a10,\n        b01 = a00 * a12 - a02 * a10,\n        b02 = a00 * a13 - a03 * a10,\n        b03 = a01 * a12 - a02 * a11,\n        b04 = a01 * a13 - a03 * a11,\n        b05 = a02 * a13 - a03 * a12,\n        b06 = a20 * a31 - a21 * a30,\n        b07 = a20 * a32 - a22 * a30,\n        b08 = a20 * a33 - a23 * a30,\n        b09 = a21 * a32 - a22 * a31,\n        b10 = a21 * a33 - a23 * a31,\n        b11 = a22 * a33 - a23 * a32,\n\n        // Calculate the determinant\n        det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n    if (!det) { \n        return null; \n    }\n    det = 1.0 / det;\n\n    out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n    out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n    out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n    out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\n    out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n    out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n    out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n    out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\n    out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n    out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n    out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n    out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\n    out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\n    out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\n    out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\n    out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\n\n    return out;\n};\n\n/**\n * Calculates the adjugate of a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nmat4.adjoint = function(out, a) {\n    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3],\n        a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7],\n        a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11],\n        a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];\n\n    out[0]  =  (a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22));\n    out[1]  = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));\n    out[2]  =  (a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12));\n    out[3]  = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));\n    out[4]  = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));\n    out[5]  =  (a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22));\n    out[6]  = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));\n    out[7]  =  (a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12));\n    out[8]  =  (a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21));\n    out[9]  = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));\n    out[10] =  (a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11));\n    out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));\n    out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));\n    out[13] =  (a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21));\n    out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));\n    out[15] =  (a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11));\n    return out;\n};\n\n/**\n * Calculates the determinant of a mat4\n *\n * @param {mat4} a the source matrix\n * @returns {Number} determinant of a\n */\nmat4.determinant = function (a) {\n    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3],\n        a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7],\n        a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11],\n        a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15],\n\n        b00 = a00 * a11 - a01 * a10,\n        b01 = a00 * a12 - a02 * a10,\n        b02 = a00 * a13 - a03 * a10,\n        b03 = a01 * a12 - a02 * a11,\n        b04 = a01 * a13 - a03 * a11,\n        b05 = a02 * a13 - a03 * a12,\n        b06 = a20 * a31 - a21 * a30,\n        b07 = a20 * a32 - a22 * a30,\n        b08 = a20 * a33 - a23 * a30,\n        b09 = a21 * a32 - a22 * a31,\n        b10 = a21 * a33 - a23 * a31,\n        b11 = a22 * a33 - a23 * a32;\n\n    // Calculate the determinant\n    return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n};\n\n/**\n * Multiplies two mat4's\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the first operand\n * @param {mat4} b the second operand\n * @returns {mat4} out\n */\nmat4.multiply = function (out, a, b) {\n    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3],\n        a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7],\n        a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11],\n        a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];\n\n    // Cache only the current line of the second matrix\n    var b0  = b[0], b1 = b[1], b2 = b[2], b3 = b[3];  \n    out[0] = b0*a00 + b1*a10 + b2*a20 + b3*a30;\n    out[1] = b0*a01 + b1*a11 + b2*a21 + b3*a31;\n    out[2] = b0*a02 + b1*a12 + b2*a22 + b3*a32;\n    out[3] = b0*a03 + b1*a13 + b2*a23 + b3*a33;\n\n    b0 = b[4]; b1 = b[5]; b2 = b[6]; b3 = b[7];\n    out[4] = b0*a00 + b1*a10 + b2*a20 + b3*a30;\n    out[5] = b0*a01 + b1*a11 + b2*a21 + b3*a31;\n    out[6] = b0*a02 + b1*a12 + b2*a22 + b3*a32;\n    out[7] = b0*a03 + b1*a13 + b2*a23 + b3*a33;\n\n    b0 = b[8]; b1 = b[9]; b2 = b[10]; b3 = b[11];\n    out[8] = b0*a00 + b1*a10 + b2*a20 + b3*a30;\n    out[9] = b0*a01 + b1*a11 + b2*a21 + b3*a31;\n    out[10] = b0*a02 + b1*a12 + b2*a22 + b3*a32;\n    out[11] = b0*a03 + b1*a13 + b2*a23 + b3*a33;\n\n    b0 = b[12]; b1 = b[13]; b2 = b[14]; b3 = b[15];\n    out[12] = b0*a00 + b1*a10 + b2*a20 + b3*a30;\n    out[13] = b0*a01 + b1*a11 + b2*a21 + b3*a31;\n    out[14] = b0*a02 + b1*a12 + b2*a22 + b3*a32;\n    out[15] = b0*a03 + b1*a13 + b2*a23 + b3*a33;\n    return out;\n};\n\n/**\n * Alias for {@link mat4.multiply}\n * @function\n */\nmat4.mul = mat4.multiply;\n\n/**\n * Translate a mat4 by the given vector\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to translate\n * @param {vec3} v vector to translate by\n * @returns {mat4} out\n */\nmat4.translate = function (out, a, v) {\n    var x = v[0], y = v[1], z = v[2],\n        a00, a01, a02, a03,\n        a10, a11, a12, a13,\n        a20, a21, a22, a23;\n\n    if (a === out) {\n        out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];\n        out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];\n        out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];\n        out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];\n    } else {\n        a00 = a[0]; a01 = a[1]; a02 = a[2]; a03 = a[3];\n        a10 = a[4]; a11 = a[5]; a12 = a[6]; a13 = a[7];\n        a20 = a[8]; a21 = a[9]; a22 = a[10]; a23 = a[11];\n\n        out[0] = a00; out[1] = a01; out[2] = a02; out[3] = a03;\n        out[4] = a10; out[5] = a11; out[6] = a12; out[7] = a13;\n        out[8] = a20; out[9] = a21; out[10] = a22; out[11] = a23;\n\n        out[12] = a00 * x + a10 * y + a20 * z + a[12];\n        out[13] = a01 * x + a11 * y + a21 * z + a[13];\n        out[14] = a02 * x + a12 * y + a22 * z + a[14];\n        out[15] = a03 * x + a13 * y + a23 * z + a[15];\n    }\n\n    return out;\n};\n\n/**\n * Scales the mat4 by the dimensions in the given vec3\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to scale\n * @param {vec3} v the vec3 to scale the matrix by\n * @returns {mat4} out\n **/\nmat4.scale = function(out, a, v) {\n    var x = v[0], y = v[1], z = v[2];\n\n    out[0] = a[0] * x;\n    out[1] = a[1] * x;\n    out[2] = a[2] * x;\n    out[3] = a[3] * x;\n    out[4] = a[4] * y;\n    out[5] = a[5] * y;\n    out[6] = a[6] * y;\n    out[7] = a[7] * y;\n    out[8] = a[8] * z;\n    out[9] = a[9] * z;\n    out[10] = a[10] * z;\n    out[11] = a[11] * z;\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n    return out;\n};\n\n/**\n * Rotates a mat4 by the given angle around the given axis\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @param {vec3} axis the axis to rotate around\n * @returns {mat4} out\n */\nmat4.rotate = function (out, a, rad, axis) {\n    var x = axis[0], y = axis[1], z = axis[2],\n        len = Math.sqrt(x * x + y * y + z * z),\n        s, c, t,\n        a00, a01, a02, a03,\n        a10, a11, a12, a13,\n        a20, a21, a22, a23,\n        b00, b01, b02,\n        b10, b11, b12,\n        b20, b21, b22;\n\n    if (Math.abs(len) < glMatrix.EPSILON) { return null; }\n    \n    len = 1 / len;\n    x *= len;\n    y *= len;\n    z *= len;\n\n    s = Math.sin(rad);\n    c = Math.cos(rad);\n    t = 1 - c;\n\n    a00 = a[0]; a01 = a[1]; a02 = a[2]; a03 = a[3];\n    a10 = a[4]; a11 = a[5]; a12 = a[6]; a13 = a[7];\n    a20 = a[8]; a21 = a[9]; a22 = a[10]; a23 = a[11];\n\n    // Construct the elements of the rotation matrix\n    b00 = x * x * t + c; b01 = y * x * t + z * s; b02 = z * x * t - y * s;\n    b10 = x * y * t - z * s; b11 = y * y * t + c; b12 = z * y * t + x * s;\n    b20 = x * z * t + y * s; b21 = y * z * t - x * s; b22 = z * z * t + c;\n\n    // Perform rotation-specific matrix multiplication\n    out[0] = a00 * b00 + a10 * b01 + a20 * b02;\n    out[1] = a01 * b00 + a11 * b01 + a21 * b02;\n    out[2] = a02 * b00 + a12 * b01 + a22 * b02;\n    out[3] = a03 * b00 + a13 * b01 + a23 * b02;\n    out[4] = a00 * b10 + a10 * b11 + a20 * b12;\n    out[5] = a01 * b10 + a11 * b11 + a21 * b12;\n    out[6] = a02 * b10 + a12 * b11 + a22 * b12;\n    out[7] = a03 * b10 + a13 * b11 + a23 * b12;\n    out[8] = a00 * b20 + a10 * b21 + a20 * b22;\n    out[9] = a01 * b20 + a11 * b21 + a21 * b22;\n    out[10] = a02 * b20 + a12 * b21 + a22 * b22;\n    out[11] = a03 * b20 + a13 * b21 + a23 * b22;\n\n    if (a !== out) { // If the source and destination differ, copy the unchanged last row\n        out[12] = a[12];\n        out[13] = a[13];\n        out[14] = a[14];\n        out[15] = a[15];\n    }\n    return out;\n};\n\n/**\n * Rotates a matrix by the given angle around the X axis\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nmat4.rotateX = function (out, a, rad) {\n    var s = Math.sin(rad),\n        c = Math.cos(rad),\n        a10 = a[4],\n        a11 = a[5],\n        a12 = a[6],\n        a13 = a[7],\n        a20 = a[8],\n        a21 = a[9],\n        a22 = a[10],\n        a23 = a[11];\n\n    if (a !== out) { // If the source and destination differ, copy the unchanged rows\n        out[0]  = a[0];\n        out[1]  = a[1];\n        out[2]  = a[2];\n        out[3]  = a[3];\n        out[12] = a[12];\n        out[13] = a[13];\n        out[14] = a[14];\n        out[15] = a[15];\n    }\n\n    // Perform axis-specific matrix multiplication\n    out[4] = a10 * c + a20 * s;\n    out[5] = a11 * c + a21 * s;\n    out[6] = a12 * c + a22 * s;\n    out[7] = a13 * c + a23 * s;\n    out[8] = a20 * c - a10 * s;\n    out[9] = a21 * c - a11 * s;\n    out[10] = a22 * c - a12 * s;\n    out[11] = a23 * c - a13 * s;\n    return out;\n};\n\n/**\n * Rotates a matrix by the given angle around the Y axis\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nmat4.rotateY = function (out, a, rad) {\n    var s = Math.sin(rad),\n        c = Math.cos(rad),\n        a00 = a[0],\n        a01 = a[1],\n        a02 = a[2],\n        a03 = a[3],\n        a20 = a[8],\n        a21 = a[9],\n        a22 = a[10],\n        a23 = a[11];\n\n    if (a !== out) { // If the source and destination differ, copy the unchanged rows\n        out[4]  = a[4];\n        out[5]  = a[5];\n        out[6]  = a[6];\n        out[7]  = a[7];\n        out[12] = a[12];\n        out[13] = a[13];\n        out[14] = a[14];\n        out[15] = a[15];\n    }\n\n    // Perform axis-specific matrix multiplication\n    out[0] = a00 * c - a20 * s;\n    out[1] = a01 * c - a21 * s;\n    out[2] = a02 * c - a22 * s;\n    out[3] = a03 * c - a23 * s;\n    out[8] = a00 * s + a20 * c;\n    out[9] = a01 * s + a21 * c;\n    out[10] = a02 * s + a22 * c;\n    out[11] = a03 * s + a23 * c;\n    return out;\n};\n\n/**\n * Rotates a matrix by the given angle around the Z axis\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nmat4.rotateZ = function (out, a, rad) {\n    var s = Math.sin(rad),\n        c = Math.cos(rad),\n        a00 = a[0],\n        a01 = a[1],\n        a02 = a[2],\n        a03 = a[3],\n        a10 = a[4],\n        a11 = a[5],\n        a12 = a[6],\n        a13 = a[7];\n\n    if (a !== out) { // If the source and destination differ, copy the unchanged last row\n        out[8]  = a[8];\n        out[9]  = a[9];\n        out[10] = a[10];\n        out[11] = a[11];\n        out[12] = a[12];\n        out[13] = a[13];\n        out[14] = a[14];\n        out[15] = a[15];\n    }\n\n    // Perform axis-specific matrix multiplication\n    out[0] = a00 * c + a10 * s;\n    out[1] = a01 * c + a11 * s;\n    out[2] = a02 * c + a12 * s;\n    out[3] = a03 * c + a13 * s;\n    out[4] = a10 * c - a00 * s;\n    out[5] = a11 * c - a01 * s;\n    out[6] = a12 * c - a02 * s;\n    out[7] = a13 * c - a03 * s;\n    return out;\n};\n\n/**\n * Creates a matrix from a vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, dest, vec);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {vec3} v Translation vector\n * @returns {mat4} out\n */\nmat4.fromTranslation = function(out, v) {\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = 1;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[10] = 1;\n    out[11] = 0;\n    out[12] = v[0];\n    out[13] = v[1];\n    out[14] = v[2];\n    out[15] = 1;\n    return out;\n}\n\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.scale(dest, dest, vec);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {vec3} v Scaling vector\n * @returns {mat4} out\n */\nmat4.fromScaling = function(out, v) {\n    out[0] = v[0];\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = v[1];\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[10] = v[2];\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n    out[15] = 1;\n    return out;\n}\n\n/**\n * Creates a matrix from a given angle around a given axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotate(dest, dest, rad, axis);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @param {vec3} axis the axis to rotate around\n * @returns {mat4} out\n */\nmat4.fromRotation = function(out, rad, axis) {\n    var x = axis[0], y = axis[1], z = axis[2],\n        len = Math.sqrt(x * x + y * y + z * z),\n        s, c, t;\n    \n    if (Math.abs(len) < glMatrix.EPSILON) { return null; }\n    \n    len = 1 / len;\n    x *= len;\n    y *= len;\n    z *= len;\n    \n    s = Math.sin(rad);\n    c = Math.cos(rad);\n    t = 1 - c;\n    \n    // Perform rotation-specific matrix multiplication\n    out[0] = x * x * t + c;\n    out[1] = y * x * t + z * s;\n    out[2] = z * x * t - y * s;\n    out[3] = 0;\n    out[4] = x * y * t - z * s;\n    out[5] = y * y * t + c;\n    out[6] = z * y * t + x * s;\n    out[7] = 0;\n    out[8] = x * z * t + y * s;\n    out[9] = y * z * t - x * s;\n    out[10] = z * z * t + c;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n    out[15] = 1;\n    return out;\n}\n\n/**\n * Creates a matrix from the given angle around the X axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateX(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nmat4.fromXRotation = function(out, rad) {\n    var s = Math.sin(rad),\n        c = Math.cos(rad);\n    \n    // Perform axis-specific matrix multiplication\n    out[0]  = 1;\n    out[1]  = 0;\n    out[2]  = 0;\n    out[3]  = 0;\n    out[4] = 0;\n    out[5] = c;\n    out[6] = s;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = -s;\n    out[10] = c;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n    out[15] = 1;\n    return out;\n}\n\n/**\n * Creates a matrix from the given angle around the Y axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateY(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nmat4.fromYRotation = function(out, rad) {\n    var s = Math.sin(rad),\n        c = Math.cos(rad);\n    \n    // Perform axis-specific matrix multiplication\n    out[0]  = c;\n    out[1]  = 0;\n    out[2]  = -s;\n    out[3]  = 0;\n    out[4] = 0;\n    out[5] = 1;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = s;\n    out[9] = 0;\n    out[10] = c;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n    out[15] = 1;\n    return out;\n}\n\n/**\n * Creates a matrix from the given angle around the Z axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateZ(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nmat4.fromZRotation = function(out, rad) {\n    var s = Math.sin(rad),\n        c = Math.cos(rad);\n    \n    // Perform axis-specific matrix multiplication\n    out[0]  = c;\n    out[1]  = s;\n    out[2]  = 0;\n    out[3]  = 0;\n    out[4] = -s;\n    out[5] = c;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[10] = 1;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n    out[15] = 1;\n    return out;\n}\n\n/**\n * Creates a matrix from a quaternion rotation and vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     var quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {vec3} v Translation vector\n * @returns {mat4} out\n */\nmat4.fromRotationTranslation = function (out, q, v) {\n    // Quaternion math\n    var x = q[0], y = q[1], z = q[2], w = q[3],\n        x2 = x + x,\n        y2 = y + y,\n        z2 = z + z,\n\n        xx = x * x2,\n        xy = x * y2,\n        xz = x * z2,\n        yy = y * y2,\n        yz = y * z2,\n        zz = z * z2,\n        wx = w * x2,\n        wy = w * y2,\n        wz = w * z2;\n\n    out[0] = 1 - (yy + zz);\n    out[1] = xy + wz;\n    out[2] = xz - wy;\n    out[3] = 0;\n    out[4] = xy - wz;\n    out[5] = 1 - (xx + zz);\n    out[6] = yz + wx;\n    out[7] = 0;\n    out[8] = xz + wy;\n    out[9] = yz - wx;\n    out[10] = 1 - (xx + yy);\n    out[11] = 0;\n    out[12] = v[0];\n    out[13] = v[1];\n    out[14] = v[2];\n    out[15] = 1;\n    \n    return out;\n};\n\n/**\n * Creates a matrix from a quaternion rotation, vector translation and vector scale\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     var quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *     mat4.scale(dest, scale)\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {vec3} v Translation vector\n * @param {vec3} s Scaling vector\n * @returns {mat4} out\n */\nmat4.fromRotationTranslationScale = function (out, q, v, s) {\n    // Quaternion math\n    var x = q[0], y = q[1], z = q[2], w = q[3],\n        x2 = x + x,\n        y2 = y + y,\n        z2 = z + z,\n\n        xx = x * x2,\n        xy = x * y2,\n        xz = x * z2,\n        yy = y * y2,\n        yz = y * z2,\n        zz = z * z2,\n        wx = w * x2,\n        wy = w * y2,\n        wz = w * z2,\n        sx = s[0],\n        sy = s[1],\n        sz = s[2];\n\n    out[0] = (1 - (yy + zz)) * sx;\n    out[1] = (xy + wz) * sx;\n    out[2] = (xz - wy) * sx;\n    out[3] = 0;\n    out[4] = (xy - wz) * sy;\n    out[5] = (1 - (xx + zz)) * sy;\n    out[6] = (yz + wx) * sy;\n    out[7] = 0;\n    out[8] = (xz + wy) * sz;\n    out[9] = (yz - wx) * sz;\n    out[10] = (1 - (xx + yy)) * sz;\n    out[11] = 0;\n    out[12] = v[0];\n    out[13] = v[1];\n    out[14] = v[2];\n    out[15] = 1;\n    \n    return out;\n};\n\n/**\n * Creates a matrix from a quaternion rotation, vector translation and vector scale, rotating and scaling around the given origin\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     mat4.translate(dest, origin);\n *     var quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *     mat4.scale(dest, scale)\n *     mat4.translate(dest, negativeOrigin);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {vec3} v Translation vector\n * @param {vec3} s Scaling vector\n * @param {vec3} o The origin vector around which to scale and rotate\n * @returns {mat4} out\n */\nmat4.fromRotationTranslationScaleOrigin = function (out, q, v, s, o) {\n  // Quaternion math\n  var x = q[0], y = q[1], z = q[2], w = q[3],\n      x2 = x + x,\n      y2 = y + y,\n      z2 = z + z,\n\n      xx = x * x2,\n      xy = x * y2,\n      xz = x * z2,\n      yy = y * y2,\n      yz = y * z2,\n      zz = z * z2,\n      wx = w * x2,\n      wy = w * y2,\n      wz = w * z2,\n      \n      sx = s[0],\n      sy = s[1],\n      sz = s[2],\n\n      ox = o[0],\n      oy = o[1],\n      oz = o[2];\n      \n  out[0] = (1 - (yy + zz)) * sx;\n  out[1] = (xy + wz) * sx;\n  out[2] = (xz - wy) * sx;\n  out[3] = 0;\n  out[4] = (xy - wz) * sy;\n  out[5] = (1 - (xx + zz)) * sy;\n  out[6] = (yz + wx) * sy;\n  out[7] = 0;\n  out[8] = (xz + wy) * sz;\n  out[9] = (yz - wx) * sz;\n  out[10] = (1 - (xx + yy)) * sz;\n  out[11] = 0;\n  out[12] = v[0] + ox - (out[0] * ox + out[4] * oy + out[8] * oz);\n  out[13] = v[1] + oy - (out[1] * ox + out[5] * oy + out[9] * oz);\n  out[14] = v[2] + oz - (out[2] * ox + out[6] * oy + out[10] * oz);\n  out[15] = 1;\n        \n  return out;\n};\n\nmat4.fromQuat = function (out, q) {\n    var x = q[0], y = q[1], z = q[2], w = q[3],\n        x2 = x + x,\n        y2 = y + y,\n        z2 = z + z,\n\n        xx = x * x2,\n        yx = y * x2,\n        yy = y * y2,\n        zx = z * x2,\n        zy = z * y2,\n        zz = z * z2,\n        wx = w * x2,\n        wy = w * y2,\n        wz = w * z2;\n\n    out[0] = 1 - yy - zz;\n    out[1] = yx + wz;\n    out[2] = zx - wy;\n    out[3] = 0;\n\n    out[4] = yx - wz;\n    out[5] = 1 - xx - zz;\n    out[6] = zy + wx;\n    out[7] = 0;\n\n    out[8] = zx + wy;\n    out[9] = zy - wx;\n    out[10] = 1 - xx - yy;\n    out[11] = 0;\n\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n    out[15] = 1;\n\n    return out;\n};\n\n/**\n * Generates a frustum matrix with the given bounds\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {Number} left Left bound of the frustum\n * @param {Number} right Right bound of the frustum\n * @param {Number} bottom Bottom bound of the frustum\n * @param {Number} top Top bound of the frustum\n * @param {Number} near Near bound of the frustum\n * @param {Number} far Far bound of the frustum\n * @returns {mat4} out\n */\nmat4.frustum = function (out, left, right, bottom, top, near, far) {\n    var rl = 1 / (right - left),\n        tb = 1 / (top - bottom),\n        nf = 1 / (near - far);\n    out[0] = (near * 2) * rl;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = (near * 2) * tb;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = (right + left) * rl;\n    out[9] = (top + bottom) * tb;\n    out[10] = (far + near) * nf;\n    out[11] = -1;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = (far * near * 2) * nf;\n    out[15] = 0;\n    return out;\n};\n\n/**\n * Generates a perspective projection matrix with the given bounds\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} fovy Vertical field of view in radians\n * @param {number} aspect Aspect ratio. typically viewport width/height\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\nmat4.perspective = function (out, fovy, aspect, near, far) {\n    var f = 1.0 / Math.tan(fovy / 2),\n        nf = 1 / (near - far);\n    out[0] = f / aspect;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = f;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[10] = (far + near) * nf;\n    out[11] = -1;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = (2 * far * near) * nf;\n    out[15] = 0;\n    return out;\n};\n\n/**\n * Generates a perspective projection matrix with the given field of view.\n * This is primarily useful for generating projection matrices to be used\n * with the still experiemental WebVR API.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} fov Object containing the following values: upDegrees, downDegrees, leftDegrees, rightDegrees\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\nmat4.perspectiveFromFieldOfView = function (out, fov, near, far) {\n    var upTan = Math.tan(fov.upDegrees * Math.PI/180.0),\n        downTan = Math.tan(fov.downDegrees * Math.PI/180.0),\n        leftTan = Math.tan(fov.leftDegrees * Math.PI/180.0),\n        rightTan = Math.tan(fov.rightDegrees * Math.PI/180.0),\n        xScale = 2.0 / (leftTan + rightTan),\n        yScale = 2.0 / (upTan + downTan);\n\n    out[0] = xScale;\n    out[1] = 0.0;\n    out[2] = 0.0;\n    out[3] = 0.0;\n    out[4] = 0.0;\n    out[5] = yScale;\n    out[6] = 0.0;\n    out[7] = 0.0;\n    out[8] = -((leftTan - rightTan) * xScale * 0.5);\n    out[9] = ((upTan - downTan) * yScale * 0.5);\n    out[10] = far / (near - far);\n    out[11] = -1.0;\n    out[12] = 0.0;\n    out[13] = 0.0;\n    out[14] = (far * near) / (near - far);\n    out[15] = 0.0;\n    return out;\n}\n\n/**\n * Generates a orthogonal projection matrix with the given bounds\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} left Left bound of the frustum\n * @param {number} right Right bound of the frustum\n * @param {number} bottom Bottom bound of the frustum\n * @param {number} top Top bound of the frustum\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\nmat4.ortho = function (out, left, right, bottom, top, near, far) {\n    var lr = 1 / (left - right),\n        bt = 1 / (bottom - top),\n        nf = 1 / (near - far);\n    out[0] = -2 * lr;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = -2 * bt;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[10] = 2 * nf;\n    out[11] = 0;\n    out[12] = (left + right) * lr;\n    out[13] = (top + bottom) * bt;\n    out[14] = (far + near) * nf;\n    out[15] = 1;\n    return out;\n};\n\n/**\n * Generates a look-at matrix with the given eye position, focal point, and up axis\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {vec3} eye Position of the viewer\n * @param {vec3} center Point the viewer is looking at\n * @param {vec3} up vec3 pointing up\n * @returns {mat4} out\n */\nmat4.lookAt = function (out, eye, center, up) {\n    var x0, x1, x2, y0, y1, y2, z0, z1, z2, len,\n        eyex = eye[0],\n        eyey = eye[1],\n        eyez = eye[2],\n        upx = up[0],\n        upy = up[1],\n        upz = up[2],\n        centerx = center[0],\n        centery = center[1],\n        centerz = center[2];\n\n    if (Math.abs(eyex - centerx) < glMatrix.EPSILON &&\n        Math.abs(eyey - centery) < glMatrix.EPSILON &&\n        Math.abs(eyez - centerz) < glMatrix.EPSILON) {\n        return mat4.identity(out);\n    }\n\n    z0 = eyex - centerx;\n    z1 = eyey - centery;\n    z2 = eyez - centerz;\n\n    len = 1 / Math.sqrt(z0 * z0 + z1 * z1 + z2 * z2);\n    z0 *= len;\n    z1 *= len;\n    z2 *= len;\n\n    x0 = upy * z2 - upz * z1;\n    x1 = upz * z0 - upx * z2;\n    x2 = upx * z1 - upy * z0;\n    len = Math.sqrt(x0 * x0 + x1 * x1 + x2 * x2);\n    if (!len) {\n        x0 = 0;\n        x1 = 0;\n        x2 = 0;\n    } else {\n        len = 1 / len;\n        x0 *= len;\n        x1 *= len;\n        x2 *= len;\n    }\n\n    y0 = z1 * x2 - z2 * x1;\n    y1 = z2 * x0 - z0 * x2;\n    y2 = z0 * x1 - z1 * x0;\n\n    len = Math.sqrt(y0 * y0 + y1 * y1 + y2 * y2);\n    if (!len) {\n        y0 = 0;\n        y1 = 0;\n        y2 = 0;\n    } else {\n        len = 1 / len;\n        y0 *= len;\n        y1 *= len;\n        y2 *= len;\n    }\n\n    out[0] = x0;\n    out[1] = y0;\n    out[2] = z0;\n    out[3] = 0;\n    out[4] = x1;\n    out[5] = y1;\n    out[6] = z1;\n    out[7] = 0;\n    out[8] = x2;\n    out[9] = y2;\n    out[10] = z2;\n    out[11] = 0;\n    out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);\n    out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);\n    out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);\n    out[15] = 1;\n\n    return out;\n};\n\n/**\n * Returns a string representation of a mat4\n *\n * @param {mat4} mat matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\nmat4.str = function (a) {\n    return 'mat4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' +\n                    a[4] + ', ' + a[5] + ', ' + a[6] + ', ' + a[7] + ', ' +\n                    a[8] + ', ' + a[9] + ', ' + a[10] + ', ' + a[11] + ', ' + \n                    a[12] + ', ' + a[13] + ', ' + a[14] + ', ' + a[15] + ')';\n};\n\n/**\n * Returns Frobenius norm of a mat4\n *\n * @param {mat4} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\nmat4.frob = function (a) {\n    return(Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + Math.pow(a[6], 2) + Math.pow(a[7], 2) + Math.pow(a[8], 2) + Math.pow(a[9], 2) + Math.pow(a[10], 2) + Math.pow(a[11], 2) + Math.pow(a[12], 2) + Math.pow(a[13], 2) + Math.pow(a[14], 2) + Math.pow(a[15], 2) ))\n};\n\n\nmodule.exports = mat4;\n","/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE. */\n\nvar glMatrix = require(\"./common.js\");\nvar mat3 = require(\"./mat3.js\");\nvar vec3 = require(\"./vec3.js\");\nvar vec4 = require(\"./vec4.js\");\n\n/**\n * @class Quaternion\n * @name quat\n */\nvar quat = {};\n\n/**\n * Creates a new identity quat\n *\n * @returns {quat} a new quaternion\n */\nquat.create = function() {\n    var out = new glMatrix.ARRAY_TYPE(4);\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 1;\n    return out;\n};\n\n/**\n * Sets a quaternion to represent the shortest rotation from one\n * vector to another.\n *\n * Both vectors are assumed to be unit length.\n *\n * @param {quat} out the receiving quaternion.\n * @param {vec3} a the initial vector\n * @param {vec3} b the destination vector\n * @returns {quat} out\n */\nquat.rotationTo = (function() {\n    var tmpvec3 = vec3.create();\n    var xUnitVec3 = vec3.fromValues(1,0,0);\n    var yUnitVec3 = vec3.fromValues(0,1,0);\n\n    return function(out, a, b) {\n        var dot = vec3.dot(a, b);\n        if (dot < -0.999999) {\n            vec3.cross(tmpvec3, xUnitVec3, a);\n            if (vec3.length(tmpvec3) < 0.000001)\n                vec3.cross(tmpvec3, yUnitVec3, a);\n            vec3.normalize(tmpvec3, tmpvec3);\n            quat.setAxisAngle(out, tmpvec3, Math.PI);\n            return out;\n        } else if (dot > 0.999999) {\n            out[0] = 0;\n            out[1] = 0;\n            out[2] = 0;\n            out[3] = 1;\n            return out;\n        } else {\n            vec3.cross(tmpvec3, a, b);\n            out[0] = tmpvec3[0];\n            out[1] = tmpvec3[1];\n            out[2] = tmpvec3[2];\n            out[3] = 1 + dot;\n            return quat.normalize(out, out);\n        }\n    };\n})();\n\n/**\n * Sets the specified quaternion with values corresponding to the given\n * axes. Each axis is a vec3 and is expected to be unit length and\n * perpendicular to all other specified axes.\n *\n * @param {vec3} view  the vector representing the viewing direction\n * @param {vec3} right the vector representing the local \"right\" direction\n * @param {vec3} up    the vector representing the local \"up\" direction\n * @returns {quat} out\n */\nquat.setAxes = (function() {\n    var matr = mat3.create();\n\n    return function(out, view, right, up) {\n        matr[0] = right[0];\n        matr[3] = right[1];\n        matr[6] = right[2];\n\n        matr[1] = up[0];\n        matr[4] = up[1];\n        matr[7] = up[2];\n\n        matr[2] = -view[0];\n        matr[5] = -view[1];\n        matr[8] = -view[2];\n\n        return quat.normalize(out, quat.fromMat3(out, matr));\n    };\n})();\n\n/**\n * Creates a new quat initialized with values from an existing quaternion\n *\n * @param {quat} a quaternion to clone\n * @returns {quat} a new quaternion\n * @function\n */\nquat.clone = vec4.clone;\n\n/**\n * Creates a new quat initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {quat} a new quaternion\n * @function\n */\nquat.fromValues = vec4.fromValues;\n\n/**\n * Copy the values from one quat to another\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the source quaternion\n * @returns {quat} out\n * @function\n */\nquat.copy = vec4.copy;\n\n/**\n * Set the components of a quat to the given values\n *\n * @param {quat} out the receiving quaternion\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {quat} out\n * @function\n */\nquat.set = vec4.set;\n\n/**\n * Set a quat to the identity quaternion\n *\n * @param {quat} out the receiving quaternion\n * @returns {quat} out\n */\nquat.identity = function(out) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 1;\n    return out;\n};\n\n/**\n * Sets a quat from the given angle and rotation axis,\n * then returns it.\n *\n * @param {quat} out the receiving quaternion\n * @param {vec3} axis the axis around which to rotate\n * @param {Number} rad the angle in radians\n * @returns {quat} out\n **/\nquat.setAxisAngle = function(out, axis, rad) {\n    rad = rad * 0.5;\n    var s = Math.sin(rad);\n    out[0] = s * axis[0];\n    out[1] = s * axis[1];\n    out[2] = s * axis[2];\n    out[3] = Math.cos(rad);\n    return out;\n};\n\n/**\n * Adds two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @returns {quat} out\n * @function\n */\nquat.add = vec4.add;\n\n/**\n * Multiplies two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @returns {quat} out\n */\nquat.multiply = function(out, a, b) {\n    var ax = a[0], ay = a[1], az = a[2], aw = a[3],\n        bx = b[0], by = b[1], bz = b[2], bw = b[3];\n\n    out[0] = ax * bw + aw * bx + ay * bz - az * by;\n    out[1] = ay * bw + aw * by + az * bx - ax * bz;\n    out[2] = az * bw + aw * bz + ax * by - ay * bx;\n    out[3] = aw * bw - ax * bx - ay * by - az * bz;\n    return out;\n};\n\n/**\n * Alias for {@link quat.multiply}\n * @function\n */\nquat.mul = quat.multiply;\n\n/**\n * Scales a quat by a scalar number\n *\n * @param {quat} out the receiving vector\n * @param {quat} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {quat} out\n * @function\n */\nquat.scale = vec4.scale;\n\n/**\n * Rotates a quaternion by the given angle about the X axis\n *\n * @param {quat} out quat receiving operation result\n * @param {quat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\nquat.rotateX = function (out, a, rad) {\n    rad *= 0.5; \n\n    var ax = a[0], ay = a[1], az = a[2], aw = a[3],\n        bx = Math.sin(rad), bw = Math.cos(rad);\n\n    out[0] = ax * bw + aw * bx;\n    out[1] = ay * bw + az * bx;\n    out[2] = az * bw - ay * bx;\n    out[3] = aw * bw - ax * bx;\n    return out;\n};\n\n/**\n * Rotates a quaternion by the given angle about the Y axis\n *\n * @param {quat} out quat receiving operation result\n * @param {quat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\nquat.rotateY = function (out, a, rad) {\n    rad *= 0.5; \n\n    var ax = a[0], ay = a[1], az = a[2], aw = a[3],\n        by = Math.sin(rad), bw = Math.cos(rad);\n\n    out[0] = ax * bw - az * by;\n    out[1] = ay * bw + aw * by;\n    out[2] = az * bw + ax * by;\n    out[3] = aw * bw - ay * by;\n    return out;\n};\n\n/**\n * Rotates a quaternion by the given angle about the Z axis\n *\n * @param {quat} out quat receiving operation result\n * @param {quat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\nquat.rotateZ = function (out, a, rad) {\n    rad *= 0.5; \n\n    var ax = a[0], ay = a[1], az = a[2], aw = a[3],\n        bz = Math.sin(rad), bw = Math.cos(rad);\n\n    out[0] = ax * bw + ay * bz;\n    out[1] = ay * bw - ax * bz;\n    out[2] = az * bw + aw * bz;\n    out[3] = aw * bw - az * bz;\n    return out;\n};\n\n/**\n * Calculates the W component of a quat from the X, Y, and Z components.\n * Assumes that quaternion is 1 unit in length.\n * Any existing W component will be ignored.\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a quat to calculate W component of\n * @returns {quat} out\n */\nquat.calculateW = function (out, a) {\n    var x = a[0], y = a[1], z = a[2];\n\n    out[0] = x;\n    out[1] = y;\n    out[2] = z;\n    out[3] = Math.sqrt(Math.abs(1.0 - x * x - y * y - z * z));\n    return out;\n};\n\n/**\n * Calculates the dot product of two quat's\n *\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @returns {Number} dot product of a and b\n * @function\n */\nquat.dot = vec4.dot;\n\n/**\n * Performs a linear interpolation between two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @param {Number} t interpolation amount between the two inputs\n * @returns {quat} out\n * @function\n */\nquat.lerp = vec4.lerp;\n\n/**\n * Performs a spherical linear interpolation between two quat\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @param {Number} t interpolation amount between the two inputs\n * @returns {quat} out\n */\nquat.slerp = function (out, a, b, t) {\n    // benchmarks:\n    //    http://jsperf.com/quaternion-slerp-implementations\n\n    var ax = a[0], ay = a[1], az = a[2], aw = a[3],\n        bx = b[0], by = b[1], bz = b[2], bw = b[3];\n\n    var        omega, cosom, sinom, scale0, scale1;\n\n    // calc cosine\n    cosom = ax * bx + ay * by + az * bz + aw * bw;\n    // adjust signs (if necessary)\n    if ( cosom < 0.0 ) {\n        cosom = -cosom;\n        bx = - bx;\n        by = - by;\n        bz = - bz;\n        bw = - bw;\n    }\n    // calculate coefficients\n    if ( (1.0 - cosom) > 0.000001 ) {\n        // standard case (slerp)\n        omega  = Math.acos(cosom);\n        sinom  = Math.sin(omega);\n        scale0 = Math.sin((1.0 - t) * omega) / sinom;\n        scale1 = Math.sin(t * omega) / sinom;\n    } else {        \n        // \"from\" and \"to\" quaternions are very close \n        //  ... so we can do a linear interpolation\n        scale0 = 1.0 - t;\n        scale1 = t;\n    }\n    // calculate final values\n    out[0] = scale0 * ax + scale1 * bx;\n    out[1] = scale0 * ay + scale1 * by;\n    out[2] = scale0 * az + scale1 * bz;\n    out[3] = scale0 * aw + scale1 * bw;\n    \n    return out;\n};\n\n/**\n * Performs a spherical linear interpolation with two control points\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @param {quat} c the third operand\n * @param {quat} d the fourth operand\n * @param {Number} t interpolation amount\n * @returns {quat} out\n */\nquat.sqlerp = (function () {\n  var temp1 = quat.create();\n  var temp2 = quat.create();\n  \n  return function (out, a, b, c, d, t) {\n    quat.slerp(temp1, a, d, t);\n    quat.slerp(temp2, b, c, t);\n    quat.slerp(out, temp1, temp2, 2 * t * (1 - t));\n    \n    return out;\n  };\n}());\n\n/**\n * Calculates the inverse of a quat\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a quat to calculate inverse of\n * @returns {quat} out\n */\nquat.invert = function(out, a) {\n    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3],\n        dot = a0*a0 + a1*a1 + a2*a2 + a3*a3,\n        invDot = dot ? 1.0/dot : 0;\n    \n    // TODO: Would be faster to return [0,0,0,0] immediately if dot == 0\n\n    out[0] = -a0*invDot;\n    out[1] = -a1*invDot;\n    out[2] = -a2*invDot;\n    out[3] = a3*invDot;\n    return out;\n};\n\n/**\n * Calculates the conjugate of a quat\n * If the quaternion is normalized, this function is faster than quat.inverse and produces the same result.\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a quat to calculate conjugate of\n * @returns {quat} out\n */\nquat.conjugate = function (out, a) {\n    out[0] = -a[0];\n    out[1] = -a[1];\n    out[2] = -a[2];\n    out[3] = a[3];\n    return out;\n};\n\n/**\n * Calculates the length of a quat\n *\n * @param {quat} a vector to calculate length of\n * @returns {Number} length of a\n * @function\n */\nquat.length = vec4.length;\n\n/**\n * Alias for {@link quat.length}\n * @function\n */\nquat.len = quat.length;\n\n/**\n * Calculates the squared length of a quat\n *\n * @param {quat} a vector to calculate squared length of\n * @returns {Number} squared length of a\n * @function\n */\nquat.squaredLength = vec4.squaredLength;\n\n/**\n * Alias for {@link quat.squaredLength}\n * @function\n */\nquat.sqrLen = quat.squaredLength;\n\n/**\n * Normalize a quat\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a quaternion to normalize\n * @returns {quat} out\n * @function\n */\nquat.normalize = vec4.normalize;\n\n/**\n * Creates a quaternion from the given 3x3 rotation matrix.\n *\n * NOTE: The resultant quaternion is not normalized, so you should be sure\n * to renormalize the quaternion yourself where necessary.\n *\n * @param {quat} out the receiving quaternion\n * @param {mat3} m rotation matrix\n * @returns {quat} out\n * @function\n */\nquat.fromMat3 = function(out, m) {\n    // Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes\n    // article \"Quaternion Calculus and Fast Animation\".\n    var fTrace = m[0] + m[4] + m[8];\n    var fRoot;\n\n    if ( fTrace > 0.0 ) {\n        // |w| > 1/2, may as well choose w > 1/2\n        fRoot = Math.sqrt(fTrace + 1.0);  // 2w\n        out[3] = 0.5 * fRoot;\n        fRoot = 0.5/fRoot;  // 1/(4w)\n        out[0] = (m[5]-m[7])*fRoot;\n        out[1] = (m[6]-m[2])*fRoot;\n        out[2] = (m[1]-m[3])*fRoot;\n    } else {\n        // |w| <= 1/2\n        var i = 0;\n        if ( m[4] > m[0] )\n          i = 1;\n        if ( m[8] > m[i*3+i] )\n          i = 2;\n        var j = (i+1)%3;\n        var k = (i+2)%3;\n        \n        fRoot = Math.sqrt(m[i*3+i]-m[j*3+j]-m[k*3+k] + 1.0);\n        out[i] = 0.5 * fRoot;\n        fRoot = 0.5 / fRoot;\n        out[3] = (m[j*3+k] - m[k*3+j]) * fRoot;\n        out[j] = (m[j*3+i] + m[i*3+j]) * fRoot;\n        out[k] = (m[k*3+i] + m[i*3+k]) * fRoot;\n    }\n    \n    return out;\n};\n\n/**\n * Returns a string representation of a quatenion\n *\n * @param {quat} vec vector to represent as a string\n * @returns {String} string representation of the vector\n */\nquat.str = function (a) {\n    return 'quat(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';\n};\n\nmodule.exports = quat;\n","/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE. */\n\nvar glMatrix = require(\"./common.js\");\n\n/**\n * @class 2 Dimensional Vector\n * @name vec2\n */\nvar vec2 = {};\n\n/**\n * Creates a new, empty vec2\n *\n * @returns {vec2} a new 2D vector\n */\nvec2.create = function() {\n    var out = new glMatrix.ARRAY_TYPE(2);\n    out[0] = 0;\n    out[1] = 0;\n    return out;\n};\n\n/**\n * Creates a new vec2 initialized with values from an existing vector\n *\n * @param {vec2} a vector to clone\n * @returns {vec2} a new 2D vector\n */\nvec2.clone = function(a) {\n    var out = new glMatrix.ARRAY_TYPE(2);\n    out[0] = a[0];\n    out[1] = a[1];\n    return out;\n};\n\n/**\n * Creates a new vec2 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @returns {vec2} a new 2D vector\n */\nvec2.fromValues = function(x, y) {\n    var out = new glMatrix.ARRAY_TYPE(2);\n    out[0] = x;\n    out[1] = y;\n    return out;\n};\n\n/**\n * Copy the values from one vec2 to another\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the source vector\n * @returns {vec2} out\n */\nvec2.copy = function(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    return out;\n};\n\n/**\n * Set the components of a vec2 to the given values\n *\n * @param {vec2} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @returns {vec2} out\n */\nvec2.set = function(out, x, y) {\n    out[0] = x;\n    out[1] = y;\n    return out;\n};\n\n/**\n * Adds two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nvec2.add = function(out, a, b) {\n    out[0] = a[0] + b[0];\n    out[1] = a[1] + b[1];\n    return out;\n};\n\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nvec2.subtract = function(out, a, b) {\n    out[0] = a[0] - b[0];\n    out[1] = a[1] - b[1];\n    return out;\n};\n\n/**\n * Alias for {@link vec2.subtract}\n * @function\n */\nvec2.sub = vec2.subtract;\n\n/**\n * Multiplies two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nvec2.multiply = function(out, a, b) {\n    out[0] = a[0] * b[0];\n    out[1] = a[1] * b[1];\n    return out;\n};\n\n/**\n * Alias for {@link vec2.multiply}\n * @function\n */\nvec2.mul = vec2.multiply;\n\n/**\n * Divides two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nvec2.divide = function(out, a, b) {\n    out[0] = a[0] / b[0];\n    out[1] = a[1] / b[1];\n    return out;\n};\n\n/**\n * Alias for {@link vec2.divide}\n * @function\n */\nvec2.div = vec2.divide;\n\n/**\n * Returns the minimum of two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nvec2.min = function(out, a, b) {\n    out[0] = Math.min(a[0], b[0]);\n    out[1] = Math.min(a[1], b[1]);\n    return out;\n};\n\n/**\n * Returns the maximum of two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nvec2.max = function(out, a, b) {\n    out[0] = Math.max(a[0], b[0]);\n    out[1] = Math.max(a[1], b[1]);\n    return out;\n};\n\n/**\n * Scales a vec2 by a scalar number\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec2} out\n */\nvec2.scale = function(out, a, b) {\n    out[0] = a[0] * b;\n    out[1] = a[1] * b;\n    return out;\n};\n\n/**\n * Adds two vec2's after scaling the second operand by a scalar value\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec2} out\n */\nvec2.scaleAndAdd = function(out, a, b, scale) {\n    out[0] = a[0] + (b[0] * scale);\n    out[1] = a[1] + (b[1] * scale);\n    return out;\n};\n\n/**\n * Calculates the euclidian distance between two vec2's\n *\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {Number} distance between a and b\n */\nvec2.distance = function(a, b) {\n    var x = b[0] - a[0],\n        y = b[1] - a[1];\n    return Math.sqrt(x*x + y*y);\n};\n\n/**\n * Alias for {@link vec2.distance}\n * @function\n */\nvec2.dist = vec2.distance;\n\n/**\n * Calculates the squared euclidian distance between two vec2's\n *\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {Number} squared distance between a and b\n */\nvec2.squaredDistance = function(a, b) {\n    var x = b[0] - a[0],\n        y = b[1] - a[1];\n    return x*x + y*y;\n};\n\n/**\n * Alias for {@link vec2.squaredDistance}\n * @function\n */\nvec2.sqrDist = vec2.squaredDistance;\n\n/**\n * Calculates the length of a vec2\n *\n * @param {vec2} a vector to calculate length of\n * @returns {Number} length of a\n */\nvec2.length = function (a) {\n    var x = a[0],\n        y = a[1];\n    return Math.sqrt(x*x + y*y);\n};\n\n/**\n * Alias for {@link vec2.length}\n * @function\n */\nvec2.len = vec2.length;\n\n/**\n * Calculates the squared length of a vec2\n *\n * @param {vec2} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\nvec2.squaredLength = function (a) {\n    var x = a[0],\n        y = a[1];\n    return x*x + y*y;\n};\n\n/**\n * Alias for {@link vec2.squaredLength}\n * @function\n */\nvec2.sqrLen = vec2.squaredLength;\n\n/**\n * Negates the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to negate\n * @returns {vec2} out\n */\nvec2.negate = function(out, a) {\n    out[0] = -a[0];\n    out[1] = -a[1];\n    return out;\n};\n\n/**\n * Returns the inverse of the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to invert\n * @returns {vec2} out\n */\nvec2.inverse = function(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  return out;\n};\n\n/**\n * Normalize a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to normalize\n * @returns {vec2} out\n */\nvec2.normalize = function(out, a) {\n    var x = a[0],\n        y = a[1];\n    var len = x*x + y*y;\n    if (len > 0) {\n        //TODO: evaluate use of glm_invsqrt here?\n        len = 1 / Math.sqrt(len);\n        out[0] = a[0] * len;\n        out[1] = a[1] * len;\n    }\n    return out;\n};\n\n/**\n * Calculates the dot product of two vec2's\n *\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {Number} dot product of a and b\n */\nvec2.dot = function (a, b) {\n    return a[0] * b[0] + a[1] * b[1];\n};\n\n/**\n * Computes the cross product of two vec2's\n * Note that the cross product must by definition produce a 3D vector\n *\n * @param {vec3} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec3} out\n */\nvec2.cross = function(out, a, b) {\n    var z = a[0] * b[1] - a[1] * b[0];\n    out[0] = out[1] = 0;\n    out[2] = z;\n    return out;\n};\n\n/**\n * Performs a linear interpolation between two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @param {Number} t interpolation amount between the two inputs\n * @returns {vec2} out\n */\nvec2.lerp = function (out, a, b, t) {\n    var ax = a[0],\n        ay = a[1];\n    out[0] = ax + t * (b[0] - ax);\n    out[1] = ay + t * (b[1] - ay);\n    return out;\n};\n\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec2} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec2} out\n */\nvec2.random = function (out, scale) {\n    scale = scale || 1.0;\n    var r = glMatrix.RANDOM() * 2.0 * Math.PI;\n    out[0] = Math.cos(r) * scale;\n    out[1] = Math.sin(r) * scale;\n    return out;\n};\n\n/**\n * Transforms the vec2 with a mat2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to transform\n * @param {mat2} m matrix to transform with\n * @returns {vec2} out\n */\nvec2.transformMat2 = function(out, a, m) {\n    var x = a[0],\n        y = a[1];\n    out[0] = m[0] * x + m[2] * y;\n    out[1] = m[1] * x + m[3] * y;\n    return out;\n};\n\n/**\n * Transforms the vec2 with a mat2d\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to transform\n * @param {mat2d} m matrix to transform with\n * @returns {vec2} out\n */\nvec2.transformMat2d = function(out, a, m) {\n    var x = a[0],\n        y = a[1];\n    out[0] = m[0] * x + m[2] * y + m[4];\n    out[1] = m[1] * x + m[3] * y + m[5];\n    return out;\n};\n\n/**\n * Transforms the vec2 with a mat3\n * 3rd vector component is implicitly '1'\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to transform\n * @param {mat3} m matrix to transform with\n * @returns {vec2} out\n */\nvec2.transformMat3 = function(out, a, m) {\n    var x = a[0],\n        y = a[1];\n    out[0] = m[0] * x + m[3] * y + m[6];\n    out[1] = m[1] * x + m[4] * y + m[7];\n    return out;\n};\n\n/**\n * Transforms the vec2 with a mat4\n * 3rd vector component is implicitly '0'\n * 4th vector component is implicitly '1'\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to transform\n * @param {mat4} m matrix to transform with\n * @returns {vec2} out\n */\nvec2.transformMat4 = function(out, a, m) {\n    var x = a[0], \n        y = a[1];\n    out[0] = m[0] * x + m[4] * y + m[12];\n    out[1] = m[1] * x + m[5] * y + m[13];\n    return out;\n};\n\n/**\n * Perform some operation over an array of vec2s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec2. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec2s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\nvec2.forEach = (function() {\n    var vec = vec2.create();\n\n    return function(a, stride, offset, count, fn, arg) {\n        var i, l;\n        if(!stride) {\n            stride = 2;\n        }\n\n        if(!offset) {\n            offset = 0;\n        }\n        \n        if(count) {\n            l = Math.min((count * stride) + offset, a.length);\n        } else {\n            l = a.length;\n        }\n\n        for(i = offset; i < l; i += stride) {\n            vec[0] = a[i]; vec[1] = a[i+1];\n            fn(vec, vec, arg);\n            a[i] = vec[0]; a[i+1] = vec[1];\n        }\n        \n        return a;\n    };\n})();\n\n/**\n * Returns a string representation of a vector\n *\n * @param {vec2} vec vector to represent as a string\n * @returns {String} string representation of the vector\n */\nvec2.str = function (a) {\n    return 'vec2(' + a[0] + ', ' + a[1] + ')';\n};\n\nmodule.exports = vec2;\n","/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE. */\n\nvar glMatrix = require(\"./common.js\");\n\n/**\n * @class 3 Dimensional Vector\n * @name vec3\n */\nvar vec3 = {};\n\n/**\n * Creates a new, empty vec3\n *\n * @returns {vec3} a new 3D vector\n */\nvec3.create = function() {\n    var out = new glMatrix.ARRAY_TYPE(3);\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n    return out;\n};\n\n/**\n * Creates a new vec3 initialized with values from an existing vector\n *\n * @param {vec3} a vector to clone\n * @returns {vec3} a new 3D vector\n */\nvec3.clone = function(a) {\n    var out = new glMatrix.ARRAY_TYPE(3);\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    return out;\n};\n\n/**\n * Creates a new vec3 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} a new 3D vector\n */\nvec3.fromValues = function(x, y, z) {\n    var out = new glMatrix.ARRAY_TYPE(3);\n    out[0] = x;\n    out[1] = y;\n    out[2] = z;\n    return out;\n};\n\n/**\n * Copy the values from one vec3 to another\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the source vector\n * @returns {vec3} out\n */\nvec3.copy = function(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    return out;\n};\n\n/**\n * Set the components of a vec3 to the given values\n *\n * @param {vec3} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} out\n */\nvec3.set = function(out, x, y, z) {\n    out[0] = x;\n    out[1] = y;\n    out[2] = z;\n    return out;\n};\n\n/**\n * Adds two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nvec3.add = function(out, a, b) {\n    out[0] = a[0] + b[0];\n    out[1] = a[1] + b[1];\n    out[2] = a[2] + b[2];\n    return out;\n};\n\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nvec3.subtract = function(out, a, b) {\n    out[0] = a[0] - b[0];\n    out[1] = a[1] - b[1];\n    out[2] = a[2] - b[2];\n    return out;\n};\n\n/**\n * Alias for {@link vec3.subtract}\n * @function\n */\nvec3.sub = vec3.subtract;\n\n/**\n * Multiplies two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nvec3.multiply = function(out, a, b) {\n    out[0] = a[0] * b[0];\n    out[1] = a[1] * b[1];\n    out[2] = a[2] * b[2];\n    return out;\n};\n\n/**\n * Alias for {@link vec3.multiply}\n * @function\n */\nvec3.mul = vec3.multiply;\n\n/**\n * Divides two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nvec3.divide = function(out, a, b) {\n    out[0] = a[0] / b[0];\n    out[1] = a[1] / b[1];\n    out[2] = a[2] / b[2];\n    return out;\n};\n\n/**\n * Alias for {@link vec3.divide}\n * @function\n */\nvec3.div = vec3.divide;\n\n/**\n * Returns the minimum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nvec3.min = function(out, a, b) {\n    out[0] = Math.min(a[0], b[0]);\n    out[1] = Math.min(a[1], b[1]);\n    out[2] = Math.min(a[2], b[2]);\n    return out;\n};\n\n/**\n * Returns the maximum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nvec3.max = function(out, a, b) {\n    out[0] = Math.max(a[0], b[0]);\n    out[1] = Math.max(a[1], b[1]);\n    out[2] = Math.max(a[2], b[2]);\n    return out;\n};\n\n/**\n * Scales a vec3 by a scalar number\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec3} out\n */\nvec3.scale = function(out, a, b) {\n    out[0] = a[0] * b;\n    out[1] = a[1] * b;\n    out[2] = a[2] * b;\n    return out;\n};\n\n/**\n * Adds two vec3's after scaling the second operand by a scalar value\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec3} out\n */\nvec3.scaleAndAdd = function(out, a, b, scale) {\n    out[0] = a[0] + (b[0] * scale);\n    out[1] = a[1] + (b[1] * scale);\n    out[2] = a[2] + (b[2] * scale);\n    return out;\n};\n\n/**\n * Calculates the euclidian distance between two vec3's\n *\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {Number} distance between a and b\n */\nvec3.distance = function(a, b) {\n    var x = b[0] - a[0],\n        y = b[1] - a[1],\n        z = b[2] - a[2];\n    return Math.sqrt(x*x + y*y + z*z);\n};\n\n/**\n * Alias for {@link vec3.distance}\n * @function\n */\nvec3.dist = vec3.distance;\n\n/**\n * Calculates the squared euclidian distance between two vec3's\n *\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {Number} squared distance between a and b\n */\nvec3.squaredDistance = function(a, b) {\n    var x = b[0] - a[0],\n        y = b[1] - a[1],\n        z = b[2] - a[2];\n    return x*x + y*y + z*z;\n};\n\n/**\n * Alias for {@link vec3.squaredDistance}\n * @function\n */\nvec3.sqrDist = vec3.squaredDistance;\n\n/**\n * Calculates the length of a vec3\n *\n * @param {vec3} a vector to calculate length of\n * @returns {Number} length of a\n */\nvec3.length = function (a) {\n    var x = a[0],\n        y = a[1],\n        z = a[2];\n    return Math.sqrt(x*x + y*y + z*z);\n};\n\n/**\n * Alias for {@link vec3.length}\n * @function\n */\nvec3.len = vec3.length;\n\n/**\n * Calculates the squared length of a vec3\n *\n * @param {vec3} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\nvec3.squaredLength = function (a) {\n    var x = a[0],\n        y = a[1],\n        z = a[2];\n    return x*x + y*y + z*z;\n};\n\n/**\n * Alias for {@link vec3.squaredLength}\n * @function\n */\nvec3.sqrLen = vec3.squaredLength;\n\n/**\n * Negates the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to negate\n * @returns {vec3} out\n */\nvec3.negate = function(out, a) {\n    out[0] = -a[0];\n    out[1] = -a[1];\n    out[2] = -a[2];\n    return out;\n};\n\n/**\n * Returns the inverse of the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to invert\n * @returns {vec3} out\n */\nvec3.inverse = function(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  return out;\n};\n\n/**\n * Normalize a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to normalize\n * @returns {vec3} out\n */\nvec3.normalize = function(out, a) {\n    var x = a[0],\n        y = a[1],\n        z = a[2];\n    var len = x*x + y*y + z*z;\n    if (len > 0) {\n        //TODO: evaluate use of glm_invsqrt here?\n        len = 1 / Math.sqrt(len);\n        out[0] = a[0] * len;\n        out[1] = a[1] * len;\n        out[2] = a[2] * len;\n    }\n    return out;\n};\n\n/**\n * Calculates the dot product of two vec3's\n *\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {Number} dot product of a and b\n */\nvec3.dot = function (a, b) {\n    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n};\n\n/**\n * Computes the cross product of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nvec3.cross = function(out, a, b) {\n    var ax = a[0], ay = a[1], az = a[2],\n        bx = b[0], by = b[1], bz = b[2];\n\n    out[0] = ay * bz - az * by;\n    out[1] = az * bx - ax * bz;\n    out[2] = ax * by - ay * bx;\n    return out;\n};\n\n/**\n * Performs a linear interpolation between two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @param {Number} t interpolation amount between the two inputs\n * @returns {vec3} out\n */\nvec3.lerp = function (out, a, b, t) {\n    var ax = a[0],\n        ay = a[1],\n        az = a[2];\n    out[0] = ax + t * (b[0] - ax);\n    out[1] = ay + t * (b[1] - ay);\n    out[2] = az + t * (b[2] - az);\n    return out;\n};\n\n/**\n * Performs a hermite interpolation with two control points\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @param {vec3} c the third operand\n * @param {vec3} d the fourth operand\n * @param {Number} t interpolation amount between the two inputs\n * @returns {vec3} out\n */\nvec3.hermite = function (out, a, b, c, d, t) {\n  var factorTimes2 = t * t,\n      factor1 = factorTimes2 * (2 * t - 3) + 1,\n      factor2 = factorTimes2 * (t - 2) + t,\n      factor3 = factorTimes2 * (t - 1),\n      factor4 = factorTimes2 * (3 - 2 * t);\n  \n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  \n  return out;\n};\n\n/**\n * Performs a bezier interpolation with two control points\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @param {vec3} c the third operand\n * @param {vec3} d the fourth operand\n * @param {Number} t interpolation amount between the two inputs\n * @returns {vec3} out\n */\nvec3.bezier = function (out, a, b, c, d, t) {\n  var inverseFactor = 1 - t,\n      inverseFactorTimesTwo = inverseFactor * inverseFactor,\n      factorTimes2 = t * t,\n      factor1 = inverseFactorTimesTwo * inverseFactor,\n      factor2 = 3 * t * inverseFactorTimesTwo,\n      factor3 = 3 * factorTimes2 * inverseFactor,\n      factor4 = factorTimes2 * t;\n  \n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  \n  return out;\n};\n\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec3} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec3} out\n */\nvec3.random = function (out, scale) {\n    scale = scale || 1.0;\n\n    var r = glMatrix.RANDOM() * 2.0 * Math.PI;\n    var z = (glMatrix.RANDOM() * 2.0) - 1.0;\n    var zScale = Math.sqrt(1.0-z*z) * scale;\n\n    out[0] = Math.cos(r) * zScale;\n    out[1] = Math.sin(r) * zScale;\n    out[2] = z * scale;\n    return out;\n};\n\n/**\n * Transforms the vec3 with a mat4.\n * 4th vector component is implicitly '1'\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to transform\n * @param {mat4} m matrix to transform with\n * @returns {vec3} out\n */\nvec3.transformMat4 = function(out, a, m) {\n    var x = a[0], y = a[1], z = a[2],\n        w = m[3] * x + m[7] * y + m[11] * z + m[15];\n    w = w || 1.0;\n    out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\n    out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\n    out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\n    return out;\n};\n\n/**\n * Transforms the vec3 with a mat3.\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to transform\n * @param {mat4} m the 3x3 matrix to transform with\n * @returns {vec3} out\n */\nvec3.transformMat3 = function(out, a, m) {\n    var x = a[0], y = a[1], z = a[2];\n    out[0] = x * m[0] + y * m[3] + z * m[6];\n    out[1] = x * m[1] + y * m[4] + z * m[7];\n    out[2] = x * m[2] + y * m[5] + z * m[8];\n    return out;\n};\n\n/**\n * Transforms the vec3 with a quat\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to transform\n * @param {quat} q quaternion to transform with\n * @returns {vec3} out\n */\nvec3.transformQuat = function(out, a, q) {\n    // benchmarks: http://jsperf.com/quaternion-transform-vec3-implementations\n\n    var x = a[0], y = a[1], z = a[2],\n        qx = q[0], qy = q[1], qz = q[2], qw = q[3],\n\n        // calculate quat * vec\n        ix = qw * x + qy * z - qz * y,\n        iy = qw * y + qz * x - qx * z,\n        iz = qw * z + qx * y - qy * x,\n        iw = -qx * x - qy * y - qz * z;\n\n    // calculate result * inverse quat\n    out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n    out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n    out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n    return out;\n};\n\n/**\n * Rotate a 3D vector around the x-axis\n * @param {vec3} out The receiving vec3\n * @param {vec3} a The vec3 point to rotate\n * @param {vec3} b The origin of the rotation\n * @param {Number} c The angle of rotation\n * @returns {vec3} out\n */\nvec3.rotateX = function(out, a, b, c){\n   var p = [], r=[];\n\t  //Translate point to the origin\n\t  p[0] = a[0] - b[0];\n\t  p[1] = a[1] - b[1];\n  \tp[2] = a[2] - b[2];\n\n\t  //perform rotation\n\t  r[0] = p[0];\n\t  r[1] = p[1]*Math.cos(c) - p[2]*Math.sin(c);\n\t  r[2] = p[1]*Math.sin(c) + p[2]*Math.cos(c);\n\n\t  //translate to correct position\n\t  out[0] = r[0] + b[0];\n\t  out[1] = r[1] + b[1];\n\t  out[2] = r[2] + b[2];\n\n  \treturn out;\n};\n\n/**\n * Rotate a 3D vector around the y-axis\n * @param {vec3} out The receiving vec3\n * @param {vec3} a The vec3 point to rotate\n * @param {vec3} b The origin of the rotation\n * @param {Number} c The angle of rotation\n * @returns {vec3} out\n */\nvec3.rotateY = function(out, a, b, c){\n  \tvar p = [], r=[];\n  \t//Translate point to the origin\n  \tp[0] = a[0] - b[0];\n  \tp[1] = a[1] - b[1];\n  \tp[2] = a[2] - b[2];\n  \n  \t//perform rotation\n  \tr[0] = p[2]*Math.sin(c) + p[0]*Math.cos(c);\n  \tr[1] = p[1];\n  \tr[2] = p[2]*Math.cos(c) - p[0]*Math.sin(c);\n  \n  \t//translate to correct position\n  \tout[0] = r[0] + b[0];\n  \tout[1] = r[1] + b[1];\n  \tout[2] = r[2] + b[2];\n  \n  \treturn out;\n};\n\n/**\n * Rotate a 3D vector around the z-axis\n * @param {vec3} out The receiving vec3\n * @param {vec3} a The vec3 point to rotate\n * @param {vec3} b The origin of the rotation\n * @param {Number} c The angle of rotation\n * @returns {vec3} out\n */\nvec3.rotateZ = function(out, a, b, c){\n  \tvar p = [], r=[];\n  \t//Translate point to the origin\n  \tp[0] = a[0] - b[0];\n  \tp[1] = a[1] - b[1];\n  \tp[2] = a[2] - b[2];\n  \n  \t//perform rotation\n  \tr[0] = p[0]*Math.cos(c) - p[1]*Math.sin(c);\n  \tr[1] = p[0]*Math.sin(c) + p[1]*Math.cos(c);\n  \tr[2] = p[2];\n  \n  \t//translate to correct position\n  \tout[0] = r[0] + b[0];\n  \tout[1] = r[1] + b[1];\n  \tout[2] = r[2] + b[2];\n  \n  \treturn out;\n};\n\n/**\n * Perform some operation over an array of vec3s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\nvec3.forEach = (function() {\n    var vec = vec3.create();\n\n    return function(a, stride, offset, count, fn, arg) {\n        var i, l;\n        if(!stride) {\n            stride = 3;\n        }\n\n        if(!offset) {\n            offset = 0;\n        }\n        \n        if(count) {\n            l = Math.min((count * stride) + offset, a.length);\n        } else {\n            l = a.length;\n        }\n\n        for(i = offset; i < l; i += stride) {\n            vec[0] = a[i]; vec[1] = a[i+1]; vec[2] = a[i+2];\n            fn(vec, vec, arg);\n            a[i] = vec[0]; a[i+1] = vec[1]; a[i+2] = vec[2];\n        }\n        \n        return a;\n    };\n})();\n\n/**\n * Get the angle between two 3D vectors\n * @param {vec3} a The first operand\n * @param {vec3} b The second operand\n * @returns {Number} The angle in radians\n */\nvec3.angle = function(a, b) {\n   \n    var tempA = vec3.fromValues(a[0], a[1], a[2]);\n    var tempB = vec3.fromValues(b[0], b[1], b[2]);\n \n    vec3.normalize(tempA, tempA);\n    vec3.normalize(tempB, tempB);\n \n    var cosine = vec3.dot(tempA, tempB);\n\n    if(cosine > 1.0){\n        return 0;\n    } else {\n        return Math.acos(cosine);\n    }     \n};\n\n/**\n * Returns a string representation of a vector\n *\n * @param {vec3} vec vector to represent as a string\n * @returns {String} string representation of the vector\n */\nvec3.str = function (a) {\n    return 'vec3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ')';\n};\n\nmodule.exports = vec3;\n","/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE. */\n\nvar glMatrix = require(\"./common.js\");\n\n/**\n * @class 4 Dimensional Vector\n * @name vec4\n */\nvar vec4 = {};\n\n/**\n * Creates a new, empty vec4\n *\n * @returns {vec4} a new 4D vector\n */\nvec4.create = function() {\n    var out = new glMatrix.ARRAY_TYPE(4);\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    return out;\n};\n\n/**\n * Creates a new vec4 initialized with values from an existing vector\n *\n * @param {vec4} a vector to clone\n * @returns {vec4} a new 4D vector\n */\nvec4.clone = function(a) {\n    var out = new glMatrix.ARRAY_TYPE(4);\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    return out;\n};\n\n/**\n * Creates a new vec4 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {vec4} a new 4D vector\n */\nvec4.fromValues = function(x, y, z, w) {\n    var out = new glMatrix.ARRAY_TYPE(4);\n    out[0] = x;\n    out[1] = y;\n    out[2] = z;\n    out[3] = w;\n    return out;\n};\n\n/**\n * Copy the values from one vec4 to another\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the source vector\n * @returns {vec4} out\n */\nvec4.copy = function(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    return out;\n};\n\n/**\n * Set the components of a vec4 to the given values\n *\n * @param {vec4} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {vec4} out\n */\nvec4.set = function(out, x, y, z, w) {\n    out[0] = x;\n    out[1] = y;\n    out[2] = z;\n    out[3] = w;\n    return out;\n};\n\n/**\n * Adds two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {vec4} out\n */\nvec4.add = function(out, a, b) {\n    out[0] = a[0] + b[0];\n    out[1] = a[1] + b[1];\n    out[2] = a[2] + b[2];\n    out[3] = a[3] + b[3];\n    return out;\n};\n\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {vec4} out\n */\nvec4.subtract = function(out, a, b) {\n    out[0] = a[0] - b[0];\n    out[1] = a[1] - b[1];\n    out[2] = a[2] - b[2];\n    out[3] = a[3] - b[3];\n    return out;\n};\n\n/**\n * Alias for {@link vec4.subtract}\n * @function\n */\nvec4.sub = vec4.subtract;\n\n/**\n * Multiplies two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {vec4} out\n */\nvec4.multiply = function(out, a, b) {\n    out[0] = a[0] * b[0];\n    out[1] = a[1] * b[1];\n    out[2] = a[2] * b[2];\n    out[3] = a[3] * b[3];\n    return out;\n};\n\n/**\n * Alias for {@link vec4.multiply}\n * @function\n */\nvec4.mul = vec4.multiply;\n\n/**\n * Divides two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {vec4} out\n */\nvec4.divide = function(out, a, b) {\n    out[0] = a[0] / b[0];\n    out[1] = a[1] / b[1];\n    out[2] = a[2] / b[2];\n    out[3] = a[3] / b[3];\n    return out;\n};\n\n/**\n * Alias for {@link vec4.divide}\n * @function\n */\nvec4.div = vec4.divide;\n\n/**\n * Returns the minimum of two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {vec4} out\n */\nvec4.min = function(out, a, b) {\n    out[0] = Math.min(a[0], b[0]);\n    out[1] = Math.min(a[1], b[1]);\n    out[2] = Math.min(a[2], b[2]);\n    out[3] = Math.min(a[3], b[3]);\n    return out;\n};\n\n/**\n * Returns the maximum of two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {vec4} out\n */\nvec4.max = function(out, a, b) {\n    out[0] = Math.max(a[0], b[0]);\n    out[1] = Math.max(a[1], b[1]);\n    out[2] = Math.max(a[2], b[2]);\n    out[3] = Math.max(a[3], b[3]);\n    return out;\n};\n\n/**\n * Scales a vec4 by a scalar number\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec4} out\n */\nvec4.scale = function(out, a, b) {\n    out[0] = a[0] * b;\n    out[1] = a[1] * b;\n    out[2] = a[2] * b;\n    out[3] = a[3] * b;\n    return out;\n};\n\n/**\n * Adds two vec4's after scaling the second operand by a scalar value\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec4} out\n */\nvec4.scaleAndAdd = function(out, a, b, scale) {\n    out[0] = a[0] + (b[0] * scale);\n    out[1] = a[1] + (b[1] * scale);\n    out[2] = a[2] + (b[2] * scale);\n    out[3] = a[3] + (b[3] * scale);\n    return out;\n};\n\n/**\n * Calculates the euclidian distance between two vec4's\n *\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {Number} distance between a and b\n */\nvec4.distance = function(a, b) {\n    var x = b[0] - a[0],\n        y = b[1] - a[1],\n        z = b[2] - a[2],\n        w = b[3] - a[3];\n    return Math.sqrt(x*x + y*y + z*z + w*w);\n};\n\n/**\n * Alias for {@link vec4.distance}\n * @function\n */\nvec4.dist = vec4.distance;\n\n/**\n * Calculates the squared euclidian distance between two vec4's\n *\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {Number} squared distance between a and b\n */\nvec4.squaredDistance = function(a, b) {\n    var x = b[0] - a[0],\n        y = b[1] - a[1],\n        z = b[2] - a[2],\n        w = b[3] - a[3];\n    return x*x + y*y + z*z + w*w;\n};\n\n/**\n * Alias for {@link vec4.squaredDistance}\n * @function\n */\nvec4.sqrDist = vec4.squaredDistance;\n\n/**\n * Calculates the length of a vec4\n *\n * @param {vec4} a vector to calculate length of\n * @returns {Number} length of a\n */\nvec4.length = function (a) {\n    var x = a[0],\n        y = a[1],\n        z = a[2],\n        w = a[3];\n    return Math.sqrt(x*x + y*y + z*z + w*w);\n};\n\n/**\n * Alias for {@link vec4.length}\n * @function\n */\nvec4.len = vec4.length;\n\n/**\n * Calculates the squared length of a vec4\n *\n * @param {vec4} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\nvec4.squaredLength = function (a) {\n    var x = a[0],\n        y = a[1],\n        z = a[2],\n        w = a[3];\n    return x*x + y*y + z*z + w*w;\n};\n\n/**\n * Alias for {@link vec4.squaredLength}\n * @function\n */\nvec4.sqrLen = vec4.squaredLength;\n\n/**\n * Negates the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a vector to negate\n * @returns {vec4} out\n */\nvec4.negate = function(out, a) {\n    out[0] = -a[0];\n    out[1] = -a[1];\n    out[2] = -a[2];\n    out[3] = -a[3];\n    return out;\n};\n\n/**\n * Returns the inverse of the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a vector to invert\n * @returns {vec4} out\n */\nvec4.inverse = function(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  out[3] = 1.0 / a[3];\n  return out;\n};\n\n/**\n * Normalize a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a vector to normalize\n * @returns {vec4} out\n */\nvec4.normalize = function(out, a) {\n    var x = a[0],\n        y = a[1],\n        z = a[2],\n        w = a[3];\n    var len = x*x + y*y + z*z + w*w;\n    if (len > 0) {\n        len = 1 / Math.sqrt(len);\n        out[0] = x * len;\n        out[1] = y * len;\n        out[2] = z * len;\n        out[3] = w * len;\n    }\n    return out;\n};\n\n/**\n * Calculates the dot product of two vec4's\n *\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {Number} dot product of a and b\n */\nvec4.dot = function (a, b) {\n    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];\n};\n\n/**\n * Performs a linear interpolation between two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @param {Number} t interpolation amount between the two inputs\n * @returns {vec4} out\n */\nvec4.lerp = function (out, a, b, t) {\n    var ax = a[0],\n        ay = a[1],\n        az = a[2],\n        aw = a[3];\n    out[0] = ax + t * (b[0] - ax);\n    out[1] = ay + t * (b[1] - ay);\n    out[2] = az + t * (b[2] - az);\n    out[3] = aw + t * (b[3] - aw);\n    return out;\n};\n\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec4} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec4} out\n */\nvec4.random = function (out, scale) {\n    scale = scale || 1.0;\n\n    //TODO: This is a pretty awful way of doing this. Find something better.\n    out[0] = glMatrix.RANDOM();\n    out[1] = glMatrix.RANDOM();\n    out[2] = glMatrix.RANDOM();\n    out[3] = glMatrix.RANDOM();\n    vec4.normalize(out, out);\n    vec4.scale(out, out, scale);\n    return out;\n};\n\n/**\n * Transforms the vec4 with a mat4.\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the vector to transform\n * @param {mat4} m matrix to transform with\n * @returns {vec4} out\n */\nvec4.transformMat4 = function(out, a, m) {\n    var x = a[0], y = a[1], z = a[2], w = a[3];\n    out[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;\n    out[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;\n    out[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;\n    out[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;\n    return out;\n};\n\n/**\n * Transforms the vec4 with a quat\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the vector to transform\n * @param {quat} q quaternion to transform with\n * @returns {vec4} out\n */\nvec4.transformQuat = function(out, a, q) {\n    var x = a[0], y = a[1], z = a[2],\n        qx = q[0], qy = q[1], qz = q[2], qw = q[3],\n\n        // calculate quat * vec\n        ix = qw * x + qy * z - qz * y,\n        iy = qw * y + qz * x - qx * z,\n        iz = qw * z + qx * y - qy * x,\n        iw = -qx * x - qy * y - qz * z;\n\n    // calculate result * inverse quat\n    out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n    out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n    out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n    out[3] = a[3];\n    return out;\n};\n\n/**\n * Perform some operation over an array of vec4s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec4. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec4s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\nvec4.forEach = (function() {\n    var vec = vec4.create();\n\n    return function(a, stride, offset, count, fn, arg) {\n        var i, l;\n        if(!stride) {\n            stride = 4;\n        }\n\n        if(!offset) {\n            offset = 0;\n        }\n        \n        if(count) {\n            l = Math.min((count * stride) + offset, a.length);\n        } else {\n            l = a.length;\n        }\n\n        for(i = offset; i < l; i += stride) {\n            vec[0] = a[i]; vec[1] = a[i+1]; vec[2] = a[i+2]; vec[3] = a[i+3];\n            fn(vec, vec, arg);\n            a[i] = vec[0]; a[i+1] = vec[1]; a[i+2] = vec[2]; a[i+3] = vec[3];\n        }\n        \n        return a;\n    };\n})();\n\n/**\n * Returns a string representation of a vector\n *\n * @param {vec4} vec vector to represent as a string\n * @returns {String} string representation of the vector\n */\nvec4.str = function (a) {\n    return 'vec4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';\n};\n\nmodule.exports = vec4;\n","// alfrid.js\n\nimport GLM \t\t\t\t\tfrom 'gl-matrix';\nimport GLTool \t\t\t\tfrom './alfrid/GLTool';\nimport GLShader \t\t\tfrom './alfrid/GLShader';\nimport Mesh \t\t\t\tfrom './alfrid/Mesh';\n\n//\tTOOLS\nimport Scheduler \t\t\tfrom './alfrid/tools/Scheduler';\nimport EventDispatcher \t\tfrom './alfrid/tools/EventDispatcher';\nimport EaseNumber \t\t\tfrom './alfrid/tools/EaseNumber';\n\n//\tCAMERAS\nimport Camera \t\t\t\tfrom './alfrid/cameras/Camera';\nimport CameraOrtho \t\t\tfrom './alfrid/cameras/CameraOrtho';\nimport CameraPerspective\tfrom './alfrid/cameras/CameraPerspective';\n\n\nconst VERSION = '1.0.0';\n\nclass alfrid {\n\n\tconstructor() {\n\t\t\n\t\tthis.glm               = GLM;\n\t\tthis.GL                = GLTool;\n\t\tthis.GLTool            = GLTool;\n\t\tthis.GLShader          = GLShader;\n\t\tthis.Mesh              = Mesh;\n\t\tthis.Scheduler         = Scheduler;\n\t\tthis.EventDispatcher   = EventDispatcher;\n\t\tthis.EaseNumber        = EaseNumber;\n\t\tthis.Camera            = Camera;\n\t\tthis.CameraOrtho       = CameraOrtho;\n\t\tthis.CameraPerspective = CameraPerspective;\n\n\n\t\t//\tNOT SUPER SURE I'VE DONE THIS IS A GOOD WAY\n\n\t\tfor( let s in GLM) {\n\t\t\tif(GLM[s]) {\n\t\t\t\twindow[s] = GLM[s];\n\t\t\t}\n\t\t}\n\n\n\t\t//\tTESTING CODES\n\t}\n\n\n\tlog() {\n\t\tif(navigator.userAgent.indexOf('Chrome') > -1) {\n            console.log('%clib alfrid : VERSION ' + VERSION, 'background: #193441; color: #FCFFF5');\n        } else {\n        \tconsole.log('lib alfrid : VERSION ', VERSION);\n        }\n\t\tconsole.log('%cClasses : ', 'color: #193441');\n\n\t\tfor(let s in this) {\n\t\t\tif(this[s]) {\n\t\t\t\tconsole.log('%c - '+s, 'color: #3E606F');\n\t\t\t}\n\t\t}\n\t}\n\n}\n\nlet b = new alfrid();\n\nmodule.exports = b;\n","// GLShader.js\n\n'use strict';\n\nimport GL from './GLTool';\nvar glslify = require('glslify');\n\nlet addLineNumbers = function ( string ) {\n\tlet lines = string.split( '\\n' );\n\tfor ( let i = 0; i < lines.length; i ++ ) {\n\t\tlines[ i ] = ( i + 1 ) + ': ' + lines[ i ];\n\t}\n\treturn lines.join( '\\n' );\n};\n\nlet gl;\nlet defaultVertexShader = glslify('./shaders/basic.vert');\nlet defaultFragmentShader = glslify('./shaders/basic.frag');\n\nclass GLShader {\n\tconstructor(strVertexShader=defaultVertexShader, strFragmentShader=defaultFragmentShader) {\n\t\tgl = GL.gl;\n\t\tthis.parameters      = [];\n\t\tthis.uniformValues   = {};\n\t\tthis.uniformTextures = [];\n\n\t\tlet vsShader = this._createShaderProgram(strVertexShader, true);\n\t\tlet fsShader = this._createShaderProgram(strFragmentShader, false);\n\t\tthis._attachShaderProgram(vsShader, fsShader);\n\t}\n\n\n\tbind() {\n\t\tgl.useProgram(this.shaderProgram);\n\n\t\t//\tDEFAULT MATRICES\n\t\t/*\n\t\tif(this.shaderProgram.pMatrixUniform === undefined) {\tthis.shaderProgram.pMatrixUniform = gl.getUniformLocation(this.shaderProgram, 'uPMatrix');}\n\t\tif(this.shaderProgram.mvMatrixUniform === undefined) {\tthis.shaderProgram.mvMatrixUniform = gl.getUniformLocation(this.shaderProgram, 'uMVMatrix');}\n\t\tif(this.shaderProgram.normalMatrixUniform === undefined) {\tthis.shaderProgram.normalMatrixUniform = gl.getUniformLocation(this.shaderProgram, 'uNormalMatrix');}\n\t\tif(this.shaderProgram.invertMVMatrixUniform === undefined) {\tthis.shaderProgram.invertMVMatrixUniform = gl.getUniformLocation(this.shaderProgram, 'uInvertMVMatrix');}\n\t\t*/\n\n\t\tGL.useShader(this);\n\t\t// GL.setShaderProgram(this.shaderProgram);\n\n\t\tthis.uniformTextures = [];\n\t}\n\n\n\tuniform(mName, mType, mValue) {\n\t\tlet hasUniform = false;\n\t\tlet oUniform;\n\t\tfor(let i=0; i<this.parameters.length; i++) {\n\t\t\toUniform = this.parameters[i];\n\t\t\tif(oUniform.name === mName) {\n\t\t\t\toUniform.value = mValue;\n\t\t\t\thasUniform = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tif(!hasUniform) {\n\t\t\tthis.shaderProgram[mName] = gl.getUniformLocation(this.shaderProgram, mName);\n\t\t\tthis.parameters.push({name : mName, type: mType, value: mValue, uniformLoc: this.shaderProgram[mName]});\n\t\t} else {\n\t\t\tthis.shaderProgram[mName] = oUniform.uniformLoc;\n\t\t}\n\n\n\t\tif(mType.indexOf('Matrix') === -1) {\n\t\t\tgl[mType](this.shaderProgram[mName], mValue);\n\t\t} else {\n\t\t\tgl[mType](this.shaderProgram[mName], false, mValue);\n\t\t\tthis.uniformValues[mName] = mValue;\n\t\t}\n\t}\n\n\n\t_createShaderProgram(mShaderStr, isVertexShader) {\n\t\tlet shaderType = isVertexShader ? GL.VERTEX_SHADER : GL.FRAGMENT_SHADER;\n\t\tlet shader = gl.createShader(shaderType);\n\n\t\tgl.shaderSource(shader, mShaderStr);\n\t\tgl.compileShader(shader);\n\n\t\tif(!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\n\t\t\tconsole.warn('Error in Shader : ', gl.getShaderInfoLog(shader));\n\t\t\tconsole.log(addLineNumbers(mShaderStr));\n\t\t\treturn null;\n\t\t}\n\n\t\treturn shader;\n\t}\n\n\t_attachShaderProgram(mVertexShader, mFragmentShader) {\n\t\tthis.shaderProgram = gl.createProgram();\n\t\tgl.attachShader(this.shaderProgram, mVertexShader);\n\t\tgl.attachShader(this.shaderProgram, mFragmentShader);\n\t\tgl.linkProgram(this.shaderProgram);\n\t}\n\n}\n\n\nexport default GLShader;","// GLTool.js\n\nimport glm from 'gl-matrix';\n\nclass GLTool {\n\n\tconstructor() {\n\t\tthis.canvas;\n\t\tthis._viewport               = [0, 0, 0, 0];\n\t\tthis._enabledVertexAttribute = [];\n\t\tthis.identityMatrix          = glm.mat4.create();\n\t\tthis._normalMatrix           = glm.mat3.create();\n\t\tthis._inverseViewMatrix      = glm.mat4.create();\n\t\tthis._matrix                 = glm.mat4.create();\n\t\tglm.mat4.identity(this.identityMatrix, this.identityMatrix);\n\t}\n\n\t//\tINITIALIZE\n\n\tinit(mCanvas, mParameters = {}) {\n\t\t\n\t\tif(this.canvas !== undefined) {\n\t\t\tthis.destroy();\n\t\t}\n\t\n\t\tthis.canvas = mCanvas;\n\t\tthis.setSize(window.innerWidth, window.innerHeight);\n\t\tthis.gl          = this.canvas.getContext('webgl', mParameters) || this.canvas.getContext('experimental-webgl', mParameters);\n\t\t\n\n\t\t//\textensions\n\t\tconst extensions = ['EXT_shader_texture_lod', 'GL_EXT_shader_texture_lod', 'EXT_sRGB', 'WEBKIT_WEBGL_depth_texture', 'EXT_frag_depth', 'OES_texture_float', 'OES_texture_half_float', 'OES_texture_float_linear', 'OES_texture_half_float_linear', 'OES_standard_derivatives'];\n\t\tthis.extensions = {};\n\t\tfor(let i=0; i<extensions.length; i++) {\n\t\t\tthis.extensions[extensions[i]] = this.gl.getExtension(extensions[i]);\n\t\t}\n\t\t\n\n\t\t//\tCopy gl Attributes\n\t\tlet gl               = this.gl;\n\t\tthis.VERTEX_SHADER   = gl.VERTEX_SHADER;\n\t\tthis.FRAGMENT_SHADER = gl.FRAGMENT_SHADER;\n\t\tthis.COMPILE_STATUS  = gl.COMPILE_STATUS;\n\t\tthis.DEPTH_TEST      = gl.DEPTH_TEST;\n\t\tthis.CULL_FACE       = gl.CULL_FACE;\n\t\tthis.BLEND           = gl.BLEND;\n\n\t\tthis.enable(this.DEPTH_TEST);\n\t\tthis.enable(this.CULL_FACE);\n\t\tthis.enable(this.BLEND);\n\t}\n\n\n\t//\tPUBLIC METHODS\n\n\tsetViewport(x, y, w, h) {\n\t\tlet hasChanged = false;\n\t\tif(x!==this._viewport[0]) {hasChanged = true;}\n\t\tif(y!==this._viewport[1]) {hasChanged = true;}\n\t\tif(w!==this._viewport[2]) {hasChanged = true;}\n\t\tif(h!==this._viewport[3]) {hasChanged = true;}\n\n\t\tif(hasChanged) {\n\t\t\tthis.gl.viewport(x, y, w, h);\n\t\t\tthis._viewport = [x, y, w, h];\n\t\t}\n\t}\n\n\n\tclear(r, g, b, a) {\n\t\tthis.gl.clearColor( r, g, b, a );\n\t\tthis.gl.clear(this.gl.COLOR_BUFFER_BIT | this.gl.DEPTH_BUFFER_BIT);\n\t}\n\n\n\tsetMatrices(mCamera) {\n\t\tthis.camera = mCamera;\n\t\tthis.rotate(this.identityMatrix);\n\t}\n\n\n\tuseShader(mShader) {\n\t\tthis.shader = mShader;\n\t\tthis.shaderProgram = this.shader.shaderProgram;\n\t}\n\n\n\trotate(mRotation) {\n\t\tglm.mat4.copy(this._matrix, mRotation);\n\n\t\tglm.mat4.multiply(this._matrix, this.camera.matrix, this._matrix);\n\t\tglm.mat3.fromMat4(this._normalMatrix, this._matrix);\n\t\tglm.mat3.invert(this._normalMatrix, this._normalMatrix);\n\t\tglm.mat3.transpose(this._normalMatrix, this._normalMatrix);\n\n\t\tglm.mat3.fromMat4(this._inverseViewMatrix, this._matrix);\n\t\tglm.mat3.invert(this._inverseViewMatrix, this._inverseViewMatrix);\n\t}\n\n\n\tdraw(mMesh) {\n\t\tfunction getAttribLoc(gl, shaderProgram, name) {\n\t\t\tif(shaderProgram.cacheAttribLoc === undefined) {\tshaderProgram.cacheAttribLoc = {};\t}\n\t\t\tif(shaderProgram.cacheAttribLoc[name] === undefined) {\n\t\t\t\tshaderProgram.cacheAttribLoc[name] = gl.getAttribLocation(shaderProgram, name);\n\t\t\t}\n\n\t\t\treturn shaderProgram.cacheAttribLoc[name];\n\t\t}\n\n\t\t//\tATTRIBUTES\n\t\tfor(let i=0; i<mMesh.attributes.length; i++) {\n\n\t\t\tlet attribute = mMesh.attributes[i];\n\t\t\tthis.gl.bindBuffer(this.gl.ARRAY_BUFFER, attribute.buffer);\n\t\t\tlet attrPosition = getAttribLoc(this.gl, this.shaderProgram, attribute.name);\n\t\t\tthis.gl.vertexAttribPointer(attrPosition, attribute.itemSize, this.gl.FLOAT, false, 0, 0);\n\t\t\t\n\t\t\tif(this._enabledVertexAttribute.indexOf(attrPosition) === -1) {\n\t\t\t\tthis.gl.enableVertexAttribArray(attrPosition);\n\t\t\t\tthis._enabledVertexAttribute.push(attrPosition);\n\t\t\t}\n\t\t\t\n\t\t}\n\n\n\t\t//\tDEFAULT MATRICES\n\t\tthis.shader.uniform('uProjectionMatrix', 'uniformMatrix4fv', this.camera.projection);\n\t\tthis.shader.uniform('uModelMatrix', 'uniformMatrix4fv', this.identityMatrix);\n\t\tthis.shader.uniform('uViewMatrix', 'uniformMatrix4fv', this.camera.matrix);\n\t\tthis.shader.uniform('uNormalMatrix', 'uniformMatrix3fv', this._normalMatrix);\n\t\tthis.shader.uniform('uViewMatrixInverse', 'uniformMatrix4fv', this._inverseViewMatrix);\n\t\t\n\t\t//\tDRAWING\n\t\tif(mMesh.drawType === this.gl.POINTS ) {\n\t\t\tthis.gl.drawArrays(mMesh.drawType, 0, mMesh.vertexSize);\t\n\t\t} else {\n\t\t\tthis.gl.drawElements(mMesh.drawType, mMesh.iBuffer.numItems, this.gl.UNSIGNED_SHORT, 0);\t\n\t\t}\n\n\t}\n\n\n\tsetSize(mWidth, mHeight) {\n\t\tthis._width = mWidth;\n\t\tthis._height = mHeight;\n\t\tthis.canvas.width = this._width;\n\t\tthis.canvas.height = this._height;\n\t\tthis._aspectRatio = this._width / this._height;\n\t}\n\n\n\tdisplayExtensions() {\n\t\tconsole.log('Extensions : ' , this.extensions);\n\t\tfor(let ext in this.extensions) {\n\t\t\tif(this.extensions[ext]) {\n\t\t\t\tconsole.log(ext, ':', this.extensions[ext]);\t\n\t\t\t}\n\t\t}\t\n\t}\n\n\t//\tBLEND MODES\n\n\tenableAlphaBlending() {\n\t\tthis.gl.blendFunc(this.gl.SRC_ALPHA, this.gl.ONE_MINUS_SRC_ALPHA);\t\n\t}\n\n\tenableAdditiveBlending() {\n\t\tthis.gl.blendFunc(this.gl.ONE, this.gl.ONE);\n\t}\n\n\n\t//\tGL NATIVE FUNCTIONS\n\n\tenable(mParameter) {\tthis.gl.enable(mParameter);\t\t}\n\n\tdisable(mParameter) {\tthis.gl.disable(mParameter);\t}\n\n\tviewport(x, y, w, h) {\tthis.setViewport(x, y, w, h);\t}\n\n\n\t//\tGETTER AND SETTERS\n\n\tget width() {\treturn this._width;\t\t}\n\n\tget height() {\treturn this._height;\t}\n\n\tget aspectRatio() {\treturn this._aspectRatio;\t}\n\n\t//\tDESTROY\n\n\tdestroy() {\n\t\tthis.canvas = null;\n\t\tif(this.canvas.parentNode) {\n\t\t\ttry {\n\t\t\t\tthis.canvas.parentNode.removeChild(this.canvas);\n\t\t\t} catch (e) {\n\t\t\t\tconsole.log('Error : ', e);\n\t\t\t}\n\t\t}\n\t}\n}\n\nlet GL = new GLTool();\n\nexport default GL;\n","// Mesh.js\n\nimport GL from './GLTool';\n\nlet gl;\n\nclass Mesh {\n\tconstructor(mDrawType = GL.gl.TRIANGLES) {\n\t\tgl = GL.gl;\n\t\tthis.drawType = mDrawType;\n\t\tthis._attributes = [];\n\t}\n\n\n\tbufferVertex(mArrayVertices, isDynamic=false) {\n\n\t\tthis.bufferData(mArrayVertices, 'aVertexPosition', 3, isDynamic);\n\n\t}\n\n\n\tbufferTexCoords(mArrayTexCoords, isDynamic=false) {\n\n\t\tthis.bufferData(mArrayTexCoords, 'aTextureCoord', 2, isDynamic);\n\n\t}\n\n\n\tbufferIndices(mArrayIndices, isDynamic=false) {\n\n\t\tvar drawType          = isDynamic ? gl.DYNAMIC_DRAW : gl.STATIC_DRAW;\n\t\tthis._indices         = mArrayIndices;\n\t\tthis.iBuffer          = gl.createBuffer();\n\t\tgl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.iBuffer);\n\t\tgl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(mArrayIndices), drawType);\n\t\tthis.iBuffer.itemSize = 1;\n\t\tthis.iBuffer.numItems = mArrayIndices.length;\n\n\t}\n\n\n\tbufferData(mData, mName, mItemSize, isDynamic=false) {\n\t\tlet index = -1, i=0;\n\t\tlet drawType   = isDynamic ? gl.DYNAMIC_DRAW : gl.STATIC_DRAW;\n\t\tlet bufferData = [];\n\t\tlet buffer, dataArray;\n\n\t\t//\tCheck for existing attributes\n\t\tfor(i=0; i<this._attributes.length; i++) {\n\t\t\tif(this._attributes[i].name === mName) {\n\t\t\t\tthis._attributes[i].data = mData;\n\t\t\t\tindex = i;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\t//\tflatten buffer data\t\t\n\t\tfor(i=0; i<mData.length; i++) {\n\t\t\tfor(let j=0; j<mData[i].length; j++) {\n\t\t\t\tbufferData.push(mData[i][j]);\n\t\t\t}\n\t\t}\n\n\t\t\n\t\tif(index === -1) {\t\n\n\t\t\t//\tattribute not exist yet, create new buffer\n\t\t\tbuffer = gl.createBuffer();\n\t\t\tgl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n\n\t\t\tdataArray = new Float32Array(bufferData);\n\t\t\tgl.bufferData(gl.ARRAY_BUFFER, dataArray, drawType);\n\t\t\tthis._attributes.push({name:mName, data:mData, itemSize: mItemSize, buffer:buffer, dataArray:dataArray});\n\n\t\t} else {\n\n\t\t\t//\tattribute existed, replace with new data\n\t\t\tbuffer = this._attributes[index].buffer;\n\t\t\tgl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n\t\t\tdataArray = this._attributes[index].dataArray;\n\t\t\tfor(i=0; i<bufferData.length; i++) {\n\t\t\t\tdataArray[i] = bufferData[i];\n\t\t\t}\n\t\t\tgl.bufferData(gl.ARRAY_BUFFER, dataArray, drawType);\n\n\t\t}\n\n\t}\n\n\n\tget attributes() {\n\t\treturn this._attributes;\n\t}\n\n\n}\n\n\nexport default Mesh;","// Camera.js\n\nimport glm from 'gl-matrix';\n\nclass Camera {\n\tconstructor() {\n\t\t//\tVIEW MATRIX\n\t\tthis._matrix = glm.mat4.create();\n\n\t\t//\tPROJECTION MATRIX\n\t\tthis._projection = glm.mat4.create();\n\n\t\t//\tPOSITION OF CAMERA\n\t\tthis.position = glm.vec3.create();\n\t}\n\n\n\tlookAt(aEye, aCenter, aUp) {\n\t\tglm.vec3.copy(this.position, aEye);\n\t\tglm.mat4.identity(this._matrix);\n\t\tglm.mat4.lookAt(this._matrix, aEye, aCenter, aUp);\n\t}\n\n\n\t//\tGETTERS \n\n\tget matrix() {\n\t\treturn this._matrix;\n\t}\n\n\n\tget projection() {\n\t\treturn this._projection;\n\t} \n}\n\n\nexport default Camera;","// CameraOrtho.js\n\nimport Camera from './Camera';\nimport glm from 'gl-matrix';\n\nclass CameraOrtho extends Camera {\n\tconstructor() {\n\t\tsuper();\n\n\t\tvar eye    = glm.vec3.clone([0, 0, 5] );\n\t\tvar center = glm.vec3.create( );\n\t\tvar up     = glm.vec3.clone( [0,-1,0] );\n\t\tthis.lookAt(eye, center, up);\n\t\tthis.ortho( 1, -1, 1, -1);\n\t}\n\n\n\tsetBoundary(left, right, top, bottom) {\n\n\t\tthis.ortho(left, right, top, bottom);\n\t\t\n\t}\n\n\n\tortho(left, right, top, bottom) {\n\t\tthis.left   = left;\n\t\tthis.right  = right;\n\t\tthis.top    = top;\n\t\tthis.bottom = bottom;\n\t\tglm.mat4.ortho(this._projection, left, right, top, bottom, 0, 10000);\n\t}\n\t\n}\n\n\nexport default CameraOrtho;","// CameraPerspective.js\n\nimport Camera from './Camera';\nimport glm from 'gl-matrix';\n\nclass CameraPerspective extends Camera {\n\n\tconstructor() {\n\t\tsuper();\n\t}\n\n\n\tsetPerspective(mFov, mAspectRatio, mNear, mFar) {\n\t\t\n\t\tthis._fov         = mFov;\n\t\tthis._near        = mNear;\n\t\tthis._far         = mFar;\n\t\tthis._aspectRatio = mAspectRatio;\n\t\tglm.mat4.perspective(this._projection, mFov, mAspectRatio, mNear, mFar);\n\t}\n\n\n\tsetAspectRatio(mAspectRatio) {\n\t\tthis._aspectRatio = mAspectRatio;\n\t\tglm.mat4.perspective(this.projection, this._fov, mAspectRatio, this._near, this._far);\n\t}\n}\n\n\nexport default CameraPerspective;","// EaseNumber.js\n\nimport Scheduler from './Scheduler';\n\nclass EaseNumber {\n\tconstructor(mValue, mEasing) {\n\t\tthis.easing       = mEasing;\n\t\tthis._value       = mValue;\n\t\tthis._targetValue = mValue;\n\t\tScheduler.addEF( ()=> this._update());\t\t\n\t}\n\n\n\t_update() {\n\t\tthis._checkLimit();\n\t\tthis._value += (this._targetValue - this._value) * this.easing;\t\n\t}\n\n\tsetTo(mValue) {\n\t\tthis._targetValue = this._value = mValue;\n\t}\n\n\n\tadd(mAdd) {\n\t\tthis._targetValue += mAdd;\n\t}\n\n\tlimit(mMin, mMax) {\n\t\tif(mMin > mMax) {\n\t\t\tthis.limit(mMax, mMin);\n\t\t\treturn;\n\t\t}\n\n\t\tthis._min = mMin;\n\t\tthis._max = mMax;\n\n\t\tthis._checkLimit();\n\t}\n\n\n\t_checkLimit() {\n\t\tif(this._min !== undefined && this._targetValue < this._min) {\n\t\t\tthis._targetValue = this._min;\n\t\t} \n\n\t\tif(this._max !== undefined && this._targetValue > this._max) {\n\t\t\tthis._targetValue = this._max;\n\t\t} \n\t}\n\n\n\t//\tGETTERS / SETTERS\n\n\tset value(mValue) {\n\t\tthis._targetValue = mValue;\n\t}\n\n\tget value() {\n\t\treturn this._value;\n\t}\n\n\tget targetValue() {\n\t\treturn this._targetValue;\n\t}\n\n}\n\n\nexport default EaseNumber;","// EventDispatcher.js\n\nlet supportsCustomEvents = true;\ntry {\n\tlet newTestCustomEvent = document.createEvent('CustomEvent');\n\tnewTestCustomEvent = null;\n} catch(e){\n\tsupportsCustomEvents = false;\n}\n\nclass EventDispatcher {\n\n\tconstructor() {\n\n\t}\n\n\n\taddEventListener(aEventType, aFunction) {\n\n\t\tif(this._eventListeners === null) {\n\t\t\tthis._eventListeners = {};\n\t\t}\n\t\tif(!this._eventListeners[aEventType]){\n\t\t\tthis._eventListeners[aEventType] = [];\n\t\t}\n\t\tthis._eventListeners[aEventType].push(aFunction);\n\t\t\n\t\treturn this;\n\n\t}\n\n\n\tremoveEventListener(aEventType, aFunction) {\n\t\tif(this._eventListeners === null) {\n\t\t\tthis._eventListeners = {};\n\t\t}\n\t\tlet currentArray = this._eventListeners[aEventType];\n\t\t\n\t\tif (typeof(currentArray) === 'undefined') {\n\t\t\treturn this;\n\t\t}\n\t\t\n\t\tlet currentArrayLength = currentArray.length;\n\t\tfor(let i = 0; i < currentArrayLength; i++){\n\t\t\tif(currentArray[i] === aFunction){\n\t\t\t\tcurrentArray.splice(i, 1);\n\t\t\t\ti--;\n\t\t\t\tcurrentArrayLength--;\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\tdispatchEvent(aEvent) {\n\t\tif(this._eventListeners === null) {\n\t\t\tthis._eventListeners = {};\n\t\t}\n\t\tlet eventType = aEvent.type;\n\t\t\n\t\ttry {\n\t\t\tif(aEvent.target === null) {\n\t\t\t\taEvent.target = this;\n\t\t\t}\n\t\t\taEvent.currentTarget = this;\n\t\t}\n\t\tcatch(theError) {\n\t\t\tlet newEvent = {'type' : eventType, 'detail' : aEvent.detail, 'dispatcher' : this };\n\t\t\treturn this.dispatchEvent(newEvent);\n\t\t}\n\t\t\n\t\tlet currentEventListeners = this._eventListeners[eventType];\n\t\tif(currentEventListeners !== null && currentEventListeners !== undefined) {\n\t\t\tlet currentArray = this._copyArray(currentEventListeners);\n\t\t\tlet currentArrayLength = currentArray.length;\n\t\t\tfor(let i = 0; i < currentArrayLength; i++){\n\t\t\t\tlet currentFunction = currentArray[i];\n\t\t\t\tcurrentFunction.call(this, aEvent);\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\tdispatchCustomEvent(aEventType, aDetail) {\n\t\tlet newEvent;\n\t\tif (supportsCustomEvents){\n\t\t\tnewEvent = document.createEvent('CustomEvent');\n\t\t\tnewEvent.dispatcher = this;\n\t\t\tnewEvent.initCustomEvent(aEventType, false, false, aDetail);\n\t\t}\n\t\telse {\n\t\t\tnewEvent = {'type' : aEventType, 'detail' : aDetail, 'dispatcher' : this };\n\t\t}\n\t\treturn this.dispatchEvent(newEvent);\n\t}\n\n\t_destroy() {\n\t\tif(this._eventListeners !== null) {\n\t\t\tfor(let objectName in this._eventListeners) {\n\t\t\t\tif(this._eventListeners.hasOwnProperty(objectName)) {\n\t\t\t\t\tlet currentArray = this._eventListeners[objectName];\n\t\t\t\t\tlet currentArrayLength = currentArray.length;\n\t\t\t\t\tfor(let i = 0; i < currentArrayLength; i++) {\n\t\t\t\t\t\tcurrentArray[i] = null;\n\t\t\t\t\t}\n\t\t\t\t\tdelete this._eventListeners[objectName];\t\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis._eventListeners = null;\n\t\t}\n\t}\n\n\t_copyArray(aArray) {\n\t\tlet currentArray = new Array(aArray.length);\n\t\tlet currentArrayLength = currentArray.length;\n\t\tfor(let i = 0; i < currentArrayLength; i++) {\n\t\t\tcurrentArray[i] = aArray[i];\n\t\t}\n\t\treturn currentArray;\n\t}\n}\n\n\nexport default EventDispatcher;","// Scheduler.js\n\n'use strict';\n\nif(window.requestAnimFrame === undefined) {\n\twindow.requestAnimFrame = (function(){\n\t\treturn  window.requestAnimationFrame       || \n\t\twindow.webkitRequestAnimationFrame || \n\t\twindow.mozRequestAnimationFrame    || \n\t\twindow.oRequestAnimationFrame      || \n\t\twindow.msRequestAnimationFrame     || \n\t\tfunction( callback ){\n\t\twindow.setTimeout(callback, 1000 / 60);\n\t\t};\n\t})();\n}\n\n\nconst FRAMERATE = 60;\n\nclass Scheduler {\n\n\tconstructor() {\n\t\tthis._delayTasks = [];\n\t\tthis._nextTasks = [];\n\t\tthis._deferTasks = [];\n\t\tthis._highTasks = [];\n\t\tthis._usurpTask = [];\n\t\tthis._enterframeTasks = [];\n\t\tthis._idTable = 0;\n\n\t\tthis._loop();\n\t}\n\n\n\t//\tPUBLIC METHODS\n\n\taddEF(func, params) {\n\t\tparams = params || [];\n\t\tlet id = this._idTable;\n\t\tthis._enterframeTasks[id] = {func:func, params:params};\n\t\tthis._idTable ++;\n\t\treturn id;\n\t}\n\n\tremoveEF(id) {\n\t\tif(this._enterframeTasks[id] !== undefined) {\n\t\t\tthis._enterframeTasks[id] = null;\n\t\t}\n\t\treturn -1;\n\t}\n\n\tdelay(func, params, delay) {\n\t\tlet time = new Date().getTime();\n\t\tlet t = {func:func, params:params, delay:delay, time:time};\n\t\tthis._delayTasks.push(t);\n\t}\n\n\tdefer(func, params) {\n\t\tlet t = {func:func, params:params};\n\t\tthis._deferTasks.push(t);\n\t}\n\n\tnext(func, params) {\n\t\tlet t = {func:func, params:params};\n\t\tthis._nextTasks.push(t);\n\t}\n\n\tusurp(func, params) {\n\t\tlet t = {func:func, params:params};\n\t\tthis._usurpTask.push(t);\n\t}\n\n\n\t//\tPRIVATE METHODS\n\n\t_process() {\n\t\tlet i = 0,\n\t\t\ttask, interval, current;\n\t\tfor ( i=0; i<this._enterframeTasks.length; i++) {\n\t\t\ttask = this._enterframeTasks[i];\n\t\t\tif(task !== null && task !== undefined) {\n\t\t\t\t// task.func.apply(task.scope, task.params);\n\t\t\t\t// console.log(task.func());\n\t\t\t\ttask.func(task.params);\n\t\t\t}\n\t\t}\n\t\t\n\t\twhile ( this._highTasks.length > 0) {\n\t\t\ttask = this._highTasks.pop();\n\t\t\ttask.func(task.params);\n\t\t\t// task.func.apply(task.scope, task.params);\n\t\t}\n\t\t\n\n\t\tlet startTime = new Date().getTime();\n\n\t\tfor ( i=0; i<this._delayTasks.length; i++) {\n\t\t\ttask = this._delayTasks[i];\n\t\t\tif(startTime-task.time > task.delay) {\n\t\t\t\t// task.func.apply(task.scope, task.params);\n\t\t\t\ttask.func(task.params);\n\t\t\t\tthis._delayTasks.splice(i, 1);\n\t\t\t}\n\t\t}\n\n\t\tstartTime = new Date().getTime();\n\t\tinterval = 1000 / FRAMERATE;\n\t\twhile(this._deferTasks.length > 0) {\n\t\t\ttask = this._deferTasks.shift();\n\t\t\tcurrent = new Date().getTime();\n\t\t\tif(current - startTime < interval ) {\n\t\t\t\t// task.func.apply(task.scope, task.params);\n\t\t\t\ttask.func(task.params);\n\t\t\t} else {\n\t\t\t\tthis._deferTasks.unshift(task);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\n\t\tstartTime = new Date().getTime();\n\t\tinterval = 1000 / FRAMERATE;\n\t\twhile(this._usurpTask.length > 0) {\n\t\t\ttask = this._usurpTask.shift();\n\t\t\tcurrent = new Date().getTime();\n\t\t\tif(current - startTime < interval ) {\n\t\t\t\t// task.func.apply(task.scope, task.params);\n\t\t\t\ttask.func(task.params);\n\t\t\t} else {\n\t\t\t\t// this._usurpTask.unshift(task);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\n\n\t\tthis._highTasks = this._highTasks.concat(this._nextTasks);\n\t\tthis._nextTasks = [];\n\t\tthis._usurpTask = [];\n\t}\n\n\t_loop() {\n\t\tthis._process();\n\t\twindow.requestAnimFrame( ()=> this._loop() );\n\t}\n}\n\nconst scheduler = new Scheduler();\n\nexport default scheduler;"],"sourceRoot":"/source/"}